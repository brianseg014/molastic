Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> source
Rule 1     source -> functions statements
Rule 2     source -> functions
Rule 3     source -> statements
Rule 4     source -> <empty>
Rule 5     functions -> functions function
Rule 6     functions -> function
Rule 7     function -> decltype ID parameters block
Rule 8     parameters -> LP innerparameters RP
Rule 9     parameters -> LP RP
Rule 10    innerparameters -> innerparameters COMMA declparam
Rule 11    innerparameters -> declparam
Rule 12    declparam -> decltype ID
Rule 13    statements -> statements statement
Rule 14    statements -> statement
Rule 15    statement -> rstatement
Rule 16    statement -> dstatement SEMICOLON
Rule 17    rstatement -> if_else
Rule 18    rstatement -> if
Rule 19    rstatement -> while
Rule 20    rstatement -> for
Rule 21    rstatement -> each
Rule 22    rstatement -> ineach
Rule 23    rstatement -> try
Rule 24    if -> IF LP expression RP trailer
Rule 25    if_else -> IF LP expression RP trailer ELSE trailer
Rule 26    while -> WHILE LP expression RP trailer_or_empty
Rule 27    for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty
Rule 28    each -> FOR LP decltype ID COLON expression RP trailer
Rule 29    ineach -> FOR LP ID IN expression RP trailer
Rule 30    try -> TRY block traps
Rule 31    dstatement -> do
Rule 32    dstatement -> declaration
Rule 33    dstatement -> continue
Rule 34    dstatement -> break
Rule 35    dstatement -> return
Rule 36    dstatement -> throw
Rule 37    dstatement -> expression
Rule 38    do -> DO block WHILE LP expression RP
Rule 39    continue -> CONTINUE
Rule 40    break -> BREAK
Rule 41    return -> RETURN optional_expression
Rule 42    throw -> THROW expression
Rule 43    trailer_or_empty -> trailer
Rule 44    trailer_or_empty -> empty
Rule 45    trailer -> block
Rule 46    trailer -> statement
Rule 47    block -> LBRACK statements RBRACK
Rule 48    block -> LBRACK dstatement RBRACK
Rule 49    block -> LBRACK statements dstatement RBRACK
Rule 50    block -> LBRACK RBRACK
Rule 51    empty -> SEMICOLON
Rule 52    initializer -> declaration
Rule 53    initializer -> expression
Rule 54    initializer -> <empty>
Rule 55    afterthought -> expression
Rule 56    afterthought -> <empty>
Rule 57    declaration -> decltype declvars
Rule 58    decltype -> type closedbraces
Rule 59    decltype -> type
Rule 60    decltype -> idaccess_lbrace RBRACE closedbraces
Rule 61    decltype -> idaccess_lbrace RBRACE
Rule 62    closedbraces -> closedbraces LBRACE RBRACE
Rule 63    closedbraces -> LBRACE RBRACE
Rule 64    type -> DEF
Rule 65    type -> PRIMITIVE
Rule 66    type -> idaccess
Rule 67    declvars -> declvars COMMA declvar
Rule 68    declvars -> declvar
Rule 69    declvar -> ID ASSIGN expression
Rule 70    declvar -> ID
Rule 71    traps -> traps trap
Rule 72    traps -> trap
Rule 73    trap -> CATCH LP type ID RP block
Rule 74    optional_expression -> expression
Rule 75    optional_expression -> <empty>
Rule 76    noncondexpression -> unary
Rule 77    noncondexpression -> binary
Rule 78    noncondexpression -> bool
Rule 79    noncondexpression -> comp
Rule 80    noncondexpression -> instanceof
Rule 81    noncondexpression -> elvis
Rule 82    binary -> noncondexpression MUL noncondexpression
Rule 83    binary -> noncondexpression DIV noncondexpression
Rule 84    binary -> noncondexpression REM noncondexpression
Rule 85    binary -> noncondexpression ADD noncondexpression
Rule 86    binary -> noncondexpression SUB noncondexpression
Rule 87    binary -> noncondexpression FIND noncondexpression
Rule 88    binary -> noncondexpression MATCH noncondexpression
Rule 89    binary -> noncondexpression LSH noncondexpression
Rule 90    binary -> noncondexpression RSH noncondexpression
Rule 91    binary -> noncondexpression USH noncondexpression
Rule 92    binary -> noncondexpression BWAND noncondexpression
Rule 93    binary -> noncondexpression XOR noncondexpression
Rule 94    binary -> noncondexpression BWOR noncondexpression
Rule 95    bool -> noncondexpression BOOLAND noncondexpression
Rule 96    bool -> noncondexpression BOOLOR noncondexpression
Rule 97    comp -> noncondexpression GT noncondexpression
Rule 98    comp -> noncondexpression GTE noncondexpression
Rule 99    comp -> noncondexpression LT noncondexpression
Rule 100   comp -> noncondexpression LTE noncondexpression
Rule 101   comp -> noncondexpression EQ noncondexpression
Rule 102   comp -> noncondexpression EQR noncondexpression
Rule 103   comp -> noncondexpression NE noncondexpression
Rule 104   comp -> noncondexpression NER noncondexpression
Rule 105   instanceof -> noncondexpression INSTANCEOF decltype
Rule 106   elvis -> noncondexpression ELVIS noncondexpression
Rule 107   expression -> noncondexpression
Rule 108   expression -> conditional
Rule 109   expression -> assignment
Rule 110   conditional -> noncondexpression COND expression COLON expression
Rule 111   assignment -> only_assignment
Rule 112   assignment -> compound_assignment
Rule 113   only_assignment -> noncondexpression ASSIGN expression
Rule 114   compound_assignment -> noncondexpression AADD expression
Rule 115   compound_assignment -> noncondexpression ASUB expression
Rule 116   compound_assignment -> noncondexpression AMUL expression
Rule 117   compound_assignment -> noncondexpression ADIV expression
Rule 118   compound_assignment -> noncondexpression AREM expression
Rule 119   compound_assignment -> noncondexpression AAND expression
Rule 120   compound_assignment -> noncondexpression AXOR expression
Rule 121   compound_assignment -> noncondexpression AOR expression
Rule 122   compound_assignment -> noncondexpression ALSH expression
Rule 123   compound_assignment -> noncondexpression ARSH expression
Rule 124   compound_assignment -> noncondexpression AUSH expression
Rule 125   unary -> pre
Rule 126   unary -> unarynotaddsub
Rule 127   pre -> INCR chain
Rule 128   pre -> DECR chain
Rule 129   pre -> ADD unary
Rule 130   pre -> SUB unary
Rule 131   unarynotaddsub -> chain
Rule 132   unarynotaddsub -> post
Rule 133   unarynotaddsub -> not
Rule 134   unarynotaddsub -> castexpression
Rule 135   post -> chain INCR
Rule 136   post -> chain DECR
Rule 137   not -> BOOLNOT unary
Rule 138   not -> BWNOT unary
Rule 139   castexpression -> primordefcast
Rule 140   castexpression -> refcast
Rule 141   primordefcast -> LP primordefcasttype RP unary
Rule 142   refcast -> LP refcasttype RP unarynotaddsub
Rule 143   primordefcasttype -> DEF
Rule 144   primordefcasttype -> PRIMITIVE
Rule 145   refcasttype -> DEF closedbraces
Rule 146   refcasttype -> PRIMITIVE closedbraces
Rule 147   refcasttype -> idaccess closedbraces
Rule 148   refcasttype -> idaccess
Rule 149   chain -> arrayinitializer
Rule 150   chain -> dynamic
Rule 151   dynamic -> callinvoke
Rule 152   dynamic -> fieldaccess
Rule 153   dynamic -> braceaccess
Rule 154   dynamic -> primary
Rule 155   callinvoke -> callinvoke_no_null_safe
Rule 156   callinvoke -> callinvoke_null_safe
Rule 157   callinvoke_no_null_safe -> dynamic DOT ID arguments
Rule 158   callinvoke_no_null_safe -> idaccess arguments
Rule 159   callinvoke_null_safe -> dynamic NSDOT ID arguments
Rule 160   fieldaccess -> fieldaccess_no_null_safe
Rule 161   fieldaccess -> fieldaccess_null_safe
Rule 162   fieldaccess_no_null_safe -> dynamic DOT ID
Rule 163   fieldaccess_no_null_safe -> idaccess
Rule 164   fieldaccess_null_safe -> dynamic NSDOT ID
Rule 165   braceaccess -> dynamic LBRACE expression RBRACE
Rule 166   braceaccess -> idaccess_lbrace expression RBRACE
Rule 167   primary -> precedence
Rule 168   primary -> numeric
Rule 169   primary -> boolean
Rule 170   primary -> null
Rule 171   primary -> string
Rule 172   primary -> regex
Rule 173   primary -> listinitializer
Rule 174   primary -> mapinitializer
Rule 175   primary -> calllocal
Rule 176   primary -> newobject
Rule 177   precedence -> LP expression RP
Rule 178   numeric -> octal
Rule 179   numeric -> hex
Rule 180   numeric -> integer
Rule 181   numeric -> decimal
Rule 182   octal -> OCTAL
Rule 183   hex -> HEX
Rule 184   integer -> INTEGER
Rule 185   decimal -> DECIMAL
Rule 186   boolean -> TRUE
Rule 187   boolean -> FALSE
Rule 188   null -> NULL
Rule 189   string -> STRING
Rule 190   regex -> REGEX
Rule 191   idaccess -> idaccess DOT ID
Rule 192   idaccess -> ID
Rule 193   idaccess_lbrace -> idaccess LBRACE
Rule 194   calllocal -> ID arguments
Rule 195   calllocal -> DOLLAR arguments
Rule 196   newobject -> NEW type arguments
Rule 197   arrayinitializer -> newstandardarray
Rule 198   arrayinitializer -> newinitializedarray
Rule 199   newstandardarray -> NEW type dims
Rule 200   newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK
Rule 201   dims -> dims dim
Rule 202   dims -> dim
Rule 203   dim -> LBRACE expression RBRACE
Rule 204   listinitializer -> LBRACE optional_expressions RBRACE
Rule 205   optional_expressions -> expressions
Rule 206   optional_expressions -> <empty>
Rule 207   expressions -> expression COMMA expression
Rule 208   expressions -> expression
Rule 209   mapinitializer -> LBRACE optional_maptokens RBRACE
Rule 210   optional_maptokens -> maptokens
Rule 211   optional_maptokens -> COLON
Rule 212   maptokens -> maptokens COMMA maptoken
Rule 213   maptokens -> maptoken
Rule 214   maptoken -> expression COLON expression
Rule 215   arguments -> LP innerarguments RP
Rule 216   arguments -> LP RP
Rule 217   innerarguments -> innerarguments COMMA argument
Rule 218   innerarguments -> argument
Rule 219   argument -> expression
Rule 220   argument -> lambda
Rule 221   argument -> funcref
Rule 222   lambda -> lamtypes ARROW block
Rule 223   lambda -> lamtypes ARROW expression
Rule 224   lamtypes -> LP innerlamtypes RP
Rule 225   lamtypes -> lamtype
Rule 226   innerlamtypes -> innerlamtypes COMMA lamtype
Rule 227   innerlamtypes -> lamtype
Rule 228   lamtype -> decltype ID
Rule 229   lamtype -> ID
Rule 230   funcref -> classfuncref
Rule 231   funcref -> constructorfuncref
Rule 232   funcref -> localfuncref
Rule 233   classfuncref -> decltype REF ID
Rule 234   constructorfuncref -> decltype REF NEW
Rule 235   localfuncref -> THIS REF ID

Terminals, with rules where they appear

AADD                 : 114
AAND                 : 119
ADD                  : 85 129
ADIV                 : 117
ALSH                 : 122
AMUL                 : 116
AOR                  : 121
AREM                 : 118
ARROW                : 222 223
ARSH                 : 123
ASSIGN               : 69 113
ASUB                 : 115
AUSH                 : 124
AXOR                 : 120
BOOLAND              : 95
BOOLNOT              : 137
BOOLOR               : 96
BREAK                : 40
BWAND                : 92
BWNOT                : 138
BWOR                 : 94
CATCH                : 73
COLON                : 28 110 211 214
COMMA                : 10 67 207 212 217 226
COND                 : 110
CONTINUE             : 39
DECIMAL              : 185
DECR                 : 128 136
DEF                  : 64 143 145
DIV                  : 83
DO                   : 38
DOLLAR               : 195
DOT                  : 157 162 191
ELSE                 : 25
ELVIS                : 106
EQ                   : 101
EQR                  : 102
FALSE                : 187
FIND                 : 87
FOR                  : 27 28 29
GT                   : 97
GTE                  : 98
HEX                  : 183
ID                   : 7 12 28 29 69 70 73 157 159 162 164 191 192 194 228 229 233 235
IF                   : 24 25
IN                   : 29
INCR                 : 127 135
INSTANCEOF           : 105
INTEGER              : 184
LBRACE               : 62 63 165 193 200 203 204 209
LBRACK               : 47 48 49 50 200
LP                   : 8 9 24 25 26 27 28 29 38 73 141 142 177 215 216 224
LSH                  : 89
LT                   : 99
LTE                  : 100
MATCH                : 88
MUL                  : 82
NE                   : 103
NER                  : 104
NEW                  : 196 199 200 234
NSDOT                : 159 164
NULL                 : 188
OCTAL                : 182
PRIMITIVE            : 65 144 146
RBRACE               : 60 61 62 63 165 166 200 203 204 209
RBRACK               : 47 48 49 50 200
REF                  : 233 234 235
REGEX                : 190
REM                  : 84
RETURN               : 41
RP                   : 8 9 24 25 26 27 28 29 38 73 141 142 177 215 216 224
RSH                  : 90
SEMICOLON            : 16 27 27 51
STRING               : 189
SUB                  : 86 130
THIS                 : 235
THROW                : 42
TRUE                 : 186
TRY                  : 30
USH                  : 91
WHILE                : 26 38
XOR                  : 93
error                : 

Nonterminals, with rules where they appear

afterthought         : 27
argument             : 217 218
arguments            : 157 158 159 194 195 196 200
arrayinitializer     : 149
assignment           : 109
binary               : 77
block                : 7 30 38 45 73 222
bool                 : 78
boolean              : 169
braceaccess          : 153
break                : 34
callinvoke           : 151
callinvoke_no_null_safe : 155
callinvoke_null_safe : 156
calllocal            : 175
castexpression       : 134
chain                : 127 128 131 135 136
classfuncref         : 230
closedbraces         : 58 60 62 145 146 147
comp                 : 79
compound_assignment  : 112
conditional          : 108
constructorfuncref   : 231
continue             : 33
decimal              : 181
declaration          : 32 52
declparam            : 10 11
decltype             : 7 12 28 57 105 228 233 234
declvar              : 67 68
declvars             : 57 67
dim                  : 201 202
dims                 : 199 201
do                   : 31
dstatement           : 16 48 49
dynamic              : 150 157 159 162 164 165
each                 : 21
elvis                : 81
empty                : 44
expression           : 24 25 26 28 29 37 38 42 53 55 69 74 110 110 113 114 115 116 117 118 119 120 121 122 123 124 165 166 177 203 207 207 208 214 214 219 223
expressions          : 205
fieldaccess          : 152
fieldaccess_no_null_safe : 160
fieldaccess_null_safe : 161
for                  : 20
funcref              : 221
function             : 5 6
functions            : 1 2 5
hex                  : 179
idaccess             : 66 147 148 158 163 191 193
idaccess_lbrace      : 60 61 166
if                   : 18
if_else              : 17
ineach               : 22
initializer          : 27
innerarguments       : 215 217
innerlamtypes        : 224 226
innerparameters      : 8 10
instanceof           : 80
integer              : 180
lambda               : 220
lamtype              : 225 226 227
lamtypes             : 222 223
listinitializer      : 173
localfuncref         : 232
mapinitializer       : 174
maptoken             : 212 213
maptokens            : 210 212
newinitializedarray  : 198
newobject            : 176
newstandardarray     : 197
noncondexpression    : 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 102 103 103 104 104 105 106 106 107 110 113 114 115 116 117 118 119 120 121 122 123 124
not                  : 133
null                 : 170
numeric              : 168
octal                : 178
only_assignment      : 111
optional_expression  : 27 41
optional_expressions : 204
optional_maptokens   : 209
parameters           : 7
post                 : 132
pre                  : 125
precedence           : 167
primary              : 154
primordefcast        : 139
primordefcasttype    : 141
refcast              : 140
refcasttype          : 142
regex                : 172
return               : 35
rstatement           : 15
source               : 0
statement            : 13 14 46
statements           : 1 3 13 47 49
string               : 171
throw                : 36
trailer              : 24 25 25 28 29 43
trailer_or_empty     : 26 27
trap                 : 71 72
traps                : 30 71
try                  : 23
type                 : 58 59 73 196 199 200
unary                : 76 129 130 137 138 141
unarynotaddsub       : 126 142
while                : 19

Parsing method: LALR

state 0

    (0) S' -> . source
    (1) source -> . functions statements
    (2) source -> . functions
    (3) source -> . statements
    (4) source -> .
    (5) functions -> . functions function
    (6) functions -> . function
    (13) statements -> . statements statement
    (14) statements -> . statement
    (7) function -> . decltype ID parameters block
    (15) statement -> . rstatement
    (16) statement -> . dstatement SEMICOLON
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (17) rstatement -> . if_else
    (18) rstatement -> . if
    (19) rstatement -> . while
    (20) rstatement -> . for
    (21) rstatement -> . each
    (22) rstatement -> . ineach
    (23) rstatement -> . try
    (31) dstatement -> . do
    (32) dstatement -> . declaration
    (33) dstatement -> . continue
    (34) dstatement -> . break
    (35) dstatement -> . return
    (36) dstatement -> . throw
    (37) dstatement -> . expression
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (25) if_else -> . IF LP expression RP trailer ELSE trailer
    (24) if -> . IF LP expression RP trailer
    (26) while -> . WHILE LP expression RP trailer_or_empty
    (27) for -> . FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty
    (28) each -> . FOR LP decltype ID COLON expression RP trailer
    (29) ineach -> . FOR LP ID IN expression RP trailer
    (30) try -> . TRY block traps
    (38) do -> . DO block WHILE LP expression RP
    (57) declaration -> . decltype declvars
    (39) continue -> . CONTINUE
    (40) break -> . BREAK
    (41) return -> . RETURN optional_expression
    (42) throw -> . THROW expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    $end            reduce using rule 4 (source -> .)
    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    TRY             shift and go to state 34
    DO              shift and go to state 35
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 37
    RETURN          shift and go to state 38
    THROW           shift and go to state 39
    ID              shift and go to state 7
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    source                         shift and go to state 1
    functions                      shift and go to state 2
    statements                     shift and go to state 3
    function                       shift and go to state 4
    statement                      shift and go to state 5
    decltype                       shift and go to state 6
    rstatement                     shift and go to state 8
    dstatement                     shift and go to state 9
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 11
    if_else                        shift and go to state 12
    if                             shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    each                           shift and go to state 16
    ineach                         shift and go to state 17
    try                            shift and go to state 18
    do                             shift and go to state 19
    declaration                    shift and go to state 20
    continue                       shift and go to state 21
    break                          shift and go to state 22
    return                         shift and go to state 23
    throw                          shift and go to state 24
    expression                     shift and go to state 25
    idaccess                       shift and go to state 28
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 1

    (0) S' -> source .



state 2

    (1) source -> functions . statements
    (2) source -> functions .
    (5) functions -> functions . function
    (13) statements -> . statements statement
    (14) statements -> . statement
    (7) function -> . decltype ID parameters block
    (15) statement -> . rstatement
    (16) statement -> . dstatement SEMICOLON
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (17) rstatement -> . if_else
    (18) rstatement -> . if
    (19) rstatement -> . while
    (20) rstatement -> . for
    (21) rstatement -> . each
    (22) rstatement -> . ineach
    (23) rstatement -> . try
    (31) dstatement -> . do
    (32) dstatement -> . declaration
    (33) dstatement -> . continue
    (34) dstatement -> . break
    (35) dstatement -> . return
    (36) dstatement -> . throw
    (37) dstatement -> . expression
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (25) if_else -> . IF LP expression RP trailer ELSE trailer
    (24) if -> . IF LP expression RP trailer
    (26) while -> . WHILE LP expression RP trailer_or_empty
    (27) for -> . FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty
    (28) each -> . FOR LP decltype ID COLON expression RP trailer
    (29) ineach -> . FOR LP ID IN expression RP trailer
    (30) try -> . TRY block traps
    (38) do -> . DO block WHILE LP expression RP
    (57) declaration -> . decltype declvars
    (39) continue -> . CONTINUE
    (40) break -> . BREAK
    (41) return -> . RETURN optional_expression
    (42) throw -> . THROW expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    $end            reduce using rule 2 (source -> functions .)
    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    TRY             shift and go to state 34
    DO              shift and go to state 35
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 37
    RETURN          shift and go to state 38
    THROW           shift and go to state 39
    ID              shift and go to state 7
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    statements                     shift and go to state 102
    function                       shift and go to state 103
    statement                      shift and go to state 5
    decltype                       shift and go to state 6
    rstatement                     shift and go to state 8
    dstatement                     shift and go to state 9
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 11
    if_else                        shift and go to state 12
    if                             shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    each                           shift and go to state 16
    ineach                         shift and go to state 17
    try                            shift and go to state 18
    do                             shift and go to state 19
    declaration                    shift and go to state 20
    continue                       shift and go to state 21
    break                          shift and go to state 22
    return                         shift and go to state 23
    throw                          shift and go to state 24
    expression                     shift and go to state 25
    idaccess                       shift and go to state 28
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 3

    (3) source -> statements .
    (13) statements -> statements . statement
    (15) statement -> . rstatement
    (16) statement -> . dstatement SEMICOLON
    (17) rstatement -> . if_else
    (18) rstatement -> . if
    (19) rstatement -> . while
    (20) rstatement -> . for
    (21) rstatement -> . each
    (22) rstatement -> . ineach
    (23) rstatement -> . try
    (31) dstatement -> . do
    (32) dstatement -> . declaration
    (33) dstatement -> . continue
    (34) dstatement -> . break
    (35) dstatement -> . return
    (36) dstatement -> . throw
    (37) dstatement -> . expression
    (25) if_else -> . IF LP expression RP trailer ELSE trailer
    (24) if -> . IF LP expression RP trailer
    (26) while -> . WHILE LP expression RP trailer_or_empty
    (27) for -> . FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty
    (28) each -> . FOR LP decltype ID COLON expression RP trailer
    (29) ineach -> . FOR LP ID IN expression RP trailer
    (30) try -> . TRY block traps
    (38) do -> . DO block WHILE LP expression RP
    (57) declaration -> . decltype declvars
    (39) continue -> . CONTINUE
    (40) break -> . BREAK
    (41) return -> . RETURN optional_expression
    (42) throw -> . THROW expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    $end            reduce using rule 3 (source -> statements .)
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    TRY             shift and go to state 34
    DO              shift and go to state 35
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 37
    RETURN          shift and go to state 38
    THROW           shift and go to state 39
    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    ID              shift and go to state 7
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    statement                      shift and go to state 104
    rstatement                     shift and go to state 8
    dstatement                     shift and go to state 9
    if_else                        shift and go to state 12
    if                             shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    each                           shift and go to state 16
    ineach                         shift and go to state 17
    try                            shift and go to state 18
    do                             shift and go to state 19
    declaration                    shift and go to state 20
    continue                       shift and go to state 21
    break                          shift and go to state 22
    return                         shift and go to state 23
    throw                          shift and go to state 24
    expression                     shift and go to state 25
    decltype                       shift and go to state 105
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 11
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    idaccess                       shift and go to state 28
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 4

    (6) functions -> function .

    DEF             reduce using rule 6 (functions -> function .)
    PRIMITIVE       reduce using rule 6 (functions -> function .)
    IF              reduce using rule 6 (functions -> function .)
    WHILE           reduce using rule 6 (functions -> function .)
    FOR             reduce using rule 6 (functions -> function .)
    TRY             reduce using rule 6 (functions -> function .)
    DO              reduce using rule 6 (functions -> function .)
    CONTINUE        reduce using rule 6 (functions -> function .)
    BREAK           reduce using rule 6 (functions -> function .)
    RETURN          reduce using rule 6 (functions -> function .)
    THROW           reduce using rule 6 (functions -> function .)
    ID              reduce using rule 6 (functions -> function .)
    INCR            reduce using rule 6 (functions -> function .)
    DECR            reduce using rule 6 (functions -> function .)
    ADD             reduce using rule 6 (functions -> function .)
    SUB             reduce using rule 6 (functions -> function .)
    BOOLNOT         reduce using rule 6 (functions -> function .)
    BWNOT           reduce using rule 6 (functions -> function .)
    LP              reduce using rule 6 (functions -> function .)
    NEW             reduce using rule 6 (functions -> function .)
    TRUE            reduce using rule 6 (functions -> function .)
    FALSE           reduce using rule 6 (functions -> function .)
    NULL            reduce using rule 6 (functions -> function .)
    STRING          reduce using rule 6 (functions -> function .)
    REGEX           reduce using rule 6 (functions -> function .)
    LBRACE          reduce using rule 6 (functions -> function .)
    DOLLAR          reduce using rule 6 (functions -> function .)
    OCTAL           reduce using rule 6 (functions -> function .)
    HEX             reduce using rule 6 (functions -> function .)
    INTEGER         reduce using rule 6 (functions -> function .)
    DECIMAL         reduce using rule 6 (functions -> function .)
    $end            reduce using rule 6 (functions -> function .)


state 5

    (14) statements -> statement .

    IF              reduce using rule 14 (statements -> statement .)
    WHILE           reduce using rule 14 (statements -> statement .)
    FOR             reduce using rule 14 (statements -> statement .)
    TRY             reduce using rule 14 (statements -> statement .)
    DO              reduce using rule 14 (statements -> statement .)
    CONTINUE        reduce using rule 14 (statements -> statement .)
    BREAK           reduce using rule 14 (statements -> statement .)
    RETURN          reduce using rule 14 (statements -> statement .)
    THROW           reduce using rule 14 (statements -> statement .)
    DEF             reduce using rule 14 (statements -> statement .)
    PRIMITIVE       reduce using rule 14 (statements -> statement .)
    ID              reduce using rule 14 (statements -> statement .)
    INCR            reduce using rule 14 (statements -> statement .)
    DECR            reduce using rule 14 (statements -> statement .)
    ADD             reduce using rule 14 (statements -> statement .)
    SUB             reduce using rule 14 (statements -> statement .)
    BOOLNOT         reduce using rule 14 (statements -> statement .)
    BWNOT           reduce using rule 14 (statements -> statement .)
    LP              reduce using rule 14 (statements -> statement .)
    NEW             reduce using rule 14 (statements -> statement .)
    TRUE            reduce using rule 14 (statements -> statement .)
    FALSE           reduce using rule 14 (statements -> statement .)
    NULL            reduce using rule 14 (statements -> statement .)
    STRING          reduce using rule 14 (statements -> statement .)
    REGEX           reduce using rule 14 (statements -> statement .)
    LBRACE          reduce using rule 14 (statements -> statement .)
    DOLLAR          reduce using rule 14 (statements -> statement .)
    OCTAL           reduce using rule 14 (statements -> statement .)
    HEX             reduce using rule 14 (statements -> statement .)
    INTEGER         reduce using rule 14 (statements -> statement .)
    DECIMAL         reduce using rule 14 (statements -> statement .)
    $end            reduce using rule 14 (statements -> statement .)
    RBRACK          reduce using rule 14 (statements -> statement .)


state 6

    (7) function -> decltype . ID parameters block
    (57) declaration -> decltype . declvars
    (67) declvars -> . declvars COMMA declvar
    (68) declvars -> . declvar
    (69) declvar -> . ID ASSIGN expression
    (70) declvar -> . ID

    ID              shift and go to state 106

    declvars                       shift and go to state 107
    declvar                        shift and go to state 108

state 7

    (192) idaccess -> ID .
    (194) calllocal -> ID . arguments
    (215) arguments -> . LP innerarguments RP
    (216) arguments -> . LP RP

  ! shift/reduce conflict for LP resolved as shift
    LBRACE          reduce using rule 192 (idaccess -> ID .)
    DOT             reduce using rule 192 (idaccess -> ID .)
    ID              reduce using rule 192 (idaccess -> ID .)
    NSDOT           reduce using rule 192 (idaccess -> ID .)
    INCR            reduce using rule 192 (idaccess -> ID .)
    DECR            reduce using rule 192 (idaccess -> ID .)
    COND            reduce using rule 192 (idaccess -> ID .)
    MUL             reduce using rule 192 (idaccess -> ID .)
    DIV             reduce using rule 192 (idaccess -> ID .)
    REM             reduce using rule 192 (idaccess -> ID .)
    ADD             reduce using rule 192 (idaccess -> ID .)
    SUB             reduce using rule 192 (idaccess -> ID .)
    FIND            reduce using rule 192 (idaccess -> ID .)
    MATCH           reduce using rule 192 (idaccess -> ID .)
    LSH             reduce using rule 192 (idaccess -> ID .)
    RSH             reduce using rule 192 (idaccess -> ID .)
    USH             reduce using rule 192 (idaccess -> ID .)
    BWAND           reduce using rule 192 (idaccess -> ID .)
    XOR             reduce using rule 192 (idaccess -> ID .)
    BWOR            reduce using rule 192 (idaccess -> ID .)
    BOOLAND         reduce using rule 192 (idaccess -> ID .)
    BOOLOR          reduce using rule 192 (idaccess -> ID .)
    GT              reduce using rule 192 (idaccess -> ID .)
    GTE             reduce using rule 192 (idaccess -> ID .)
    LT              reduce using rule 192 (idaccess -> ID .)
    LTE             reduce using rule 192 (idaccess -> ID .)
    EQ              reduce using rule 192 (idaccess -> ID .)
    EQR             reduce using rule 192 (idaccess -> ID .)
    NE              reduce using rule 192 (idaccess -> ID .)
    NER             reduce using rule 192 (idaccess -> ID .)
    INSTANCEOF      reduce using rule 192 (idaccess -> ID .)
    ELVIS           reduce using rule 192 (idaccess -> ID .)
    ASSIGN          reduce using rule 192 (idaccess -> ID .)
    AADD            reduce using rule 192 (idaccess -> ID .)
    ASUB            reduce using rule 192 (idaccess -> ID .)
    AMUL            reduce using rule 192 (idaccess -> ID .)
    ADIV            reduce using rule 192 (idaccess -> ID .)
    AREM            reduce using rule 192 (idaccess -> ID .)
    AAND            reduce using rule 192 (idaccess -> ID .)
    AXOR            reduce using rule 192 (idaccess -> ID .)
    AOR             reduce using rule 192 (idaccess -> ID .)
    ALSH            reduce using rule 192 (idaccess -> ID .)
    ARSH            reduce using rule 192 (idaccess -> ID .)
    AUSH            reduce using rule 192 (idaccess -> ID .)
    SEMICOLON       reduce using rule 192 (idaccess -> ID .)
    RP              reduce using rule 192 (idaccess -> ID .)
    RBRACK          reduce using rule 192 (idaccess -> ID .)
    LP              shift and go to state 110

  ! LP              [ reduce using rule 192 (idaccess -> ID .) ]

    arguments                      shift and go to state 109

state 8

    (15) statement -> rstatement .

    IF              reduce using rule 15 (statement -> rstatement .)
    WHILE           reduce using rule 15 (statement -> rstatement .)
    FOR             reduce using rule 15 (statement -> rstatement .)
    TRY             reduce using rule 15 (statement -> rstatement .)
    DO              reduce using rule 15 (statement -> rstatement .)
    CONTINUE        reduce using rule 15 (statement -> rstatement .)
    BREAK           reduce using rule 15 (statement -> rstatement .)
    RETURN          reduce using rule 15 (statement -> rstatement .)
    THROW           reduce using rule 15 (statement -> rstatement .)
    DEF             reduce using rule 15 (statement -> rstatement .)
    PRIMITIVE       reduce using rule 15 (statement -> rstatement .)
    ID              reduce using rule 15 (statement -> rstatement .)
    INCR            reduce using rule 15 (statement -> rstatement .)
    DECR            reduce using rule 15 (statement -> rstatement .)
    ADD             reduce using rule 15 (statement -> rstatement .)
    SUB             reduce using rule 15 (statement -> rstatement .)
    BOOLNOT         reduce using rule 15 (statement -> rstatement .)
    BWNOT           reduce using rule 15 (statement -> rstatement .)
    LP              reduce using rule 15 (statement -> rstatement .)
    NEW             reduce using rule 15 (statement -> rstatement .)
    TRUE            reduce using rule 15 (statement -> rstatement .)
    FALSE           reduce using rule 15 (statement -> rstatement .)
    NULL            reduce using rule 15 (statement -> rstatement .)
    STRING          reduce using rule 15 (statement -> rstatement .)
    REGEX           reduce using rule 15 (statement -> rstatement .)
    LBRACE          reduce using rule 15 (statement -> rstatement .)
    DOLLAR          reduce using rule 15 (statement -> rstatement .)
    OCTAL           reduce using rule 15 (statement -> rstatement .)
    HEX             reduce using rule 15 (statement -> rstatement .)
    INTEGER         reduce using rule 15 (statement -> rstatement .)
    DECIMAL         reduce using rule 15 (statement -> rstatement .)
    $end            reduce using rule 15 (statement -> rstatement .)
    RBRACK          reduce using rule 15 (statement -> rstatement .)
    ELSE            reduce using rule 15 (statement -> rstatement .)


state 9

    (16) statement -> dstatement . SEMICOLON

    SEMICOLON       shift and go to state 111


state 10

    (58) decltype -> type . closedbraces
    (59) decltype -> type .
    (62) closedbraces -> . closedbraces LBRACE RBRACE
    (63) closedbraces -> . LBRACE RBRACE

    ID              reduce using rule 59 (decltype -> type .)
    REF             reduce using rule 59 (decltype -> type .)
    COND            reduce using rule 59 (decltype -> type .)
    MUL             reduce using rule 59 (decltype -> type .)
    DIV             reduce using rule 59 (decltype -> type .)
    REM             reduce using rule 59 (decltype -> type .)
    ADD             reduce using rule 59 (decltype -> type .)
    SUB             reduce using rule 59 (decltype -> type .)
    FIND            reduce using rule 59 (decltype -> type .)
    MATCH           reduce using rule 59 (decltype -> type .)
    LSH             reduce using rule 59 (decltype -> type .)
    RSH             reduce using rule 59 (decltype -> type .)
    USH             reduce using rule 59 (decltype -> type .)
    BWAND           reduce using rule 59 (decltype -> type .)
    XOR             reduce using rule 59 (decltype -> type .)
    BWOR            reduce using rule 59 (decltype -> type .)
    BOOLAND         reduce using rule 59 (decltype -> type .)
    BOOLOR          reduce using rule 59 (decltype -> type .)
    GT              reduce using rule 59 (decltype -> type .)
    GTE             reduce using rule 59 (decltype -> type .)
    LT              reduce using rule 59 (decltype -> type .)
    LTE             reduce using rule 59 (decltype -> type .)
    EQ              reduce using rule 59 (decltype -> type .)
    EQR             reduce using rule 59 (decltype -> type .)
    NE              reduce using rule 59 (decltype -> type .)
    NER             reduce using rule 59 (decltype -> type .)
    INSTANCEOF      reduce using rule 59 (decltype -> type .)
    ELVIS           reduce using rule 59 (decltype -> type .)
    ASSIGN          reduce using rule 59 (decltype -> type .)
    AADD            reduce using rule 59 (decltype -> type .)
    ASUB            reduce using rule 59 (decltype -> type .)
    AMUL            reduce using rule 59 (decltype -> type .)
    ADIV            reduce using rule 59 (decltype -> type .)
    AREM            reduce using rule 59 (decltype -> type .)
    AAND            reduce using rule 59 (decltype -> type .)
    AXOR            reduce using rule 59 (decltype -> type .)
    AOR             reduce using rule 59 (decltype -> type .)
    ALSH            reduce using rule 59 (decltype -> type .)
    ARSH            reduce using rule 59 (decltype -> type .)
    AUSH            reduce using rule 59 (decltype -> type .)
    SEMICOLON       reduce using rule 59 (decltype -> type .)
    RBRACE          reduce using rule 59 (decltype -> type .)
    COMMA           reduce using rule 59 (decltype -> type .)
    COLON           reduce using rule 59 (decltype -> type .)
    RP              reduce using rule 59 (decltype -> type .)
    RBRACK          reduce using rule 59 (decltype -> type .)
    LBRACE          shift and go to state 113

    closedbraces                   shift and go to state 112

state 11

    (60) decltype -> idaccess_lbrace . RBRACE closedbraces
    (61) decltype -> idaccess_lbrace . RBRACE
    (166) braceaccess -> idaccess_lbrace . expression RBRACE
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    RBRACE          shift and go to state 115
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    idaccess_lbrace                shift and go to state 114
    expression                     shift and go to state 116
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 12

    (17) rstatement -> if_else .

    IF              reduce using rule 17 (rstatement -> if_else .)
    WHILE           reduce using rule 17 (rstatement -> if_else .)
    FOR             reduce using rule 17 (rstatement -> if_else .)
    TRY             reduce using rule 17 (rstatement -> if_else .)
    DO              reduce using rule 17 (rstatement -> if_else .)
    CONTINUE        reduce using rule 17 (rstatement -> if_else .)
    BREAK           reduce using rule 17 (rstatement -> if_else .)
    RETURN          reduce using rule 17 (rstatement -> if_else .)
    THROW           reduce using rule 17 (rstatement -> if_else .)
    DEF             reduce using rule 17 (rstatement -> if_else .)
    PRIMITIVE       reduce using rule 17 (rstatement -> if_else .)
    ID              reduce using rule 17 (rstatement -> if_else .)
    INCR            reduce using rule 17 (rstatement -> if_else .)
    DECR            reduce using rule 17 (rstatement -> if_else .)
    ADD             reduce using rule 17 (rstatement -> if_else .)
    SUB             reduce using rule 17 (rstatement -> if_else .)
    BOOLNOT         reduce using rule 17 (rstatement -> if_else .)
    BWNOT           reduce using rule 17 (rstatement -> if_else .)
    LP              reduce using rule 17 (rstatement -> if_else .)
    NEW             reduce using rule 17 (rstatement -> if_else .)
    TRUE            reduce using rule 17 (rstatement -> if_else .)
    FALSE           reduce using rule 17 (rstatement -> if_else .)
    NULL            reduce using rule 17 (rstatement -> if_else .)
    STRING          reduce using rule 17 (rstatement -> if_else .)
    REGEX           reduce using rule 17 (rstatement -> if_else .)
    LBRACE          reduce using rule 17 (rstatement -> if_else .)
    DOLLAR          reduce using rule 17 (rstatement -> if_else .)
    OCTAL           reduce using rule 17 (rstatement -> if_else .)
    HEX             reduce using rule 17 (rstatement -> if_else .)
    INTEGER         reduce using rule 17 (rstatement -> if_else .)
    DECIMAL         reduce using rule 17 (rstatement -> if_else .)
    $end            reduce using rule 17 (rstatement -> if_else .)
    RBRACK          reduce using rule 17 (rstatement -> if_else .)
    ELSE            reduce using rule 17 (rstatement -> if_else .)


state 13

    (18) rstatement -> if .

    IF              reduce using rule 18 (rstatement -> if .)
    WHILE           reduce using rule 18 (rstatement -> if .)
    FOR             reduce using rule 18 (rstatement -> if .)
    TRY             reduce using rule 18 (rstatement -> if .)
    DO              reduce using rule 18 (rstatement -> if .)
    CONTINUE        reduce using rule 18 (rstatement -> if .)
    BREAK           reduce using rule 18 (rstatement -> if .)
    RETURN          reduce using rule 18 (rstatement -> if .)
    THROW           reduce using rule 18 (rstatement -> if .)
    DEF             reduce using rule 18 (rstatement -> if .)
    PRIMITIVE       reduce using rule 18 (rstatement -> if .)
    ID              reduce using rule 18 (rstatement -> if .)
    INCR            reduce using rule 18 (rstatement -> if .)
    DECR            reduce using rule 18 (rstatement -> if .)
    ADD             reduce using rule 18 (rstatement -> if .)
    SUB             reduce using rule 18 (rstatement -> if .)
    BOOLNOT         reduce using rule 18 (rstatement -> if .)
    BWNOT           reduce using rule 18 (rstatement -> if .)
    LP              reduce using rule 18 (rstatement -> if .)
    NEW             reduce using rule 18 (rstatement -> if .)
    TRUE            reduce using rule 18 (rstatement -> if .)
    FALSE           reduce using rule 18 (rstatement -> if .)
    NULL            reduce using rule 18 (rstatement -> if .)
    STRING          reduce using rule 18 (rstatement -> if .)
    REGEX           reduce using rule 18 (rstatement -> if .)
    LBRACE          reduce using rule 18 (rstatement -> if .)
    DOLLAR          reduce using rule 18 (rstatement -> if .)
    OCTAL           reduce using rule 18 (rstatement -> if .)
    HEX             reduce using rule 18 (rstatement -> if .)
    INTEGER         reduce using rule 18 (rstatement -> if .)
    DECIMAL         reduce using rule 18 (rstatement -> if .)
    $end            reduce using rule 18 (rstatement -> if .)
    RBRACK          reduce using rule 18 (rstatement -> if .)
    ELSE            reduce using rule 18 (rstatement -> if .)


state 14

    (19) rstatement -> while .

    IF              reduce using rule 19 (rstatement -> while .)
    WHILE           reduce using rule 19 (rstatement -> while .)
    FOR             reduce using rule 19 (rstatement -> while .)
    TRY             reduce using rule 19 (rstatement -> while .)
    DO              reduce using rule 19 (rstatement -> while .)
    CONTINUE        reduce using rule 19 (rstatement -> while .)
    BREAK           reduce using rule 19 (rstatement -> while .)
    RETURN          reduce using rule 19 (rstatement -> while .)
    THROW           reduce using rule 19 (rstatement -> while .)
    DEF             reduce using rule 19 (rstatement -> while .)
    PRIMITIVE       reduce using rule 19 (rstatement -> while .)
    ID              reduce using rule 19 (rstatement -> while .)
    INCR            reduce using rule 19 (rstatement -> while .)
    DECR            reduce using rule 19 (rstatement -> while .)
    ADD             reduce using rule 19 (rstatement -> while .)
    SUB             reduce using rule 19 (rstatement -> while .)
    BOOLNOT         reduce using rule 19 (rstatement -> while .)
    BWNOT           reduce using rule 19 (rstatement -> while .)
    LP              reduce using rule 19 (rstatement -> while .)
    NEW             reduce using rule 19 (rstatement -> while .)
    TRUE            reduce using rule 19 (rstatement -> while .)
    FALSE           reduce using rule 19 (rstatement -> while .)
    NULL            reduce using rule 19 (rstatement -> while .)
    STRING          reduce using rule 19 (rstatement -> while .)
    REGEX           reduce using rule 19 (rstatement -> while .)
    LBRACE          reduce using rule 19 (rstatement -> while .)
    DOLLAR          reduce using rule 19 (rstatement -> while .)
    OCTAL           reduce using rule 19 (rstatement -> while .)
    HEX             reduce using rule 19 (rstatement -> while .)
    INTEGER         reduce using rule 19 (rstatement -> while .)
    DECIMAL         reduce using rule 19 (rstatement -> while .)
    $end            reduce using rule 19 (rstatement -> while .)
    RBRACK          reduce using rule 19 (rstatement -> while .)
    ELSE            reduce using rule 19 (rstatement -> while .)


state 15

    (20) rstatement -> for .

    IF              reduce using rule 20 (rstatement -> for .)
    WHILE           reduce using rule 20 (rstatement -> for .)
    FOR             reduce using rule 20 (rstatement -> for .)
    TRY             reduce using rule 20 (rstatement -> for .)
    DO              reduce using rule 20 (rstatement -> for .)
    CONTINUE        reduce using rule 20 (rstatement -> for .)
    BREAK           reduce using rule 20 (rstatement -> for .)
    RETURN          reduce using rule 20 (rstatement -> for .)
    THROW           reduce using rule 20 (rstatement -> for .)
    DEF             reduce using rule 20 (rstatement -> for .)
    PRIMITIVE       reduce using rule 20 (rstatement -> for .)
    ID              reduce using rule 20 (rstatement -> for .)
    INCR            reduce using rule 20 (rstatement -> for .)
    DECR            reduce using rule 20 (rstatement -> for .)
    ADD             reduce using rule 20 (rstatement -> for .)
    SUB             reduce using rule 20 (rstatement -> for .)
    BOOLNOT         reduce using rule 20 (rstatement -> for .)
    BWNOT           reduce using rule 20 (rstatement -> for .)
    LP              reduce using rule 20 (rstatement -> for .)
    NEW             reduce using rule 20 (rstatement -> for .)
    TRUE            reduce using rule 20 (rstatement -> for .)
    FALSE           reduce using rule 20 (rstatement -> for .)
    NULL            reduce using rule 20 (rstatement -> for .)
    STRING          reduce using rule 20 (rstatement -> for .)
    REGEX           reduce using rule 20 (rstatement -> for .)
    LBRACE          reduce using rule 20 (rstatement -> for .)
    DOLLAR          reduce using rule 20 (rstatement -> for .)
    OCTAL           reduce using rule 20 (rstatement -> for .)
    HEX             reduce using rule 20 (rstatement -> for .)
    INTEGER         reduce using rule 20 (rstatement -> for .)
    DECIMAL         reduce using rule 20 (rstatement -> for .)
    $end            reduce using rule 20 (rstatement -> for .)
    RBRACK          reduce using rule 20 (rstatement -> for .)
    ELSE            reduce using rule 20 (rstatement -> for .)


state 16

    (21) rstatement -> each .

    IF              reduce using rule 21 (rstatement -> each .)
    WHILE           reduce using rule 21 (rstatement -> each .)
    FOR             reduce using rule 21 (rstatement -> each .)
    TRY             reduce using rule 21 (rstatement -> each .)
    DO              reduce using rule 21 (rstatement -> each .)
    CONTINUE        reduce using rule 21 (rstatement -> each .)
    BREAK           reduce using rule 21 (rstatement -> each .)
    RETURN          reduce using rule 21 (rstatement -> each .)
    THROW           reduce using rule 21 (rstatement -> each .)
    DEF             reduce using rule 21 (rstatement -> each .)
    PRIMITIVE       reduce using rule 21 (rstatement -> each .)
    ID              reduce using rule 21 (rstatement -> each .)
    INCR            reduce using rule 21 (rstatement -> each .)
    DECR            reduce using rule 21 (rstatement -> each .)
    ADD             reduce using rule 21 (rstatement -> each .)
    SUB             reduce using rule 21 (rstatement -> each .)
    BOOLNOT         reduce using rule 21 (rstatement -> each .)
    BWNOT           reduce using rule 21 (rstatement -> each .)
    LP              reduce using rule 21 (rstatement -> each .)
    NEW             reduce using rule 21 (rstatement -> each .)
    TRUE            reduce using rule 21 (rstatement -> each .)
    FALSE           reduce using rule 21 (rstatement -> each .)
    NULL            reduce using rule 21 (rstatement -> each .)
    STRING          reduce using rule 21 (rstatement -> each .)
    REGEX           reduce using rule 21 (rstatement -> each .)
    LBRACE          reduce using rule 21 (rstatement -> each .)
    DOLLAR          reduce using rule 21 (rstatement -> each .)
    OCTAL           reduce using rule 21 (rstatement -> each .)
    HEX             reduce using rule 21 (rstatement -> each .)
    INTEGER         reduce using rule 21 (rstatement -> each .)
    DECIMAL         reduce using rule 21 (rstatement -> each .)
    $end            reduce using rule 21 (rstatement -> each .)
    RBRACK          reduce using rule 21 (rstatement -> each .)
    ELSE            reduce using rule 21 (rstatement -> each .)


state 17

    (22) rstatement -> ineach .

    IF              reduce using rule 22 (rstatement -> ineach .)
    WHILE           reduce using rule 22 (rstatement -> ineach .)
    FOR             reduce using rule 22 (rstatement -> ineach .)
    TRY             reduce using rule 22 (rstatement -> ineach .)
    DO              reduce using rule 22 (rstatement -> ineach .)
    CONTINUE        reduce using rule 22 (rstatement -> ineach .)
    BREAK           reduce using rule 22 (rstatement -> ineach .)
    RETURN          reduce using rule 22 (rstatement -> ineach .)
    THROW           reduce using rule 22 (rstatement -> ineach .)
    DEF             reduce using rule 22 (rstatement -> ineach .)
    PRIMITIVE       reduce using rule 22 (rstatement -> ineach .)
    ID              reduce using rule 22 (rstatement -> ineach .)
    INCR            reduce using rule 22 (rstatement -> ineach .)
    DECR            reduce using rule 22 (rstatement -> ineach .)
    ADD             reduce using rule 22 (rstatement -> ineach .)
    SUB             reduce using rule 22 (rstatement -> ineach .)
    BOOLNOT         reduce using rule 22 (rstatement -> ineach .)
    BWNOT           reduce using rule 22 (rstatement -> ineach .)
    LP              reduce using rule 22 (rstatement -> ineach .)
    NEW             reduce using rule 22 (rstatement -> ineach .)
    TRUE            reduce using rule 22 (rstatement -> ineach .)
    FALSE           reduce using rule 22 (rstatement -> ineach .)
    NULL            reduce using rule 22 (rstatement -> ineach .)
    STRING          reduce using rule 22 (rstatement -> ineach .)
    REGEX           reduce using rule 22 (rstatement -> ineach .)
    LBRACE          reduce using rule 22 (rstatement -> ineach .)
    DOLLAR          reduce using rule 22 (rstatement -> ineach .)
    OCTAL           reduce using rule 22 (rstatement -> ineach .)
    HEX             reduce using rule 22 (rstatement -> ineach .)
    INTEGER         reduce using rule 22 (rstatement -> ineach .)
    DECIMAL         reduce using rule 22 (rstatement -> ineach .)
    $end            reduce using rule 22 (rstatement -> ineach .)
    RBRACK          reduce using rule 22 (rstatement -> ineach .)
    ELSE            reduce using rule 22 (rstatement -> ineach .)


state 18

    (23) rstatement -> try .

    IF              reduce using rule 23 (rstatement -> try .)
    WHILE           reduce using rule 23 (rstatement -> try .)
    FOR             reduce using rule 23 (rstatement -> try .)
    TRY             reduce using rule 23 (rstatement -> try .)
    DO              reduce using rule 23 (rstatement -> try .)
    CONTINUE        reduce using rule 23 (rstatement -> try .)
    BREAK           reduce using rule 23 (rstatement -> try .)
    RETURN          reduce using rule 23 (rstatement -> try .)
    THROW           reduce using rule 23 (rstatement -> try .)
    DEF             reduce using rule 23 (rstatement -> try .)
    PRIMITIVE       reduce using rule 23 (rstatement -> try .)
    ID              reduce using rule 23 (rstatement -> try .)
    INCR            reduce using rule 23 (rstatement -> try .)
    DECR            reduce using rule 23 (rstatement -> try .)
    ADD             reduce using rule 23 (rstatement -> try .)
    SUB             reduce using rule 23 (rstatement -> try .)
    BOOLNOT         reduce using rule 23 (rstatement -> try .)
    BWNOT           reduce using rule 23 (rstatement -> try .)
    LP              reduce using rule 23 (rstatement -> try .)
    NEW             reduce using rule 23 (rstatement -> try .)
    TRUE            reduce using rule 23 (rstatement -> try .)
    FALSE           reduce using rule 23 (rstatement -> try .)
    NULL            reduce using rule 23 (rstatement -> try .)
    STRING          reduce using rule 23 (rstatement -> try .)
    REGEX           reduce using rule 23 (rstatement -> try .)
    LBRACE          reduce using rule 23 (rstatement -> try .)
    DOLLAR          reduce using rule 23 (rstatement -> try .)
    OCTAL           reduce using rule 23 (rstatement -> try .)
    HEX             reduce using rule 23 (rstatement -> try .)
    INTEGER         reduce using rule 23 (rstatement -> try .)
    DECIMAL         reduce using rule 23 (rstatement -> try .)
    $end            reduce using rule 23 (rstatement -> try .)
    RBRACK          reduce using rule 23 (rstatement -> try .)
    ELSE            reduce using rule 23 (rstatement -> try .)


state 19

    (31) dstatement -> do .

    SEMICOLON       reduce using rule 31 (dstatement -> do .)
    RBRACK          reduce using rule 31 (dstatement -> do .)


state 20

    (32) dstatement -> declaration .

    SEMICOLON       reduce using rule 32 (dstatement -> declaration .)
    RBRACK          reduce using rule 32 (dstatement -> declaration .)


state 21

    (33) dstatement -> continue .

    SEMICOLON       reduce using rule 33 (dstatement -> continue .)
    RBRACK          reduce using rule 33 (dstatement -> continue .)


state 22

    (34) dstatement -> break .

    SEMICOLON       reduce using rule 34 (dstatement -> break .)
    RBRACK          reduce using rule 34 (dstatement -> break .)


state 23

    (35) dstatement -> return .

    SEMICOLON       reduce using rule 35 (dstatement -> return .)
    RBRACK          reduce using rule 35 (dstatement -> return .)


state 24

    (36) dstatement -> throw .

    SEMICOLON       reduce using rule 36 (dstatement -> throw .)
    RBRACK          reduce using rule 36 (dstatement -> throw .)


state 25

    (37) dstatement -> expression .

    SEMICOLON       reduce using rule 37 (dstatement -> expression .)
    RBRACK          reduce using rule 37 (dstatement -> expression .)


state 26

    (64) type -> DEF .

    LBRACE          reduce using rule 64 (type -> DEF .)
    ID              reduce using rule 64 (type -> DEF .)
    LP              reduce using rule 64 (type -> DEF .)
    REF             reduce using rule 64 (type -> DEF .)
    COND            reduce using rule 64 (type -> DEF .)
    MUL             reduce using rule 64 (type -> DEF .)
    DIV             reduce using rule 64 (type -> DEF .)
    REM             reduce using rule 64 (type -> DEF .)
    ADD             reduce using rule 64 (type -> DEF .)
    SUB             reduce using rule 64 (type -> DEF .)
    FIND            reduce using rule 64 (type -> DEF .)
    MATCH           reduce using rule 64 (type -> DEF .)
    LSH             reduce using rule 64 (type -> DEF .)
    RSH             reduce using rule 64 (type -> DEF .)
    USH             reduce using rule 64 (type -> DEF .)
    BWAND           reduce using rule 64 (type -> DEF .)
    XOR             reduce using rule 64 (type -> DEF .)
    BWOR            reduce using rule 64 (type -> DEF .)
    BOOLAND         reduce using rule 64 (type -> DEF .)
    BOOLOR          reduce using rule 64 (type -> DEF .)
    GT              reduce using rule 64 (type -> DEF .)
    GTE             reduce using rule 64 (type -> DEF .)
    LT              reduce using rule 64 (type -> DEF .)
    LTE             reduce using rule 64 (type -> DEF .)
    EQ              reduce using rule 64 (type -> DEF .)
    EQR             reduce using rule 64 (type -> DEF .)
    NE              reduce using rule 64 (type -> DEF .)
    NER             reduce using rule 64 (type -> DEF .)
    INSTANCEOF      reduce using rule 64 (type -> DEF .)
    ELVIS           reduce using rule 64 (type -> DEF .)
    ASSIGN          reduce using rule 64 (type -> DEF .)
    AADD            reduce using rule 64 (type -> DEF .)
    ASUB            reduce using rule 64 (type -> DEF .)
    AMUL            reduce using rule 64 (type -> DEF .)
    ADIV            reduce using rule 64 (type -> DEF .)
    AREM            reduce using rule 64 (type -> DEF .)
    AAND            reduce using rule 64 (type -> DEF .)
    AXOR            reduce using rule 64 (type -> DEF .)
    AOR             reduce using rule 64 (type -> DEF .)
    ALSH            reduce using rule 64 (type -> DEF .)
    ARSH            reduce using rule 64 (type -> DEF .)
    AUSH            reduce using rule 64 (type -> DEF .)
    SEMICOLON       reduce using rule 64 (type -> DEF .)
    RBRACE          reduce using rule 64 (type -> DEF .)
    COMMA           reduce using rule 64 (type -> DEF .)
    COLON           reduce using rule 64 (type -> DEF .)
    RP              reduce using rule 64 (type -> DEF .)
    RBRACK          reduce using rule 64 (type -> DEF .)


state 27

    (65) type -> PRIMITIVE .

    LBRACE          reduce using rule 65 (type -> PRIMITIVE .)
    ID              reduce using rule 65 (type -> PRIMITIVE .)
    LP              reduce using rule 65 (type -> PRIMITIVE .)
    REF             reduce using rule 65 (type -> PRIMITIVE .)
    COND            reduce using rule 65 (type -> PRIMITIVE .)
    MUL             reduce using rule 65 (type -> PRIMITIVE .)
    DIV             reduce using rule 65 (type -> PRIMITIVE .)
    REM             reduce using rule 65 (type -> PRIMITIVE .)
    ADD             reduce using rule 65 (type -> PRIMITIVE .)
    SUB             reduce using rule 65 (type -> PRIMITIVE .)
    FIND            reduce using rule 65 (type -> PRIMITIVE .)
    MATCH           reduce using rule 65 (type -> PRIMITIVE .)
    LSH             reduce using rule 65 (type -> PRIMITIVE .)
    RSH             reduce using rule 65 (type -> PRIMITIVE .)
    USH             reduce using rule 65 (type -> PRIMITIVE .)
    BWAND           reduce using rule 65 (type -> PRIMITIVE .)
    XOR             reduce using rule 65 (type -> PRIMITIVE .)
    BWOR            reduce using rule 65 (type -> PRIMITIVE .)
    BOOLAND         reduce using rule 65 (type -> PRIMITIVE .)
    BOOLOR          reduce using rule 65 (type -> PRIMITIVE .)
    GT              reduce using rule 65 (type -> PRIMITIVE .)
    GTE             reduce using rule 65 (type -> PRIMITIVE .)
    LT              reduce using rule 65 (type -> PRIMITIVE .)
    LTE             reduce using rule 65 (type -> PRIMITIVE .)
    EQ              reduce using rule 65 (type -> PRIMITIVE .)
    EQR             reduce using rule 65 (type -> PRIMITIVE .)
    NE              reduce using rule 65 (type -> PRIMITIVE .)
    NER             reduce using rule 65 (type -> PRIMITIVE .)
    INSTANCEOF      reduce using rule 65 (type -> PRIMITIVE .)
    ELVIS           reduce using rule 65 (type -> PRIMITIVE .)
    ASSIGN          reduce using rule 65 (type -> PRIMITIVE .)
    AADD            reduce using rule 65 (type -> PRIMITIVE .)
    ASUB            reduce using rule 65 (type -> PRIMITIVE .)
    AMUL            reduce using rule 65 (type -> PRIMITIVE .)
    ADIV            reduce using rule 65 (type -> PRIMITIVE .)
    AREM            reduce using rule 65 (type -> PRIMITIVE .)
    AAND            reduce using rule 65 (type -> PRIMITIVE .)
    AXOR            reduce using rule 65 (type -> PRIMITIVE .)
    AOR             reduce using rule 65 (type -> PRIMITIVE .)
    ALSH            reduce using rule 65 (type -> PRIMITIVE .)
    ARSH            reduce using rule 65 (type -> PRIMITIVE .)
    AUSH            reduce using rule 65 (type -> PRIMITIVE .)
    SEMICOLON       reduce using rule 65 (type -> PRIMITIVE .)
    RBRACE          reduce using rule 65 (type -> PRIMITIVE .)
    COMMA           reduce using rule 65 (type -> PRIMITIVE .)
    COLON           reduce using rule 65 (type -> PRIMITIVE .)
    RP              reduce using rule 65 (type -> PRIMITIVE .)
    RBRACK          reduce using rule 65 (type -> PRIMITIVE .)


state 28

    (66) type -> idaccess .
    (193) idaccess_lbrace -> idaccess . LBRACE
    (191) idaccess -> idaccess . DOT ID
    (158) callinvoke_no_null_safe -> idaccess . arguments
    (163) fieldaccess_no_null_safe -> idaccess .
    (215) arguments -> . LP innerarguments RP
    (216) arguments -> . LP RP

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    ID              reduce using rule 66 (type -> idaccess .)
    REF             reduce using rule 66 (type -> idaccess .)
    LBRACE          shift and go to state 119
    DOT             shift and go to state 120
    NSDOT           reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    INCR            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    DECR            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    COND            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    MUL             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    DIV             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    REM             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ADD             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    SUB             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    FIND            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    MATCH           reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    LSH             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    RSH             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    USH             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    BWAND           reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    XOR             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    BWOR            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    BOOLAND         reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    BOOLOR          reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    GT              reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    GTE             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    LT              reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    LTE             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    EQ              reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    EQR             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    NE              reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    NER             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    INSTANCEOF      reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ELVIS           reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ASSIGN          reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AADD            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ASUB            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AMUL            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ADIV            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AREM            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AAND            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AXOR            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AOR             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ALSH            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ARSH            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AUSH            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    SEMICOLON       reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    RP              reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    COMMA           reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    RBRACK          reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    LP              shift and go to state 110

  ! LBRACE          [ reduce using rule 66 (type -> idaccess .) ]
  ! LBRACE          [ reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .) ]
  ! DOT             [ reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .) ]

    arguments                      shift and go to state 121

state 29

    (204) listinitializer -> LBRACE . optional_expressions RBRACE
    (209) mapinitializer -> LBRACE . optional_maptokens RBRACE
    (205) optional_expressions -> . expressions
    (206) optional_expressions -> .
    (210) optional_maptokens -> . maptokens
    (211) optional_maptokens -> . COLON
    (207) expressions -> . expression COMMA expression
    (208) expressions -> . expression
    (212) maptokens -> . maptokens COMMA maptoken
    (213) maptokens -> . maptoken
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (214) maptoken -> . expression COLON expression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    RBRACE          reduce using rule 206 (optional_expressions -> .)
    COLON           shift and go to state 126
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    optional_expressions           shift and go to state 122
    optional_maptokens             shift and go to state 123
    expressions                    shift and go to state 124
    maptokens                      shift and go to state 125
    expression                     shift and go to state 127
    maptoken                       shift and go to state 128
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 30

    (25) if_else -> IF . LP expression RP trailer ELSE trailer
    (24) if -> IF . LP expression RP trailer

    LP              shift and go to state 129


state 31

    (141) primordefcast -> LP . primordefcasttype RP unary
    (142) refcast -> LP . refcasttype RP unarynotaddsub
    (177) precedence -> LP . expression RP
    (143) primordefcasttype -> . DEF
    (144) primordefcasttype -> . PRIMITIVE
    (145) refcasttype -> . DEF closedbraces
    (146) refcasttype -> . PRIMITIVE closedbraces
    (147) refcasttype -> . idaccess closedbraces
    (148) refcasttype -> . idaccess
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    DEF             shift and go to state 133
    PRIMITIVE       shift and go to state 134
    ID              shift and go to state 7
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    primordefcasttype              shift and go to state 130
    unary                          shift and go to state 43
    refcasttype                    shift and go to state 131
    unarynotaddsub                 shift and go to state 52
    expression                     shift and go to state 132
    idaccess                       shift and go to state 135
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 32

    (26) while -> WHILE . LP expression RP trailer_or_empty

    LP              shift and go to state 136


state 33

    (27) for -> FOR . LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty
    (28) each -> FOR . LP decltype ID COLON expression RP trailer
    (29) ineach -> FOR . LP ID IN expression RP trailer

    LP              shift and go to state 137


state 34

    (30) try -> TRY . block traps
    (47) block -> . LBRACK statements RBRACK
    (48) block -> . LBRACK dstatement RBRACK
    (49) block -> . LBRACK statements dstatement RBRACK
    (50) block -> . LBRACK RBRACK

    LBRACK          shift and go to state 139

    block                          shift and go to state 138

state 35

    (38) do -> DO . block WHILE LP expression RP
    (47) block -> . LBRACK statements RBRACK
    (48) block -> . LBRACK dstatement RBRACK
    (49) block -> . LBRACK statements dstatement RBRACK
    (50) block -> . LBRACK RBRACK

    LBRACK          shift and go to state 139

    block                          shift and go to state 140

state 36

    (39) continue -> CONTINUE .

    SEMICOLON       reduce using rule 39 (continue -> CONTINUE .)
    RBRACK          reduce using rule 39 (continue -> CONTINUE .)


state 37

    (40) break -> BREAK .

    SEMICOLON       reduce using rule 40 (break -> BREAK .)
    RBRACK          reduce using rule 40 (break -> BREAK .)


state 38

    (41) return -> RETURN . optional_expression
    (74) optional_expression -> . expression
    (75) optional_expression -> .
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    SEMICOLON       reduce using rule 75 (optional_expression -> .)
    RBRACK          reduce using rule 75 (optional_expression -> .)
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    optional_expression            shift and go to state 141
    expression                     shift and go to state 142
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 39

    (42) throw -> THROW . expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    expression                     shift and go to state 143
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 40

    (107) expression -> noncondexpression .
    (110) conditional -> noncondexpression . COND expression COLON expression
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression
    (113) only_assignment -> noncondexpression . ASSIGN expression
    (114) compound_assignment -> noncondexpression . AADD expression
    (115) compound_assignment -> noncondexpression . ASUB expression
    (116) compound_assignment -> noncondexpression . AMUL expression
    (117) compound_assignment -> noncondexpression . ADIV expression
    (118) compound_assignment -> noncondexpression . AREM expression
    (119) compound_assignment -> noncondexpression . AAND expression
    (120) compound_assignment -> noncondexpression . AXOR expression
    (121) compound_assignment -> noncondexpression . AOR expression
    (122) compound_assignment -> noncondexpression . ALSH expression
    (123) compound_assignment -> noncondexpression . ARSH expression
    (124) compound_assignment -> noncondexpression . AUSH expression

    SEMICOLON       reduce using rule 107 (expression -> noncondexpression .)
    RBRACE          reduce using rule 107 (expression -> noncondexpression .)
    COMMA           reduce using rule 107 (expression -> noncondexpression .)
    COLON           reduce using rule 107 (expression -> noncondexpression .)
    RP              reduce using rule 107 (expression -> noncondexpression .)
    RBRACK          reduce using rule 107 (expression -> noncondexpression .)
    COND            shift and go to state 144
    MUL             shift and go to state 145
    DIV             shift and go to state 146
    REM             shift and go to state 147
    ADD             shift and go to state 148
    SUB             shift and go to state 149
    FIND            shift and go to state 150
    MATCH           shift and go to state 151
    LSH             shift and go to state 152
    RSH             shift and go to state 153
    USH             shift and go to state 154
    BWAND           shift and go to state 155
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    GT              shift and go to state 160
    GTE             shift and go to state 161
    LT              shift and go to state 162
    LTE             shift and go to state 163
    EQ              shift and go to state 164
    EQR             shift and go to state 165
    NE              shift and go to state 166
    NER             shift and go to state 167
    INSTANCEOF      shift and go to state 168
    ELVIS           shift and go to state 169
    ASSIGN          shift and go to state 170
    AADD            shift and go to state 171
    ASUB            shift and go to state 172
    AMUL            shift and go to state 173
    ADIV            shift and go to state 174
    AREM            shift and go to state 175
    AAND            shift and go to state 176
    AXOR            shift and go to state 177
    AOR             shift and go to state 178
    ALSH            shift and go to state 179
    ARSH            shift and go to state 180
    AUSH            shift and go to state 181


state 41

    (108) expression -> conditional .

    SEMICOLON       reduce using rule 108 (expression -> conditional .)
    RBRACE          reduce using rule 108 (expression -> conditional .)
    COMMA           reduce using rule 108 (expression -> conditional .)
    COLON           reduce using rule 108 (expression -> conditional .)
    RP              reduce using rule 108 (expression -> conditional .)
    RBRACK          reduce using rule 108 (expression -> conditional .)


state 42

    (109) expression -> assignment .

    SEMICOLON       reduce using rule 109 (expression -> assignment .)
    RBRACE          reduce using rule 109 (expression -> assignment .)
    COMMA           reduce using rule 109 (expression -> assignment .)
    COLON           reduce using rule 109 (expression -> assignment .)
    RP              reduce using rule 109 (expression -> assignment .)
    RBRACK          reduce using rule 109 (expression -> assignment .)


state 43

    (76) noncondexpression -> unary .

    COND            reduce using rule 76 (noncondexpression -> unary .)
    MUL             reduce using rule 76 (noncondexpression -> unary .)
    DIV             reduce using rule 76 (noncondexpression -> unary .)
    REM             reduce using rule 76 (noncondexpression -> unary .)
    ADD             reduce using rule 76 (noncondexpression -> unary .)
    SUB             reduce using rule 76 (noncondexpression -> unary .)
    FIND            reduce using rule 76 (noncondexpression -> unary .)
    MATCH           reduce using rule 76 (noncondexpression -> unary .)
    LSH             reduce using rule 76 (noncondexpression -> unary .)
    RSH             reduce using rule 76 (noncondexpression -> unary .)
    USH             reduce using rule 76 (noncondexpression -> unary .)
    BWAND           reduce using rule 76 (noncondexpression -> unary .)
    XOR             reduce using rule 76 (noncondexpression -> unary .)
    BWOR            reduce using rule 76 (noncondexpression -> unary .)
    BOOLAND         reduce using rule 76 (noncondexpression -> unary .)
    BOOLOR          reduce using rule 76 (noncondexpression -> unary .)
    GT              reduce using rule 76 (noncondexpression -> unary .)
    GTE             reduce using rule 76 (noncondexpression -> unary .)
    LT              reduce using rule 76 (noncondexpression -> unary .)
    LTE             reduce using rule 76 (noncondexpression -> unary .)
    EQ              reduce using rule 76 (noncondexpression -> unary .)
    EQR             reduce using rule 76 (noncondexpression -> unary .)
    NE              reduce using rule 76 (noncondexpression -> unary .)
    NER             reduce using rule 76 (noncondexpression -> unary .)
    INSTANCEOF      reduce using rule 76 (noncondexpression -> unary .)
    ELVIS           reduce using rule 76 (noncondexpression -> unary .)
    ASSIGN          reduce using rule 76 (noncondexpression -> unary .)
    AADD            reduce using rule 76 (noncondexpression -> unary .)
    ASUB            reduce using rule 76 (noncondexpression -> unary .)
    AMUL            reduce using rule 76 (noncondexpression -> unary .)
    ADIV            reduce using rule 76 (noncondexpression -> unary .)
    AREM            reduce using rule 76 (noncondexpression -> unary .)
    AAND            reduce using rule 76 (noncondexpression -> unary .)
    AXOR            reduce using rule 76 (noncondexpression -> unary .)
    AOR             reduce using rule 76 (noncondexpression -> unary .)
    ALSH            reduce using rule 76 (noncondexpression -> unary .)
    ARSH            reduce using rule 76 (noncondexpression -> unary .)
    AUSH            reduce using rule 76 (noncondexpression -> unary .)
    SEMICOLON       reduce using rule 76 (noncondexpression -> unary .)
    RBRACE          reduce using rule 76 (noncondexpression -> unary .)
    COMMA           reduce using rule 76 (noncondexpression -> unary .)
    COLON           reduce using rule 76 (noncondexpression -> unary .)
    RP              reduce using rule 76 (noncondexpression -> unary .)
    RBRACK          reduce using rule 76 (noncondexpression -> unary .)


state 44

    (77) noncondexpression -> binary .

    COND            reduce using rule 77 (noncondexpression -> binary .)
    MUL             reduce using rule 77 (noncondexpression -> binary .)
    DIV             reduce using rule 77 (noncondexpression -> binary .)
    REM             reduce using rule 77 (noncondexpression -> binary .)
    ADD             reduce using rule 77 (noncondexpression -> binary .)
    SUB             reduce using rule 77 (noncondexpression -> binary .)
    FIND            reduce using rule 77 (noncondexpression -> binary .)
    MATCH           reduce using rule 77 (noncondexpression -> binary .)
    LSH             reduce using rule 77 (noncondexpression -> binary .)
    RSH             reduce using rule 77 (noncondexpression -> binary .)
    USH             reduce using rule 77 (noncondexpression -> binary .)
    BWAND           reduce using rule 77 (noncondexpression -> binary .)
    XOR             reduce using rule 77 (noncondexpression -> binary .)
    BWOR            reduce using rule 77 (noncondexpression -> binary .)
    BOOLAND         reduce using rule 77 (noncondexpression -> binary .)
    BOOLOR          reduce using rule 77 (noncondexpression -> binary .)
    GT              reduce using rule 77 (noncondexpression -> binary .)
    GTE             reduce using rule 77 (noncondexpression -> binary .)
    LT              reduce using rule 77 (noncondexpression -> binary .)
    LTE             reduce using rule 77 (noncondexpression -> binary .)
    EQ              reduce using rule 77 (noncondexpression -> binary .)
    EQR             reduce using rule 77 (noncondexpression -> binary .)
    NE              reduce using rule 77 (noncondexpression -> binary .)
    NER             reduce using rule 77 (noncondexpression -> binary .)
    INSTANCEOF      reduce using rule 77 (noncondexpression -> binary .)
    ELVIS           reduce using rule 77 (noncondexpression -> binary .)
    ASSIGN          reduce using rule 77 (noncondexpression -> binary .)
    AADD            reduce using rule 77 (noncondexpression -> binary .)
    ASUB            reduce using rule 77 (noncondexpression -> binary .)
    AMUL            reduce using rule 77 (noncondexpression -> binary .)
    ADIV            reduce using rule 77 (noncondexpression -> binary .)
    AREM            reduce using rule 77 (noncondexpression -> binary .)
    AAND            reduce using rule 77 (noncondexpression -> binary .)
    AXOR            reduce using rule 77 (noncondexpression -> binary .)
    AOR             reduce using rule 77 (noncondexpression -> binary .)
    ALSH            reduce using rule 77 (noncondexpression -> binary .)
    ARSH            reduce using rule 77 (noncondexpression -> binary .)
    AUSH            reduce using rule 77 (noncondexpression -> binary .)
    SEMICOLON       reduce using rule 77 (noncondexpression -> binary .)
    RBRACE          reduce using rule 77 (noncondexpression -> binary .)
    COMMA           reduce using rule 77 (noncondexpression -> binary .)
    COLON           reduce using rule 77 (noncondexpression -> binary .)
    RP              reduce using rule 77 (noncondexpression -> binary .)
    RBRACK          reduce using rule 77 (noncondexpression -> binary .)


state 45

    (78) noncondexpression -> bool .

    COND            reduce using rule 78 (noncondexpression -> bool .)
    MUL             reduce using rule 78 (noncondexpression -> bool .)
    DIV             reduce using rule 78 (noncondexpression -> bool .)
    REM             reduce using rule 78 (noncondexpression -> bool .)
    ADD             reduce using rule 78 (noncondexpression -> bool .)
    SUB             reduce using rule 78 (noncondexpression -> bool .)
    FIND            reduce using rule 78 (noncondexpression -> bool .)
    MATCH           reduce using rule 78 (noncondexpression -> bool .)
    LSH             reduce using rule 78 (noncondexpression -> bool .)
    RSH             reduce using rule 78 (noncondexpression -> bool .)
    USH             reduce using rule 78 (noncondexpression -> bool .)
    BWAND           reduce using rule 78 (noncondexpression -> bool .)
    XOR             reduce using rule 78 (noncondexpression -> bool .)
    BWOR            reduce using rule 78 (noncondexpression -> bool .)
    BOOLAND         reduce using rule 78 (noncondexpression -> bool .)
    BOOLOR          reduce using rule 78 (noncondexpression -> bool .)
    GT              reduce using rule 78 (noncondexpression -> bool .)
    GTE             reduce using rule 78 (noncondexpression -> bool .)
    LT              reduce using rule 78 (noncondexpression -> bool .)
    LTE             reduce using rule 78 (noncondexpression -> bool .)
    EQ              reduce using rule 78 (noncondexpression -> bool .)
    EQR             reduce using rule 78 (noncondexpression -> bool .)
    NE              reduce using rule 78 (noncondexpression -> bool .)
    NER             reduce using rule 78 (noncondexpression -> bool .)
    INSTANCEOF      reduce using rule 78 (noncondexpression -> bool .)
    ELVIS           reduce using rule 78 (noncondexpression -> bool .)
    ASSIGN          reduce using rule 78 (noncondexpression -> bool .)
    AADD            reduce using rule 78 (noncondexpression -> bool .)
    ASUB            reduce using rule 78 (noncondexpression -> bool .)
    AMUL            reduce using rule 78 (noncondexpression -> bool .)
    ADIV            reduce using rule 78 (noncondexpression -> bool .)
    AREM            reduce using rule 78 (noncondexpression -> bool .)
    AAND            reduce using rule 78 (noncondexpression -> bool .)
    AXOR            reduce using rule 78 (noncondexpression -> bool .)
    AOR             reduce using rule 78 (noncondexpression -> bool .)
    ALSH            reduce using rule 78 (noncondexpression -> bool .)
    ARSH            reduce using rule 78 (noncondexpression -> bool .)
    AUSH            reduce using rule 78 (noncondexpression -> bool .)
    SEMICOLON       reduce using rule 78 (noncondexpression -> bool .)
    RBRACE          reduce using rule 78 (noncondexpression -> bool .)
    COMMA           reduce using rule 78 (noncondexpression -> bool .)
    COLON           reduce using rule 78 (noncondexpression -> bool .)
    RP              reduce using rule 78 (noncondexpression -> bool .)
    RBRACK          reduce using rule 78 (noncondexpression -> bool .)


state 46

    (79) noncondexpression -> comp .

    COND            reduce using rule 79 (noncondexpression -> comp .)
    MUL             reduce using rule 79 (noncondexpression -> comp .)
    DIV             reduce using rule 79 (noncondexpression -> comp .)
    REM             reduce using rule 79 (noncondexpression -> comp .)
    ADD             reduce using rule 79 (noncondexpression -> comp .)
    SUB             reduce using rule 79 (noncondexpression -> comp .)
    FIND            reduce using rule 79 (noncondexpression -> comp .)
    MATCH           reduce using rule 79 (noncondexpression -> comp .)
    LSH             reduce using rule 79 (noncondexpression -> comp .)
    RSH             reduce using rule 79 (noncondexpression -> comp .)
    USH             reduce using rule 79 (noncondexpression -> comp .)
    BWAND           reduce using rule 79 (noncondexpression -> comp .)
    XOR             reduce using rule 79 (noncondexpression -> comp .)
    BWOR            reduce using rule 79 (noncondexpression -> comp .)
    BOOLAND         reduce using rule 79 (noncondexpression -> comp .)
    BOOLOR          reduce using rule 79 (noncondexpression -> comp .)
    GT              reduce using rule 79 (noncondexpression -> comp .)
    GTE             reduce using rule 79 (noncondexpression -> comp .)
    LT              reduce using rule 79 (noncondexpression -> comp .)
    LTE             reduce using rule 79 (noncondexpression -> comp .)
    EQ              reduce using rule 79 (noncondexpression -> comp .)
    EQR             reduce using rule 79 (noncondexpression -> comp .)
    NE              reduce using rule 79 (noncondexpression -> comp .)
    NER             reduce using rule 79 (noncondexpression -> comp .)
    INSTANCEOF      reduce using rule 79 (noncondexpression -> comp .)
    ELVIS           reduce using rule 79 (noncondexpression -> comp .)
    ASSIGN          reduce using rule 79 (noncondexpression -> comp .)
    AADD            reduce using rule 79 (noncondexpression -> comp .)
    ASUB            reduce using rule 79 (noncondexpression -> comp .)
    AMUL            reduce using rule 79 (noncondexpression -> comp .)
    ADIV            reduce using rule 79 (noncondexpression -> comp .)
    AREM            reduce using rule 79 (noncondexpression -> comp .)
    AAND            reduce using rule 79 (noncondexpression -> comp .)
    AXOR            reduce using rule 79 (noncondexpression -> comp .)
    AOR             reduce using rule 79 (noncondexpression -> comp .)
    ALSH            reduce using rule 79 (noncondexpression -> comp .)
    ARSH            reduce using rule 79 (noncondexpression -> comp .)
    AUSH            reduce using rule 79 (noncondexpression -> comp .)
    SEMICOLON       reduce using rule 79 (noncondexpression -> comp .)
    RBRACE          reduce using rule 79 (noncondexpression -> comp .)
    COMMA           reduce using rule 79 (noncondexpression -> comp .)
    COLON           reduce using rule 79 (noncondexpression -> comp .)
    RP              reduce using rule 79 (noncondexpression -> comp .)
    RBRACK          reduce using rule 79 (noncondexpression -> comp .)


state 47

    (80) noncondexpression -> instanceof .

    COND            reduce using rule 80 (noncondexpression -> instanceof .)
    MUL             reduce using rule 80 (noncondexpression -> instanceof .)
    DIV             reduce using rule 80 (noncondexpression -> instanceof .)
    REM             reduce using rule 80 (noncondexpression -> instanceof .)
    ADD             reduce using rule 80 (noncondexpression -> instanceof .)
    SUB             reduce using rule 80 (noncondexpression -> instanceof .)
    FIND            reduce using rule 80 (noncondexpression -> instanceof .)
    MATCH           reduce using rule 80 (noncondexpression -> instanceof .)
    LSH             reduce using rule 80 (noncondexpression -> instanceof .)
    RSH             reduce using rule 80 (noncondexpression -> instanceof .)
    USH             reduce using rule 80 (noncondexpression -> instanceof .)
    BWAND           reduce using rule 80 (noncondexpression -> instanceof .)
    XOR             reduce using rule 80 (noncondexpression -> instanceof .)
    BWOR            reduce using rule 80 (noncondexpression -> instanceof .)
    BOOLAND         reduce using rule 80 (noncondexpression -> instanceof .)
    BOOLOR          reduce using rule 80 (noncondexpression -> instanceof .)
    GT              reduce using rule 80 (noncondexpression -> instanceof .)
    GTE             reduce using rule 80 (noncondexpression -> instanceof .)
    LT              reduce using rule 80 (noncondexpression -> instanceof .)
    LTE             reduce using rule 80 (noncondexpression -> instanceof .)
    EQ              reduce using rule 80 (noncondexpression -> instanceof .)
    EQR             reduce using rule 80 (noncondexpression -> instanceof .)
    NE              reduce using rule 80 (noncondexpression -> instanceof .)
    NER             reduce using rule 80 (noncondexpression -> instanceof .)
    INSTANCEOF      reduce using rule 80 (noncondexpression -> instanceof .)
    ELVIS           reduce using rule 80 (noncondexpression -> instanceof .)
    ASSIGN          reduce using rule 80 (noncondexpression -> instanceof .)
    AADD            reduce using rule 80 (noncondexpression -> instanceof .)
    ASUB            reduce using rule 80 (noncondexpression -> instanceof .)
    AMUL            reduce using rule 80 (noncondexpression -> instanceof .)
    ADIV            reduce using rule 80 (noncondexpression -> instanceof .)
    AREM            reduce using rule 80 (noncondexpression -> instanceof .)
    AAND            reduce using rule 80 (noncondexpression -> instanceof .)
    AXOR            reduce using rule 80 (noncondexpression -> instanceof .)
    AOR             reduce using rule 80 (noncondexpression -> instanceof .)
    ALSH            reduce using rule 80 (noncondexpression -> instanceof .)
    ARSH            reduce using rule 80 (noncondexpression -> instanceof .)
    AUSH            reduce using rule 80 (noncondexpression -> instanceof .)
    SEMICOLON       reduce using rule 80 (noncondexpression -> instanceof .)
    RBRACE          reduce using rule 80 (noncondexpression -> instanceof .)
    COMMA           reduce using rule 80 (noncondexpression -> instanceof .)
    COLON           reduce using rule 80 (noncondexpression -> instanceof .)
    RP              reduce using rule 80 (noncondexpression -> instanceof .)
    RBRACK          reduce using rule 80 (noncondexpression -> instanceof .)


state 48

    (81) noncondexpression -> elvis .

    COND            reduce using rule 81 (noncondexpression -> elvis .)
    MUL             reduce using rule 81 (noncondexpression -> elvis .)
    DIV             reduce using rule 81 (noncondexpression -> elvis .)
    REM             reduce using rule 81 (noncondexpression -> elvis .)
    ADD             reduce using rule 81 (noncondexpression -> elvis .)
    SUB             reduce using rule 81 (noncondexpression -> elvis .)
    FIND            reduce using rule 81 (noncondexpression -> elvis .)
    MATCH           reduce using rule 81 (noncondexpression -> elvis .)
    LSH             reduce using rule 81 (noncondexpression -> elvis .)
    RSH             reduce using rule 81 (noncondexpression -> elvis .)
    USH             reduce using rule 81 (noncondexpression -> elvis .)
    BWAND           reduce using rule 81 (noncondexpression -> elvis .)
    XOR             reduce using rule 81 (noncondexpression -> elvis .)
    BWOR            reduce using rule 81 (noncondexpression -> elvis .)
    BOOLAND         reduce using rule 81 (noncondexpression -> elvis .)
    BOOLOR          reduce using rule 81 (noncondexpression -> elvis .)
    GT              reduce using rule 81 (noncondexpression -> elvis .)
    GTE             reduce using rule 81 (noncondexpression -> elvis .)
    LT              reduce using rule 81 (noncondexpression -> elvis .)
    LTE             reduce using rule 81 (noncondexpression -> elvis .)
    EQ              reduce using rule 81 (noncondexpression -> elvis .)
    EQR             reduce using rule 81 (noncondexpression -> elvis .)
    NE              reduce using rule 81 (noncondexpression -> elvis .)
    NER             reduce using rule 81 (noncondexpression -> elvis .)
    INSTANCEOF      reduce using rule 81 (noncondexpression -> elvis .)
    ELVIS           reduce using rule 81 (noncondexpression -> elvis .)
    ASSIGN          reduce using rule 81 (noncondexpression -> elvis .)
    AADD            reduce using rule 81 (noncondexpression -> elvis .)
    ASUB            reduce using rule 81 (noncondexpression -> elvis .)
    AMUL            reduce using rule 81 (noncondexpression -> elvis .)
    ADIV            reduce using rule 81 (noncondexpression -> elvis .)
    AREM            reduce using rule 81 (noncondexpression -> elvis .)
    AAND            reduce using rule 81 (noncondexpression -> elvis .)
    AXOR            reduce using rule 81 (noncondexpression -> elvis .)
    AOR             reduce using rule 81 (noncondexpression -> elvis .)
    ALSH            reduce using rule 81 (noncondexpression -> elvis .)
    ARSH            reduce using rule 81 (noncondexpression -> elvis .)
    AUSH            reduce using rule 81 (noncondexpression -> elvis .)
    SEMICOLON       reduce using rule 81 (noncondexpression -> elvis .)
    RBRACE          reduce using rule 81 (noncondexpression -> elvis .)
    COMMA           reduce using rule 81 (noncondexpression -> elvis .)
    COLON           reduce using rule 81 (noncondexpression -> elvis .)
    RP              reduce using rule 81 (noncondexpression -> elvis .)
    RBRACK          reduce using rule 81 (noncondexpression -> elvis .)


state 49

    (111) assignment -> only_assignment .

    SEMICOLON       reduce using rule 111 (assignment -> only_assignment .)
    RBRACE          reduce using rule 111 (assignment -> only_assignment .)
    COMMA           reduce using rule 111 (assignment -> only_assignment .)
    COLON           reduce using rule 111 (assignment -> only_assignment .)
    RP              reduce using rule 111 (assignment -> only_assignment .)
    RBRACK          reduce using rule 111 (assignment -> only_assignment .)


state 50

    (112) assignment -> compound_assignment .

    SEMICOLON       reduce using rule 112 (assignment -> compound_assignment .)
    RBRACE          reduce using rule 112 (assignment -> compound_assignment .)
    COMMA           reduce using rule 112 (assignment -> compound_assignment .)
    COLON           reduce using rule 112 (assignment -> compound_assignment .)
    RP              reduce using rule 112 (assignment -> compound_assignment .)
    RBRACK          reduce using rule 112 (assignment -> compound_assignment .)


state 51

    (125) unary -> pre .

    COND            reduce using rule 125 (unary -> pre .)
    MUL             reduce using rule 125 (unary -> pre .)
    DIV             reduce using rule 125 (unary -> pre .)
    REM             reduce using rule 125 (unary -> pre .)
    ADD             reduce using rule 125 (unary -> pre .)
    SUB             reduce using rule 125 (unary -> pre .)
    FIND            reduce using rule 125 (unary -> pre .)
    MATCH           reduce using rule 125 (unary -> pre .)
    LSH             reduce using rule 125 (unary -> pre .)
    RSH             reduce using rule 125 (unary -> pre .)
    USH             reduce using rule 125 (unary -> pre .)
    BWAND           reduce using rule 125 (unary -> pre .)
    XOR             reduce using rule 125 (unary -> pre .)
    BWOR            reduce using rule 125 (unary -> pre .)
    BOOLAND         reduce using rule 125 (unary -> pre .)
    BOOLOR          reduce using rule 125 (unary -> pre .)
    GT              reduce using rule 125 (unary -> pre .)
    GTE             reduce using rule 125 (unary -> pre .)
    LT              reduce using rule 125 (unary -> pre .)
    LTE             reduce using rule 125 (unary -> pre .)
    EQ              reduce using rule 125 (unary -> pre .)
    EQR             reduce using rule 125 (unary -> pre .)
    NE              reduce using rule 125 (unary -> pre .)
    NER             reduce using rule 125 (unary -> pre .)
    INSTANCEOF      reduce using rule 125 (unary -> pre .)
    ELVIS           reduce using rule 125 (unary -> pre .)
    ASSIGN          reduce using rule 125 (unary -> pre .)
    AADD            reduce using rule 125 (unary -> pre .)
    ASUB            reduce using rule 125 (unary -> pre .)
    AMUL            reduce using rule 125 (unary -> pre .)
    ADIV            reduce using rule 125 (unary -> pre .)
    AREM            reduce using rule 125 (unary -> pre .)
    AAND            reduce using rule 125 (unary -> pre .)
    AXOR            reduce using rule 125 (unary -> pre .)
    AOR             reduce using rule 125 (unary -> pre .)
    ALSH            reduce using rule 125 (unary -> pre .)
    ARSH            reduce using rule 125 (unary -> pre .)
    AUSH            reduce using rule 125 (unary -> pre .)
    SEMICOLON       reduce using rule 125 (unary -> pre .)
    RBRACE          reduce using rule 125 (unary -> pre .)
    COMMA           reduce using rule 125 (unary -> pre .)
    COLON           reduce using rule 125 (unary -> pre .)
    RP              reduce using rule 125 (unary -> pre .)
    RBRACK          reduce using rule 125 (unary -> pre .)


state 52

    (126) unary -> unarynotaddsub .

    COND            reduce using rule 126 (unary -> unarynotaddsub .)
    MUL             reduce using rule 126 (unary -> unarynotaddsub .)
    DIV             reduce using rule 126 (unary -> unarynotaddsub .)
    REM             reduce using rule 126 (unary -> unarynotaddsub .)
    ADD             reduce using rule 126 (unary -> unarynotaddsub .)
    SUB             reduce using rule 126 (unary -> unarynotaddsub .)
    FIND            reduce using rule 126 (unary -> unarynotaddsub .)
    MATCH           reduce using rule 126 (unary -> unarynotaddsub .)
    LSH             reduce using rule 126 (unary -> unarynotaddsub .)
    RSH             reduce using rule 126 (unary -> unarynotaddsub .)
    USH             reduce using rule 126 (unary -> unarynotaddsub .)
    BWAND           reduce using rule 126 (unary -> unarynotaddsub .)
    XOR             reduce using rule 126 (unary -> unarynotaddsub .)
    BWOR            reduce using rule 126 (unary -> unarynotaddsub .)
    BOOLAND         reduce using rule 126 (unary -> unarynotaddsub .)
    BOOLOR          reduce using rule 126 (unary -> unarynotaddsub .)
    GT              reduce using rule 126 (unary -> unarynotaddsub .)
    GTE             reduce using rule 126 (unary -> unarynotaddsub .)
    LT              reduce using rule 126 (unary -> unarynotaddsub .)
    LTE             reduce using rule 126 (unary -> unarynotaddsub .)
    EQ              reduce using rule 126 (unary -> unarynotaddsub .)
    EQR             reduce using rule 126 (unary -> unarynotaddsub .)
    NE              reduce using rule 126 (unary -> unarynotaddsub .)
    NER             reduce using rule 126 (unary -> unarynotaddsub .)
    INSTANCEOF      reduce using rule 126 (unary -> unarynotaddsub .)
    ELVIS           reduce using rule 126 (unary -> unarynotaddsub .)
    ASSIGN          reduce using rule 126 (unary -> unarynotaddsub .)
    AADD            reduce using rule 126 (unary -> unarynotaddsub .)
    ASUB            reduce using rule 126 (unary -> unarynotaddsub .)
    AMUL            reduce using rule 126 (unary -> unarynotaddsub .)
    ADIV            reduce using rule 126 (unary -> unarynotaddsub .)
    AREM            reduce using rule 126 (unary -> unarynotaddsub .)
    AAND            reduce using rule 126 (unary -> unarynotaddsub .)
    AXOR            reduce using rule 126 (unary -> unarynotaddsub .)
    AOR             reduce using rule 126 (unary -> unarynotaddsub .)
    ALSH            reduce using rule 126 (unary -> unarynotaddsub .)
    ARSH            reduce using rule 126 (unary -> unarynotaddsub .)
    AUSH            reduce using rule 126 (unary -> unarynotaddsub .)
    SEMICOLON       reduce using rule 126 (unary -> unarynotaddsub .)
    RBRACE          reduce using rule 126 (unary -> unarynotaddsub .)
    COMMA           reduce using rule 126 (unary -> unarynotaddsub .)
    COLON           reduce using rule 126 (unary -> unarynotaddsub .)
    RP              reduce using rule 126 (unary -> unarynotaddsub .)
    RBRACK          reduce using rule 126 (unary -> unarynotaddsub .)


state 53

    (129) pre -> ADD . unary
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    unary                          shift and go to state 182
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 54

    (130) pre -> SUB . unary
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    unary                          shift and go to state 183
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 55

    (127) pre -> INCR . chain
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    NEW             shift and go to state 73
    LP              shift and go to state 185
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    chain                          shift and go to state 184
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 56

    (131) unarynotaddsub -> chain .
    (135) post -> chain . INCR
    (136) post -> chain . DECR

    COND            reduce using rule 131 (unarynotaddsub -> chain .)
    MUL             reduce using rule 131 (unarynotaddsub -> chain .)
    DIV             reduce using rule 131 (unarynotaddsub -> chain .)
    REM             reduce using rule 131 (unarynotaddsub -> chain .)
    ADD             reduce using rule 131 (unarynotaddsub -> chain .)
    SUB             reduce using rule 131 (unarynotaddsub -> chain .)
    FIND            reduce using rule 131 (unarynotaddsub -> chain .)
    MATCH           reduce using rule 131 (unarynotaddsub -> chain .)
    LSH             reduce using rule 131 (unarynotaddsub -> chain .)
    RSH             reduce using rule 131 (unarynotaddsub -> chain .)
    USH             reduce using rule 131 (unarynotaddsub -> chain .)
    BWAND           reduce using rule 131 (unarynotaddsub -> chain .)
    XOR             reduce using rule 131 (unarynotaddsub -> chain .)
    BWOR            reduce using rule 131 (unarynotaddsub -> chain .)
    BOOLAND         reduce using rule 131 (unarynotaddsub -> chain .)
    BOOLOR          reduce using rule 131 (unarynotaddsub -> chain .)
    GT              reduce using rule 131 (unarynotaddsub -> chain .)
    GTE             reduce using rule 131 (unarynotaddsub -> chain .)
    LT              reduce using rule 131 (unarynotaddsub -> chain .)
    LTE             reduce using rule 131 (unarynotaddsub -> chain .)
    EQ              reduce using rule 131 (unarynotaddsub -> chain .)
    EQR             reduce using rule 131 (unarynotaddsub -> chain .)
    NE              reduce using rule 131 (unarynotaddsub -> chain .)
    NER             reduce using rule 131 (unarynotaddsub -> chain .)
    INSTANCEOF      reduce using rule 131 (unarynotaddsub -> chain .)
    ELVIS           reduce using rule 131 (unarynotaddsub -> chain .)
    ASSIGN          reduce using rule 131 (unarynotaddsub -> chain .)
    AADD            reduce using rule 131 (unarynotaddsub -> chain .)
    ASUB            reduce using rule 131 (unarynotaddsub -> chain .)
    AMUL            reduce using rule 131 (unarynotaddsub -> chain .)
    ADIV            reduce using rule 131 (unarynotaddsub -> chain .)
    AREM            reduce using rule 131 (unarynotaddsub -> chain .)
    AAND            reduce using rule 131 (unarynotaddsub -> chain .)
    AXOR            reduce using rule 131 (unarynotaddsub -> chain .)
    AOR             reduce using rule 131 (unarynotaddsub -> chain .)
    ALSH            reduce using rule 131 (unarynotaddsub -> chain .)
    ARSH            reduce using rule 131 (unarynotaddsub -> chain .)
    AUSH            reduce using rule 131 (unarynotaddsub -> chain .)
    SEMICOLON       reduce using rule 131 (unarynotaddsub -> chain .)
    RBRACE          reduce using rule 131 (unarynotaddsub -> chain .)
    COMMA           reduce using rule 131 (unarynotaddsub -> chain .)
    COLON           reduce using rule 131 (unarynotaddsub -> chain .)
    RP              reduce using rule 131 (unarynotaddsub -> chain .)
    RBRACK          reduce using rule 131 (unarynotaddsub -> chain .)
    INCR            shift and go to state 186
    DECR            shift and go to state 187


state 57

    (128) pre -> DECR . chain
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    NEW             shift and go to state 73
    LP              shift and go to state 185
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    chain                          shift and go to state 188
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 58

    (132) unarynotaddsub -> post .

    COND            reduce using rule 132 (unarynotaddsub -> post .)
    MUL             reduce using rule 132 (unarynotaddsub -> post .)
    DIV             reduce using rule 132 (unarynotaddsub -> post .)
    REM             reduce using rule 132 (unarynotaddsub -> post .)
    ADD             reduce using rule 132 (unarynotaddsub -> post .)
    SUB             reduce using rule 132 (unarynotaddsub -> post .)
    FIND            reduce using rule 132 (unarynotaddsub -> post .)
    MATCH           reduce using rule 132 (unarynotaddsub -> post .)
    LSH             reduce using rule 132 (unarynotaddsub -> post .)
    RSH             reduce using rule 132 (unarynotaddsub -> post .)
    USH             reduce using rule 132 (unarynotaddsub -> post .)
    BWAND           reduce using rule 132 (unarynotaddsub -> post .)
    XOR             reduce using rule 132 (unarynotaddsub -> post .)
    BWOR            reduce using rule 132 (unarynotaddsub -> post .)
    BOOLAND         reduce using rule 132 (unarynotaddsub -> post .)
    BOOLOR          reduce using rule 132 (unarynotaddsub -> post .)
    GT              reduce using rule 132 (unarynotaddsub -> post .)
    GTE             reduce using rule 132 (unarynotaddsub -> post .)
    LT              reduce using rule 132 (unarynotaddsub -> post .)
    LTE             reduce using rule 132 (unarynotaddsub -> post .)
    EQ              reduce using rule 132 (unarynotaddsub -> post .)
    EQR             reduce using rule 132 (unarynotaddsub -> post .)
    NE              reduce using rule 132 (unarynotaddsub -> post .)
    NER             reduce using rule 132 (unarynotaddsub -> post .)
    INSTANCEOF      reduce using rule 132 (unarynotaddsub -> post .)
    ELVIS           reduce using rule 132 (unarynotaddsub -> post .)
    ASSIGN          reduce using rule 132 (unarynotaddsub -> post .)
    AADD            reduce using rule 132 (unarynotaddsub -> post .)
    ASUB            reduce using rule 132 (unarynotaddsub -> post .)
    AMUL            reduce using rule 132 (unarynotaddsub -> post .)
    ADIV            reduce using rule 132 (unarynotaddsub -> post .)
    AREM            reduce using rule 132 (unarynotaddsub -> post .)
    AAND            reduce using rule 132 (unarynotaddsub -> post .)
    AXOR            reduce using rule 132 (unarynotaddsub -> post .)
    AOR             reduce using rule 132 (unarynotaddsub -> post .)
    ALSH            reduce using rule 132 (unarynotaddsub -> post .)
    ARSH            reduce using rule 132 (unarynotaddsub -> post .)
    AUSH            reduce using rule 132 (unarynotaddsub -> post .)
    SEMICOLON       reduce using rule 132 (unarynotaddsub -> post .)
    RBRACE          reduce using rule 132 (unarynotaddsub -> post .)
    COMMA           reduce using rule 132 (unarynotaddsub -> post .)
    COLON           reduce using rule 132 (unarynotaddsub -> post .)
    RP              reduce using rule 132 (unarynotaddsub -> post .)
    RBRACK          reduce using rule 132 (unarynotaddsub -> post .)


state 59

    (133) unarynotaddsub -> not .

    COND            reduce using rule 133 (unarynotaddsub -> not .)
    MUL             reduce using rule 133 (unarynotaddsub -> not .)
    DIV             reduce using rule 133 (unarynotaddsub -> not .)
    REM             reduce using rule 133 (unarynotaddsub -> not .)
    ADD             reduce using rule 133 (unarynotaddsub -> not .)
    SUB             reduce using rule 133 (unarynotaddsub -> not .)
    FIND            reduce using rule 133 (unarynotaddsub -> not .)
    MATCH           reduce using rule 133 (unarynotaddsub -> not .)
    LSH             reduce using rule 133 (unarynotaddsub -> not .)
    RSH             reduce using rule 133 (unarynotaddsub -> not .)
    USH             reduce using rule 133 (unarynotaddsub -> not .)
    BWAND           reduce using rule 133 (unarynotaddsub -> not .)
    XOR             reduce using rule 133 (unarynotaddsub -> not .)
    BWOR            reduce using rule 133 (unarynotaddsub -> not .)
    BOOLAND         reduce using rule 133 (unarynotaddsub -> not .)
    BOOLOR          reduce using rule 133 (unarynotaddsub -> not .)
    GT              reduce using rule 133 (unarynotaddsub -> not .)
    GTE             reduce using rule 133 (unarynotaddsub -> not .)
    LT              reduce using rule 133 (unarynotaddsub -> not .)
    LTE             reduce using rule 133 (unarynotaddsub -> not .)
    EQ              reduce using rule 133 (unarynotaddsub -> not .)
    EQR             reduce using rule 133 (unarynotaddsub -> not .)
    NE              reduce using rule 133 (unarynotaddsub -> not .)
    NER             reduce using rule 133 (unarynotaddsub -> not .)
    INSTANCEOF      reduce using rule 133 (unarynotaddsub -> not .)
    ELVIS           reduce using rule 133 (unarynotaddsub -> not .)
    ASSIGN          reduce using rule 133 (unarynotaddsub -> not .)
    AADD            reduce using rule 133 (unarynotaddsub -> not .)
    ASUB            reduce using rule 133 (unarynotaddsub -> not .)
    AMUL            reduce using rule 133 (unarynotaddsub -> not .)
    ADIV            reduce using rule 133 (unarynotaddsub -> not .)
    AREM            reduce using rule 133 (unarynotaddsub -> not .)
    AAND            reduce using rule 133 (unarynotaddsub -> not .)
    AXOR            reduce using rule 133 (unarynotaddsub -> not .)
    AOR             reduce using rule 133 (unarynotaddsub -> not .)
    ALSH            reduce using rule 133 (unarynotaddsub -> not .)
    ARSH            reduce using rule 133 (unarynotaddsub -> not .)
    AUSH            reduce using rule 133 (unarynotaddsub -> not .)
    SEMICOLON       reduce using rule 133 (unarynotaddsub -> not .)
    RBRACE          reduce using rule 133 (unarynotaddsub -> not .)
    COMMA           reduce using rule 133 (unarynotaddsub -> not .)
    COLON           reduce using rule 133 (unarynotaddsub -> not .)
    RP              reduce using rule 133 (unarynotaddsub -> not .)
    RBRACK          reduce using rule 133 (unarynotaddsub -> not .)


state 60

    (134) unarynotaddsub -> castexpression .

    COND            reduce using rule 134 (unarynotaddsub -> castexpression .)
    MUL             reduce using rule 134 (unarynotaddsub -> castexpression .)
    DIV             reduce using rule 134 (unarynotaddsub -> castexpression .)
    REM             reduce using rule 134 (unarynotaddsub -> castexpression .)
    ADD             reduce using rule 134 (unarynotaddsub -> castexpression .)
    SUB             reduce using rule 134 (unarynotaddsub -> castexpression .)
    FIND            reduce using rule 134 (unarynotaddsub -> castexpression .)
    MATCH           reduce using rule 134 (unarynotaddsub -> castexpression .)
    LSH             reduce using rule 134 (unarynotaddsub -> castexpression .)
    RSH             reduce using rule 134 (unarynotaddsub -> castexpression .)
    USH             reduce using rule 134 (unarynotaddsub -> castexpression .)
    BWAND           reduce using rule 134 (unarynotaddsub -> castexpression .)
    XOR             reduce using rule 134 (unarynotaddsub -> castexpression .)
    BWOR            reduce using rule 134 (unarynotaddsub -> castexpression .)
    BOOLAND         reduce using rule 134 (unarynotaddsub -> castexpression .)
    BOOLOR          reduce using rule 134 (unarynotaddsub -> castexpression .)
    GT              reduce using rule 134 (unarynotaddsub -> castexpression .)
    GTE             reduce using rule 134 (unarynotaddsub -> castexpression .)
    LT              reduce using rule 134 (unarynotaddsub -> castexpression .)
    LTE             reduce using rule 134 (unarynotaddsub -> castexpression .)
    EQ              reduce using rule 134 (unarynotaddsub -> castexpression .)
    EQR             reduce using rule 134 (unarynotaddsub -> castexpression .)
    NE              reduce using rule 134 (unarynotaddsub -> castexpression .)
    NER             reduce using rule 134 (unarynotaddsub -> castexpression .)
    INSTANCEOF      reduce using rule 134 (unarynotaddsub -> castexpression .)
    ELVIS           reduce using rule 134 (unarynotaddsub -> castexpression .)
    ASSIGN          reduce using rule 134 (unarynotaddsub -> castexpression .)
    AADD            reduce using rule 134 (unarynotaddsub -> castexpression .)
    ASUB            reduce using rule 134 (unarynotaddsub -> castexpression .)
    AMUL            reduce using rule 134 (unarynotaddsub -> castexpression .)
    ADIV            reduce using rule 134 (unarynotaddsub -> castexpression .)
    AREM            reduce using rule 134 (unarynotaddsub -> castexpression .)
    AAND            reduce using rule 134 (unarynotaddsub -> castexpression .)
    AXOR            reduce using rule 134 (unarynotaddsub -> castexpression .)
    AOR             reduce using rule 134 (unarynotaddsub -> castexpression .)
    ALSH            reduce using rule 134 (unarynotaddsub -> castexpression .)
    ARSH            reduce using rule 134 (unarynotaddsub -> castexpression .)
    AUSH            reduce using rule 134 (unarynotaddsub -> castexpression .)
    SEMICOLON       reduce using rule 134 (unarynotaddsub -> castexpression .)
    RBRACE          reduce using rule 134 (unarynotaddsub -> castexpression .)
    COMMA           reduce using rule 134 (unarynotaddsub -> castexpression .)
    COLON           reduce using rule 134 (unarynotaddsub -> castexpression .)
    RP              reduce using rule 134 (unarynotaddsub -> castexpression .)
    RBRACK          reduce using rule 134 (unarynotaddsub -> castexpression .)


state 61

    (149) chain -> arrayinitializer .

    INCR            reduce using rule 149 (chain -> arrayinitializer .)
    DECR            reduce using rule 149 (chain -> arrayinitializer .)
    COND            reduce using rule 149 (chain -> arrayinitializer .)
    MUL             reduce using rule 149 (chain -> arrayinitializer .)
    DIV             reduce using rule 149 (chain -> arrayinitializer .)
    REM             reduce using rule 149 (chain -> arrayinitializer .)
    ADD             reduce using rule 149 (chain -> arrayinitializer .)
    SUB             reduce using rule 149 (chain -> arrayinitializer .)
    FIND            reduce using rule 149 (chain -> arrayinitializer .)
    MATCH           reduce using rule 149 (chain -> arrayinitializer .)
    LSH             reduce using rule 149 (chain -> arrayinitializer .)
    RSH             reduce using rule 149 (chain -> arrayinitializer .)
    USH             reduce using rule 149 (chain -> arrayinitializer .)
    BWAND           reduce using rule 149 (chain -> arrayinitializer .)
    XOR             reduce using rule 149 (chain -> arrayinitializer .)
    BWOR            reduce using rule 149 (chain -> arrayinitializer .)
    BOOLAND         reduce using rule 149 (chain -> arrayinitializer .)
    BOOLOR          reduce using rule 149 (chain -> arrayinitializer .)
    GT              reduce using rule 149 (chain -> arrayinitializer .)
    GTE             reduce using rule 149 (chain -> arrayinitializer .)
    LT              reduce using rule 149 (chain -> arrayinitializer .)
    LTE             reduce using rule 149 (chain -> arrayinitializer .)
    EQ              reduce using rule 149 (chain -> arrayinitializer .)
    EQR             reduce using rule 149 (chain -> arrayinitializer .)
    NE              reduce using rule 149 (chain -> arrayinitializer .)
    NER             reduce using rule 149 (chain -> arrayinitializer .)
    INSTANCEOF      reduce using rule 149 (chain -> arrayinitializer .)
    ELVIS           reduce using rule 149 (chain -> arrayinitializer .)
    ASSIGN          reduce using rule 149 (chain -> arrayinitializer .)
    AADD            reduce using rule 149 (chain -> arrayinitializer .)
    ASUB            reduce using rule 149 (chain -> arrayinitializer .)
    AMUL            reduce using rule 149 (chain -> arrayinitializer .)
    ADIV            reduce using rule 149 (chain -> arrayinitializer .)
    AREM            reduce using rule 149 (chain -> arrayinitializer .)
    AAND            reduce using rule 149 (chain -> arrayinitializer .)
    AXOR            reduce using rule 149 (chain -> arrayinitializer .)
    AOR             reduce using rule 149 (chain -> arrayinitializer .)
    ALSH            reduce using rule 149 (chain -> arrayinitializer .)
    ARSH            reduce using rule 149 (chain -> arrayinitializer .)
    AUSH            reduce using rule 149 (chain -> arrayinitializer .)
    SEMICOLON       reduce using rule 149 (chain -> arrayinitializer .)
    RBRACE          reduce using rule 149 (chain -> arrayinitializer .)
    COMMA           reduce using rule 149 (chain -> arrayinitializer .)
    COLON           reduce using rule 149 (chain -> arrayinitializer .)
    RP              reduce using rule 149 (chain -> arrayinitializer .)
    RBRACK          reduce using rule 149 (chain -> arrayinitializer .)


state 62

    (150) chain -> dynamic .
    (165) braceaccess -> dynamic . LBRACE expression RBRACE
    (157) callinvoke_no_null_safe -> dynamic . DOT ID arguments
    (159) callinvoke_null_safe -> dynamic . NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> dynamic . DOT ID
    (164) fieldaccess_null_safe -> dynamic . NSDOT ID

    INCR            reduce using rule 150 (chain -> dynamic .)
    DECR            reduce using rule 150 (chain -> dynamic .)
    COND            reduce using rule 150 (chain -> dynamic .)
    MUL             reduce using rule 150 (chain -> dynamic .)
    DIV             reduce using rule 150 (chain -> dynamic .)
    REM             reduce using rule 150 (chain -> dynamic .)
    ADD             reduce using rule 150 (chain -> dynamic .)
    SUB             reduce using rule 150 (chain -> dynamic .)
    FIND            reduce using rule 150 (chain -> dynamic .)
    MATCH           reduce using rule 150 (chain -> dynamic .)
    LSH             reduce using rule 150 (chain -> dynamic .)
    RSH             reduce using rule 150 (chain -> dynamic .)
    USH             reduce using rule 150 (chain -> dynamic .)
    BWAND           reduce using rule 150 (chain -> dynamic .)
    XOR             reduce using rule 150 (chain -> dynamic .)
    BWOR            reduce using rule 150 (chain -> dynamic .)
    BOOLAND         reduce using rule 150 (chain -> dynamic .)
    BOOLOR          reduce using rule 150 (chain -> dynamic .)
    GT              reduce using rule 150 (chain -> dynamic .)
    GTE             reduce using rule 150 (chain -> dynamic .)
    LT              reduce using rule 150 (chain -> dynamic .)
    LTE             reduce using rule 150 (chain -> dynamic .)
    EQ              reduce using rule 150 (chain -> dynamic .)
    EQR             reduce using rule 150 (chain -> dynamic .)
    NE              reduce using rule 150 (chain -> dynamic .)
    NER             reduce using rule 150 (chain -> dynamic .)
    INSTANCEOF      reduce using rule 150 (chain -> dynamic .)
    ELVIS           reduce using rule 150 (chain -> dynamic .)
    ASSIGN          reduce using rule 150 (chain -> dynamic .)
    AADD            reduce using rule 150 (chain -> dynamic .)
    ASUB            reduce using rule 150 (chain -> dynamic .)
    AMUL            reduce using rule 150 (chain -> dynamic .)
    ADIV            reduce using rule 150 (chain -> dynamic .)
    AREM            reduce using rule 150 (chain -> dynamic .)
    AAND            reduce using rule 150 (chain -> dynamic .)
    AXOR            reduce using rule 150 (chain -> dynamic .)
    AOR             reduce using rule 150 (chain -> dynamic .)
    ALSH            reduce using rule 150 (chain -> dynamic .)
    ARSH            reduce using rule 150 (chain -> dynamic .)
    AUSH            reduce using rule 150 (chain -> dynamic .)
    SEMICOLON       reduce using rule 150 (chain -> dynamic .)
    RBRACE          reduce using rule 150 (chain -> dynamic .)
    COMMA           reduce using rule 150 (chain -> dynamic .)
    COLON           reduce using rule 150 (chain -> dynamic .)
    RP              reduce using rule 150 (chain -> dynamic .)
    RBRACK          reduce using rule 150 (chain -> dynamic .)
    LBRACE          shift and go to state 189
    DOT             shift and go to state 190
    NSDOT           shift and go to state 191


state 63

    (137) not -> BOOLNOT . unary
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    unary                          shift and go to state 192
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 64

    (138) not -> BWNOT . unary
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    unary                          shift and go to state 193
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 65

    (139) castexpression -> primordefcast .

    COND            reduce using rule 139 (castexpression -> primordefcast .)
    MUL             reduce using rule 139 (castexpression -> primordefcast .)
    DIV             reduce using rule 139 (castexpression -> primordefcast .)
    REM             reduce using rule 139 (castexpression -> primordefcast .)
    ADD             reduce using rule 139 (castexpression -> primordefcast .)
    SUB             reduce using rule 139 (castexpression -> primordefcast .)
    FIND            reduce using rule 139 (castexpression -> primordefcast .)
    MATCH           reduce using rule 139 (castexpression -> primordefcast .)
    LSH             reduce using rule 139 (castexpression -> primordefcast .)
    RSH             reduce using rule 139 (castexpression -> primordefcast .)
    USH             reduce using rule 139 (castexpression -> primordefcast .)
    BWAND           reduce using rule 139 (castexpression -> primordefcast .)
    XOR             reduce using rule 139 (castexpression -> primordefcast .)
    BWOR            reduce using rule 139 (castexpression -> primordefcast .)
    BOOLAND         reduce using rule 139 (castexpression -> primordefcast .)
    BOOLOR          reduce using rule 139 (castexpression -> primordefcast .)
    GT              reduce using rule 139 (castexpression -> primordefcast .)
    GTE             reduce using rule 139 (castexpression -> primordefcast .)
    LT              reduce using rule 139 (castexpression -> primordefcast .)
    LTE             reduce using rule 139 (castexpression -> primordefcast .)
    EQ              reduce using rule 139 (castexpression -> primordefcast .)
    EQR             reduce using rule 139 (castexpression -> primordefcast .)
    NE              reduce using rule 139 (castexpression -> primordefcast .)
    NER             reduce using rule 139 (castexpression -> primordefcast .)
    INSTANCEOF      reduce using rule 139 (castexpression -> primordefcast .)
    ELVIS           reduce using rule 139 (castexpression -> primordefcast .)
    ASSIGN          reduce using rule 139 (castexpression -> primordefcast .)
    AADD            reduce using rule 139 (castexpression -> primordefcast .)
    ASUB            reduce using rule 139 (castexpression -> primordefcast .)
    AMUL            reduce using rule 139 (castexpression -> primordefcast .)
    ADIV            reduce using rule 139 (castexpression -> primordefcast .)
    AREM            reduce using rule 139 (castexpression -> primordefcast .)
    AAND            reduce using rule 139 (castexpression -> primordefcast .)
    AXOR            reduce using rule 139 (castexpression -> primordefcast .)
    AOR             reduce using rule 139 (castexpression -> primordefcast .)
    ALSH            reduce using rule 139 (castexpression -> primordefcast .)
    ARSH            reduce using rule 139 (castexpression -> primordefcast .)
    AUSH            reduce using rule 139 (castexpression -> primordefcast .)
    SEMICOLON       reduce using rule 139 (castexpression -> primordefcast .)
    RBRACE          reduce using rule 139 (castexpression -> primordefcast .)
    COMMA           reduce using rule 139 (castexpression -> primordefcast .)
    COLON           reduce using rule 139 (castexpression -> primordefcast .)
    RP              reduce using rule 139 (castexpression -> primordefcast .)
    RBRACK          reduce using rule 139 (castexpression -> primordefcast .)


state 66

    (140) castexpression -> refcast .

    COND            reduce using rule 140 (castexpression -> refcast .)
    MUL             reduce using rule 140 (castexpression -> refcast .)
    DIV             reduce using rule 140 (castexpression -> refcast .)
    REM             reduce using rule 140 (castexpression -> refcast .)
    ADD             reduce using rule 140 (castexpression -> refcast .)
    SUB             reduce using rule 140 (castexpression -> refcast .)
    FIND            reduce using rule 140 (castexpression -> refcast .)
    MATCH           reduce using rule 140 (castexpression -> refcast .)
    LSH             reduce using rule 140 (castexpression -> refcast .)
    RSH             reduce using rule 140 (castexpression -> refcast .)
    USH             reduce using rule 140 (castexpression -> refcast .)
    BWAND           reduce using rule 140 (castexpression -> refcast .)
    XOR             reduce using rule 140 (castexpression -> refcast .)
    BWOR            reduce using rule 140 (castexpression -> refcast .)
    BOOLAND         reduce using rule 140 (castexpression -> refcast .)
    BOOLOR          reduce using rule 140 (castexpression -> refcast .)
    GT              reduce using rule 140 (castexpression -> refcast .)
    GTE             reduce using rule 140 (castexpression -> refcast .)
    LT              reduce using rule 140 (castexpression -> refcast .)
    LTE             reduce using rule 140 (castexpression -> refcast .)
    EQ              reduce using rule 140 (castexpression -> refcast .)
    EQR             reduce using rule 140 (castexpression -> refcast .)
    NE              reduce using rule 140 (castexpression -> refcast .)
    NER             reduce using rule 140 (castexpression -> refcast .)
    INSTANCEOF      reduce using rule 140 (castexpression -> refcast .)
    ELVIS           reduce using rule 140 (castexpression -> refcast .)
    ASSIGN          reduce using rule 140 (castexpression -> refcast .)
    AADD            reduce using rule 140 (castexpression -> refcast .)
    ASUB            reduce using rule 140 (castexpression -> refcast .)
    AMUL            reduce using rule 140 (castexpression -> refcast .)
    ADIV            reduce using rule 140 (castexpression -> refcast .)
    AREM            reduce using rule 140 (castexpression -> refcast .)
    AAND            reduce using rule 140 (castexpression -> refcast .)
    AXOR            reduce using rule 140 (castexpression -> refcast .)
    AOR             reduce using rule 140 (castexpression -> refcast .)
    ALSH            reduce using rule 140 (castexpression -> refcast .)
    ARSH            reduce using rule 140 (castexpression -> refcast .)
    AUSH            reduce using rule 140 (castexpression -> refcast .)
    SEMICOLON       reduce using rule 140 (castexpression -> refcast .)
    RBRACE          reduce using rule 140 (castexpression -> refcast .)
    COMMA           reduce using rule 140 (castexpression -> refcast .)
    COLON           reduce using rule 140 (castexpression -> refcast .)
    RP              reduce using rule 140 (castexpression -> refcast .)
    RBRACK          reduce using rule 140 (castexpression -> refcast .)


state 67

    (197) arrayinitializer -> newstandardarray .

    INCR            reduce using rule 197 (arrayinitializer -> newstandardarray .)
    DECR            reduce using rule 197 (arrayinitializer -> newstandardarray .)
    COND            reduce using rule 197 (arrayinitializer -> newstandardarray .)
    MUL             reduce using rule 197 (arrayinitializer -> newstandardarray .)
    DIV             reduce using rule 197 (arrayinitializer -> newstandardarray .)
    REM             reduce using rule 197 (arrayinitializer -> newstandardarray .)
    ADD             reduce using rule 197 (arrayinitializer -> newstandardarray .)
    SUB             reduce using rule 197 (arrayinitializer -> newstandardarray .)
    FIND            reduce using rule 197 (arrayinitializer -> newstandardarray .)
    MATCH           reduce using rule 197 (arrayinitializer -> newstandardarray .)
    LSH             reduce using rule 197 (arrayinitializer -> newstandardarray .)
    RSH             reduce using rule 197 (arrayinitializer -> newstandardarray .)
    USH             reduce using rule 197 (arrayinitializer -> newstandardarray .)
    BWAND           reduce using rule 197 (arrayinitializer -> newstandardarray .)
    XOR             reduce using rule 197 (arrayinitializer -> newstandardarray .)
    BWOR            reduce using rule 197 (arrayinitializer -> newstandardarray .)
    BOOLAND         reduce using rule 197 (arrayinitializer -> newstandardarray .)
    BOOLOR          reduce using rule 197 (arrayinitializer -> newstandardarray .)
    GT              reduce using rule 197 (arrayinitializer -> newstandardarray .)
    GTE             reduce using rule 197 (arrayinitializer -> newstandardarray .)
    LT              reduce using rule 197 (arrayinitializer -> newstandardarray .)
    LTE             reduce using rule 197 (arrayinitializer -> newstandardarray .)
    EQ              reduce using rule 197 (arrayinitializer -> newstandardarray .)
    EQR             reduce using rule 197 (arrayinitializer -> newstandardarray .)
    NE              reduce using rule 197 (arrayinitializer -> newstandardarray .)
    NER             reduce using rule 197 (arrayinitializer -> newstandardarray .)
    INSTANCEOF      reduce using rule 197 (arrayinitializer -> newstandardarray .)
    ELVIS           reduce using rule 197 (arrayinitializer -> newstandardarray .)
    ASSIGN          reduce using rule 197 (arrayinitializer -> newstandardarray .)
    AADD            reduce using rule 197 (arrayinitializer -> newstandardarray .)
    ASUB            reduce using rule 197 (arrayinitializer -> newstandardarray .)
    AMUL            reduce using rule 197 (arrayinitializer -> newstandardarray .)
    ADIV            reduce using rule 197 (arrayinitializer -> newstandardarray .)
    AREM            reduce using rule 197 (arrayinitializer -> newstandardarray .)
    AAND            reduce using rule 197 (arrayinitializer -> newstandardarray .)
    AXOR            reduce using rule 197 (arrayinitializer -> newstandardarray .)
    AOR             reduce using rule 197 (arrayinitializer -> newstandardarray .)
    ALSH            reduce using rule 197 (arrayinitializer -> newstandardarray .)
    ARSH            reduce using rule 197 (arrayinitializer -> newstandardarray .)
    AUSH            reduce using rule 197 (arrayinitializer -> newstandardarray .)
    SEMICOLON       reduce using rule 197 (arrayinitializer -> newstandardarray .)
    RBRACE          reduce using rule 197 (arrayinitializer -> newstandardarray .)
    COMMA           reduce using rule 197 (arrayinitializer -> newstandardarray .)
    COLON           reduce using rule 197 (arrayinitializer -> newstandardarray .)
    RP              reduce using rule 197 (arrayinitializer -> newstandardarray .)
    RBRACK          reduce using rule 197 (arrayinitializer -> newstandardarray .)


state 68

    (198) arrayinitializer -> newinitializedarray .

    INCR            reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    DECR            reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    COND            reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    MUL             reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    DIV             reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    REM             reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    ADD             reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    SUB             reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    FIND            reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    MATCH           reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    LSH             reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    RSH             reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    USH             reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    BWAND           reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    XOR             reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    BWOR            reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    BOOLAND         reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    BOOLOR          reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    GT              reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    GTE             reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    LT              reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    LTE             reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    EQ              reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    EQR             reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    NE              reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    NER             reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    INSTANCEOF      reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    ELVIS           reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    ASSIGN          reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    AADD            reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    ASUB            reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    AMUL            reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    ADIV            reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    AREM            reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    AAND            reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    AXOR            reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    AOR             reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    ALSH            reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    ARSH            reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    AUSH            reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    SEMICOLON       reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    RBRACE          reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    COMMA           reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    COLON           reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    RP              reduce using rule 198 (arrayinitializer -> newinitializedarray .)
    RBRACK          reduce using rule 198 (arrayinitializer -> newinitializedarray .)


state 69

    (151) dynamic -> callinvoke .

    LBRACE          reduce using rule 151 (dynamic -> callinvoke .)
    DOT             reduce using rule 151 (dynamic -> callinvoke .)
    NSDOT           reduce using rule 151 (dynamic -> callinvoke .)
    INCR            reduce using rule 151 (dynamic -> callinvoke .)
    DECR            reduce using rule 151 (dynamic -> callinvoke .)
    COND            reduce using rule 151 (dynamic -> callinvoke .)
    MUL             reduce using rule 151 (dynamic -> callinvoke .)
    DIV             reduce using rule 151 (dynamic -> callinvoke .)
    REM             reduce using rule 151 (dynamic -> callinvoke .)
    ADD             reduce using rule 151 (dynamic -> callinvoke .)
    SUB             reduce using rule 151 (dynamic -> callinvoke .)
    FIND            reduce using rule 151 (dynamic -> callinvoke .)
    MATCH           reduce using rule 151 (dynamic -> callinvoke .)
    LSH             reduce using rule 151 (dynamic -> callinvoke .)
    RSH             reduce using rule 151 (dynamic -> callinvoke .)
    USH             reduce using rule 151 (dynamic -> callinvoke .)
    BWAND           reduce using rule 151 (dynamic -> callinvoke .)
    XOR             reduce using rule 151 (dynamic -> callinvoke .)
    BWOR            reduce using rule 151 (dynamic -> callinvoke .)
    BOOLAND         reduce using rule 151 (dynamic -> callinvoke .)
    BOOLOR          reduce using rule 151 (dynamic -> callinvoke .)
    GT              reduce using rule 151 (dynamic -> callinvoke .)
    GTE             reduce using rule 151 (dynamic -> callinvoke .)
    LT              reduce using rule 151 (dynamic -> callinvoke .)
    LTE             reduce using rule 151 (dynamic -> callinvoke .)
    EQ              reduce using rule 151 (dynamic -> callinvoke .)
    EQR             reduce using rule 151 (dynamic -> callinvoke .)
    NE              reduce using rule 151 (dynamic -> callinvoke .)
    NER             reduce using rule 151 (dynamic -> callinvoke .)
    INSTANCEOF      reduce using rule 151 (dynamic -> callinvoke .)
    ELVIS           reduce using rule 151 (dynamic -> callinvoke .)
    ASSIGN          reduce using rule 151 (dynamic -> callinvoke .)
    AADD            reduce using rule 151 (dynamic -> callinvoke .)
    ASUB            reduce using rule 151 (dynamic -> callinvoke .)
    AMUL            reduce using rule 151 (dynamic -> callinvoke .)
    ADIV            reduce using rule 151 (dynamic -> callinvoke .)
    AREM            reduce using rule 151 (dynamic -> callinvoke .)
    AAND            reduce using rule 151 (dynamic -> callinvoke .)
    AXOR            reduce using rule 151 (dynamic -> callinvoke .)
    AOR             reduce using rule 151 (dynamic -> callinvoke .)
    ALSH            reduce using rule 151 (dynamic -> callinvoke .)
    ARSH            reduce using rule 151 (dynamic -> callinvoke .)
    AUSH            reduce using rule 151 (dynamic -> callinvoke .)
    SEMICOLON       reduce using rule 151 (dynamic -> callinvoke .)
    RBRACE          reduce using rule 151 (dynamic -> callinvoke .)
    COMMA           reduce using rule 151 (dynamic -> callinvoke .)
    COLON           reduce using rule 151 (dynamic -> callinvoke .)
    RP              reduce using rule 151 (dynamic -> callinvoke .)
    RBRACK          reduce using rule 151 (dynamic -> callinvoke .)


state 70

    (152) dynamic -> fieldaccess .

    LBRACE          reduce using rule 152 (dynamic -> fieldaccess .)
    DOT             reduce using rule 152 (dynamic -> fieldaccess .)
    NSDOT           reduce using rule 152 (dynamic -> fieldaccess .)
    INCR            reduce using rule 152 (dynamic -> fieldaccess .)
    DECR            reduce using rule 152 (dynamic -> fieldaccess .)
    COND            reduce using rule 152 (dynamic -> fieldaccess .)
    MUL             reduce using rule 152 (dynamic -> fieldaccess .)
    DIV             reduce using rule 152 (dynamic -> fieldaccess .)
    REM             reduce using rule 152 (dynamic -> fieldaccess .)
    ADD             reduce using rule 152 (dynamic -> fieldaccess .)
    SUB             reduce using rule 152 (dynamic -> fieldaccess .)
    FIND            reduce using rule 152 (dynamic -> fieldaccess .)
    MATCH           reduce using rule 152 (dynamic -> fieldaccess .)
    LSH             reduce using rule 152 (dynamic -> fieldaccess .)
    RSH             reduce using rule 152 (dynamic -> fieldaccess .)
    USH             reduce using rule 152 (dynamic -> fieldaccess .)
    BWAND           reduce using rule 152 (dynamic -> fieldaccess .)
    XOR             reduce using rule 152 (dynamic -> fieldaccess .)
    BWOR            reduce using rule 152 (dynamic -> fieldaccess .)
    BOOLAND         reduce using rule 152 (dynamic -> fieldaccess .)
    BOOLOR          reduce using rule 152 (dynamic -> fieldaccess .)
    GT              reduce using rule 152 (dynamic -> fieldaccess .)
    GTE             reduce using rule 152 (dynamic -> fieldaccess .)
    LT              reduce using rule 152 (dynamic -> fieldaccess .)
    LTE             reduce using rule 152 (dynamic -> fieldaccess .)
    EQ              reduce using rule 152 (dynamic -> fieldaccess .)
    EQR             reduce using rule 152 (dynamic -> fieldaccess .)
    NE              reduce using rule 152 (dynamic -> fieldaccess .)
    NER             reduce using rule 152 (dynamic -> fieldaccess .)
    INSTANCEOF      reduce using rule 152 (dynamic -> fieldaccess .)
    ELVIS           reduce using rule 152 (dynamic -> fieldaccess .)
    ASSIGN          reduce using rule 152 (dynamic -> fieldaccess .)
    AADD            reduce using rule 152 (dynamic -> fieldaccess .)
    ASUB            reduce using rule 152 (dynamic -> fieldaccess .)
    AMUL            reduce using rule 152 (dynamic -> fieldaccess .)
    ADIV            reduce using rule 152 (dynamic -> fieldaccess .)
    AREM            reduce using rule 152 (dynamic -> fieldaccess .)
    AAND            reduce using rule 152 (dynamic -> fieldaccess .)
    AXOR            reduce using rule 152 (dynamic -> fieldaccess .)
    AOR             reduce using rule 152 (dynamic -> fieldaccess .)
    ALSH            reduce using rule 152 (dynamic -> fieldaccess .)
    ARSH            reduce using rule 152 (dynamic -> fieldaccess .)
    AUSH            reduce using rule 152 (dynamic -> fieldaccess .)
    SEMICOLON       reduce using rule 152 (dynamic -> fieldaccess .)
    RBRACE          reduce using rule 152 (dynamic -> fieldaccess .)
    COMMA           reduce using rule 152 (dynamic -> fieldaccess .)
    COLON           reduce using rule 152 (dynamic -> fieldaccess .)
    RP              reduce using rule 152 (dynamic -> fieldaccess .)
    RBRACK          reduce using rule 152 (dynamic -> fieldaccess .)


state 71

    (153) dynamic -> braceaccess .

    LBRACE          reduce using rule 153 (dynamic -> braceaccess .)
    DOT             reduce using rule 153 (dynamic -> braceaccess .)
    NSDOT           reduce using rule 153 (dynamic -> braceaccess .)
    INCR            reduce using rule 153 (dynamic -> braceaccess .)
    DECR            reduce using rule 153 (dynamic -> braceaccess .)
    COND            reduce using rule 153 (dynamic -> braceaccess .)
    MUL             reduce using rule 153 (dynamic -> braceaccess .)
    DIV             reduce using rule 153 (dynamic -> braceaccess .)
    REM             reduce using rule 153 (dynamic -> braceaccess .)
    ADD             reduce using rule 153 (dynamic -> braceaccess .)
    SUB             reduce using rule 153 (dynamic -> braceaccess .)
    FIND            reduce using rule 153 (dynamic -> braceaccess .)
    MATCH           reduce using rule 153 (dynamic -> braceaccess .)
    LSH             reduce using rule 153 (dynamic -> braceaccess .)
    RSH             reduce using rule 153 (dynamic -> braceaccess .)
    USH             reduce using rule 153 (dynamic -> braceaccess .)
    BWAND           reduce using rule 153 (dynamic -> braceaccess .)
    XOR             reduce using rule 153 (dynamic -> braceaccess .)
    BWOR            reduce using rule 153 (dynamic -> braceaccess .)
    BOOLAND         reduce using rule 153 (dynamic -> braceaccess .)
    BOOLOR          reduce using rule 153 (dynamic -> braceaccess .)
    GT              reduce using rule 153 (dynamic -> braceaccess .)
    GTE             reduce using rule 153 (dynamic -> braceaccess .)
    LT              reduce using rule 153 (dynamic -> braceaccess .)
    LTE             reduce using rule 153 (dynamic -> braceaccess .)
    EQ              reduce using rule 153 (dynamic -> braceaccess .)
    EQR             reduce using rule 153 (dynamic -> braceaccess .)
    NE              reduce using rule 153 (dynamic -> braceaccess .)
    NER             reduce using rule 153 (dynamic -> braceaccess .)
    INSTANCEOF      reduce using rule 153 (dynamic -> braceaccess .)
    ELVIS           reduce using rule 153 (dynamic -> braceaccess .)
    ASSIGN          reduce using rule 153 (dynamic -> braceaccess .)
    AADD            reduce using rule 153 (dynamic -> braceaccess .)
    ASUB            reduce using rule 153 (dynamic -> braceaccess .)
    AMUL            reduce using rule 153 (dynamic -> braceaccess .)
    ADIV            reduce using rule 153 (dynamic -> braceaccess .)
    AREM            reduce using rule 153 (dynamic -> braceaccess .)
    AAND            reduce using rule 153 (dynamic -> braceaccess .)
    AXOR            reduce using rule 153 (dynamic -> braceaccess .)
    AOR             reduce using rule 153 (dynamic -> braceaccess .)
    ALSH            reduce using rule 153 (dynamic -> braceaccess .)
    ARSH            reduce using rule 153 (dynamic -> braceaccess .)
    AUSH            reduce using rule 153 (dynamic -> braceaccess .)
    SEMICOLON       reduce using rule 153 (dynamic -> braceaccess .)
    RBRACE          reduce using rule 153 (dynamic -> braceaccess .)
    COMMA           reduce using rule 153 (dynamic -> braceaccess .)
    COLON           reduce using rule 153 (dynamic -> braceaccess .)
    RP              reduce using rule 153 (dynamic -> braceaccess .)
    RBRACK          reduce using rule 153 (dynamic -> braceaccess .)


state 72

    (154) dynamic -> primary .

    LBRACE          reduce using rule 154 (dynamic -> primary .)
    DOT             reduce using rule 154 (dynamic -> primary .)
    NSDOT           reduce using rule 154 (dynamic -> primary .)
    INCR            reduce using rule 154 (dynamic -> primary .)
    DECR            reduce using rule 154 (dynamic -> primary .)
    COND            reduce using rule 154 (dynamic -> primary .)
    MUL             reduce using rule 154 (dynamic -> primary .)
    DIV             reduce using rule 154 (dynamic -> primary .)
    REM             reduce using rule 154 (dynamic -> primary .)
    ADD             reduce using rule 154 (dynamic -> primary .)
    SUB             reduce using rule 154 (dynamic -> primary .)
    FIND            reduce using rule 154 (dynamic -> primary .)
    MATCH           reduce using rule 154 (dynamic -> primary .)
    LSH             reduce using rule 154 (dynamic -> primary .)
    RSH             reduce using rule 154 (dynamic -> primary .)
    USH             reduce using rule 154 (dynamic -> primary .)
    BWAND           reduce using rule 154 (dynamic -> primary .)
    XOR             reduce using rule 154 (dynamic -> primary .)
    BWOR            reduce using rule 154 (dynamic -> primary .)
    BOOLAND         reduce using rule 154 (dynamic -> primary .)
    BOOLOR          reduce using rule 154 (dynamic -> primary .)
    GT              reduce using rule 154 (dynamic -> primary .)
    GTE             reduce using rule 154 (dynamic -> primary .)
    LT              reduce using rule 154 (dynamic -> primary .)
    LTE             reduce using rule 154 (dynamic -> primary .)
    EQ              reduce using rule 154 (dynamic -> primary .)
    EQR             reduce using rule 154 (dynamic -> primary .)
    NE              reduce using rule 154 (dynamic -> primary .)
    NER             reduce using rule 154 (dynamic -> primary .)
    INSTANCEOF      reduce using rule 154 (dynamic -> primary .)
    ELVIS           reduce using rule 154 (dynamic -> primary .)
    ASSIGN          reduce using rule 154 (dynamic -> primary .)
    AADD            reduce using rule 154 (dynamic -> primary .)
    ASUB            reduce using rule 154 (dynamic -> primary .)
    AMUL            reduce using rule 154 (dynamic -> primary .)
    ADIV            reduce using rule 154 (dynamic -> primary .)
    AREM            reduce using rule 154 (dynamic -> primary .)
    AAND            reduce using rule 154 (dynamic -> primary .)
    AXOR            reduce using rule 154 (dynamic -> primary .)
    AOR             reduce using rule 154 (dynamic -> primary .)
    ALSH            reduce using rule 154 (dynamic -> primary .)
    ARSH            reduce using rule 154 (dynamic -> primary .)
    AUSH            reduce using rule 154 (dynamic -> primary .)
    SEMICOLON       reduce using rule 154 (dynamic -> primary .)
    RBRACE          reduce using rule 154 (dynamic -> primary .)
    COMMA           reduce using rule 154 (dynamic -> primary .)
    COLON           reduce using rule 154 (dynamic -> primary .)
    RP              reduce using rule 154 (dynamic -> primary .)
    RBRACK          reduce using rule 154 (dynamic -> primary .)


state 73

    (199) newstandardarray -> NEW . type dims
    (200) newinitializedarray -> NEW . type LBRACE RBRACE LBRACK arguments RBRACK
    (196) newobject -> NEW . type arguments
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID

    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    ID              shift and go to state 196

    type                           shift and go to state 194
    idaccess                       shift and go to state 195

state 74

    (155) callinvoke -> callinvoke_no_null_safe .

    LBRACE          reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    DOT             reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    NSDOT           reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    INCR            reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    DECR            reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    COND            reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    MUL             reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    DIV             reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    REM             reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    ADD             reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    SUB             reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    FIND            reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    MATCH           reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    LSH             reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    RSH             reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    USH             reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    BWAND           reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    XOR             reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    BWOR            reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    BOOLAND         reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    BOOLOR          reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    GT              reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    GTE             reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    LT              reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    LTE             reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    EQ              reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    EQR             reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    NE              reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    NER             reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    INSTANCEOF      reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    ELVIS           reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    ASSIGN          reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    AADD            reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    ASUB            reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    AMUL            reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    ADIV            reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    AREM            reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    AAND            reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    AXOR            reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    AOR             reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    ALSH            reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    ARSH            reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    AUSH            reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    SEMICOLON       reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    RBRACE          reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    COMMA           reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    COLON           reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    RP              reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)
    RBRACK          reduce using rule 155 (callinvoke -> callinvoke_no_null_safe .)


state 75

    (156) callinvoke -> callinvoke_null_safe .

    LBRACE          reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    DOT             reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    NSDOT           reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    INCR            reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    DECR            reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    COND            reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    MUL             reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    DIV             reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    REM             reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    ADD             reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    SUB             reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    FIND            reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    MATCH           reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    LSH             reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    RSH             reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    USH             reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    BWAND           reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    XOR             reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    BWOR            reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    BOOLAND         reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    BOOLOR          reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    GT              reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    GTE             reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    LT              reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    LTE             reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    EQ              reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    EQR             reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    NE              reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    NER             reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    INSTANCEOF      reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    ELVIS           reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    ASSIGN          reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    AADD            reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    ASUB            reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    AMUL            reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    ADIV            reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    AREM            reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    AAND            reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    AXOR            reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    AOR             reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    ALSH            reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    ARSH            reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    AUSH            reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    SEMICOLON       reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    RBRACE          reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    COMMA           reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    COLON           reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    RP              reduce using rule 156 (callinvoke -> callinvoke_null_safe .)
    RBRACK          reduce using rule 156 (callinvoke -> callinvoke_null_safe .)


state 76

    (160) fieldaccess -> fieldaccess_no_null_safe .

    LBRACE          reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    DOT             reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    NSDOT           reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    INCR            reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    DECR            reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    COND            reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    MUL             reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    DIV             reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    REM             reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    ADD             reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    SUB             reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    FIND            reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    MATCH           reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    LSH             reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    RSH             reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    USH             reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    BWAND           reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    XOR             reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    BWOR            reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    BOOLAND         reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    BOOLOR          reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    GT              reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    GTE             reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    LT              reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    LTE             reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    EQ              reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    EQR             reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    NE              reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    NER             reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    INSTANCEOF      reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    ELVIS           reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    ASSIGN          reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    AADD            reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    ASUB            reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    AMUL            reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    ADIV            reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    AREM            reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    AAND            reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    AXOR            reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    AOR             reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    ALSH            reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    ARSH            reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    AUSH            reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    SEMICOLON       reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    RBRACE          reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    COMMA           reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    COLON           reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    RP              reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)
    RBRACK          reduce using rule 160 (fieldaccess -> fieldaccess_no_null_safe .)


state 77

    (161) fieldaccess -> fieldaccess_null_safe .

    LBRACE          reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    DOT             reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    NSDOT           reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    INCR            reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    DECR            reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    COND            reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    MUL             reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    DIV             reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    REM             reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    ADD             reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    SUB             reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    FIND            reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    MATCH           reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    LSH             reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    RSH             reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    USH             reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    BWAND           reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    XOR             reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    BWOR            reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    BOOLAND         reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    BOOLOR          reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    GT              reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    GTE             reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    LT              reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    LTE             reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    EQ              reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    EQR             reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    NE              reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    NER             reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    INSTANCEOF      reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    ELVIS           reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    ASSIGN          reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    AADD            reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    ASUB            reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    AMUL            reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    ADIV            reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    AREM            reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    AAND            reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    AXOR            reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    AOR             reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    ALSH            reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    ARSH            reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    AUSH            reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    SEMICOLON       reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    RBRACE          reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    COMMA           reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    COLON           reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    RP              reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)
    RBRACK          reduce using rule 161 (fieldaccess -> fieldaccess_null_safe .)


state 78

    (167) primary -> precedence .

    LBRACE          reduce using rule 167 (primary -> precedence .)
    DOT             reduce using rule 167 (primary -> precedence .)
    NSDOT           reduce using rule 167 (primary -> precedence .)
    INCR            reduce using rule 167 (primary -> precedence .)
    DECR            reduce using rule 167 (primary -> precedence .)
    COND            reduce using rule 167 (primary -> precedence .)
    MUL             reduce using rule 167 (primary -> precedence .)
    DIV             reduce using rule 167 (primary -> precedence .)
    REM             reduce using rule 167 (primary -> precedence .)
    ADD             reduce using rule 167 (primary -> precedence .)
    SUB             reduce using rule 167 (primary -> precedence .)
    FIND            reduce using rule 167 (primary -> precedence .)
    MATCH           reduce using rule 167 (primary -> precedence .)
    LSH             reduce using rule 167 (primary -> precedence .)
    RSH             reduce using rule 167 (primary -> precedence .)
    USH             reduce using rule 167 (primary -> precedence .)
    BWAND           reduce using rule 167 (primary -> precedence .)
    XOR             reduce using rule 167 (primary -> precedence .)
    BWOR            reduce using rule 167 (primary -> precedence .)
    BOOLAND         reduce using rule 167 (primary -> precedence .)
    BOOLOR          reduce using rule 167 (primary -> precedence .)
    GT              reduce using rule 167 (primary -> precedence .)
    GTE             reduce using rule 167 (primary -> precedence .)
    LT              reduce using rule 167 (primary -> precedence .)
    LTE             reduce using rule 167 (primary -> precedence .)
    EQ              reduce using rule 167 (primary -> precedence .)
    EQR             reduce using rule 167 (primary -> precedence .)
    NE              reduce using rule 167 (primary -> precedence .)
    NER             reduce using rule 167 (primary -> precedence .)
    INSTANCEOF      reduce using rule 167 (primary -> precedence .)
    ELVIS           reduce using rule 167 (primary -> precedence .)
    ASSIGN          reduce using rule 167 (primary -> precedence .)
    AADD            reduce using rule 167 (primary -> precedence .)
    ASUB            reduce using rule 167 (primary -> precedence .)
    AMUL            reduce using rule 167 (primary -> precedence .)
    ADIV            reduce using rule 167 (primary -> precedence .)
    AREM            reduce using rule 167 (primary -> precedence .)
    AAND            reduce using rule 167 (primary -> precedence .)
    AXOR            reduce using rule 167 (primary -> precedence .)
    AOR             reduce using rule 167 (primary -> precedence .)
    ALSH            reduce using rule 167 (primary -> precedence .)
    ARSH            reduce using rule 167 (primary -> precedence .)
    AUSH            reduce using rule 167 (primary -> precedence .)
    SEMICOLON       reduce using rule 167 (primary -> precedence .)
    RBRACE          reduce using rule 167 (primary -> precedence .)
    COMMA           reduce using rule 167 (primary -> precedence .)
    COLON           reduce using rule 167 (primary -> precedence .)
    RP              reduce using rule 167 (primary -> precedence .)
    RBRACK          reduce using rule 167 (primary -> precedence .)


state 79

    (168) primary -> numeric .

    LBRACE          reduce using rule 168 (primary -> numeric .)
    DOT             reduce using rule 168 (primary -> numeric .)
    NSDOT           reduce using rule 168 (primary -> numeric .)
    INCR            reduce using rule 168 (primary -> numeric .)
    DECR            reduce using rule 168 (primary -> numeric .)
    COND            reduce using rule 168 (primary -> numeric .)
    MUL             reduce using rule 168 (primary -> numeric .)
    DIV             reduce using rule 168 (primary -> numeric .)
    REM             reduce using rule 168 (primary -> numeric .)
    ADD             reduce using rule 168 (primary -> numeric .)
    SUB             reduce using rule 168 (primary -> numeric .)
    FIND            reduce using rule 168 (primary -> numeric .)
    MATCH           reduce using rule 168 (primary -> numeric .)
    LSH             reduce using rule 168 (primary -> numeric .)
    RSH             reduce using rule 168 (primary -> numeric .)
    USH             reduce using rule 168 (primary -> numeric .)
    BWAND           reduce using rule 168 (primary -> numeric .)
    XOR             reduce using rule 168 (primary -> numeric .)
    BWOR            reduce using rule 168 (primary -> numeric .)
    BOOLAND         reduce using rule 168 (primary -> numeric .)
    BOOLOR          reduce using rule 168 (primary -> numeric .)
    GT              reduce using rule 168 (primary -> numeric .)
    GTE             reduce using rule 168 (primary -> numeric .)
    LT              reduce using rule 168 (primary -> numeric .)
    LTE             reduce using rule 168 (primary -> numeric .)
    EQ              reduce using rule 168 (primary -> numeric .)
    EQR             reduce using rule 168 (primary -> numeric .)
    NE              reduce using rule 168 (primary -> numeric .)
    NER             reduce using rule 168 (primary -> numeric .)
    INSTANCEOF      reduce using rule 168 (primary -> numeric .)
    ELVIS           reduce using rule 168 (primary -> numeric .)
    ASSIGN          reduce using rule 168 (primary -> numeric .)
    AADD            reduce using rule 168 (primary -> numeric .)
    ASUB            reduce using rule 168 (primary -> numeric .)
    AMUL            reduce using rule 168 (primary -> numeric .)
    ADIV            reduce using rule 168 (primary -> numeric .)
    AREM            reduce using rule 168 (primary -> numeric .)
    AAND            reduce using rule 168 (primary -> numeric .)
    AXOR            reduce using rule 168 (primary -> numeric .)
    AOR             reduce using rule 168 (primary -> numeric .)
    ALSH            reduce using rule 168 (primary -> numeric .)
    ARSH            reduce using rule 168 (primary -> numeric .)
    AUSH            reduce using rule 168 (primary -> numeric .)
    SEMICOLON       reduce using rule 168 (primary -> numeric .)
    RBRACE          reduce using rule 168 (primary -> numeric .)
    COMMA           reduce using rule 168 (primary -> numeric .)
    COLON           reduce using rule 168 (primary -> numeric .)
    RP              reduce using rule 168 (primary -> numeric .)
    RBRACK          reduce using rule 168 (primary -> numeric .)


state 80

    (169) primary -> boolean .

    LBRACE          reduce using rule 169 (primary -> boolean .)
    DOT             reduce using rule 169 (primary -> boolean .)
    NSDOT           reduce using rule 169 (primary -> boolean .)
    INCR            reduce using rule 169 (primary -> boolean .)
    DECR            reduce using rule 169 (primary -> boolean .)
    COND            reduce using rule 169 (primary -> boolean .)
    MUL             reduce using rule 169 (primary -> boolean .)
    DIV             reduce using rule 169 (primary -> boolean .)
    REM             reduce using rule 169 (primary -> boolean .)
    ADD             reduce using rule 169 (primary -> boolean .)
    SUB             reduce using rule 169 (primary -> boolean .)
    FIND            reduce using rule 169 (primary -> boolean .)
    MATCH           reduce using rule 169 (primary -> boolean .)
    LSH             reduce using rule 169 (primary -> boolean .)
    RSH             reduce using rule 169 (primary -> boolean .)
    USH             reduce using rule 169 (primary -> boolean .)
    BWAND           reduce using rule 169 (primary -> boolean .)
    XOR             reduce using rule 169 (primary -> boolean .)
    BWOR            reduce using rule 169 (primary -> boolean .)
    BOOLAND         reduce using rule 169 (primary -> boolean .)
    BOOLOR          reduce using rule 169 (primary -> boolean .)
    GT              reduce using rule 169 (primary -> boolean .)
    GTE             reduce using rule 169 (primary -> boolean .)
    LT              reduce using rule 169 (primary -> boolean .)
    LTE             reduce using rule 169 (primary -> boolean .)
    EQ              reduce using rule 169 (primary -> boolean .)
    EQR             reduce using rule 169 (primary -> boolean .)
    NE              reduce using rule 169 (primary -> boolean .)
    NER             reduce using rule 169 (primary -> boolean .)
    INSTANCEOF      reduce using rule 169 (primary -> boolean .)
    ELVIS           reduce using rule 169 (primary -> boolean .)
    ASSIGN          reduce using rule 169 (primary -> boolean .)
    AADD            reduce using rule 169 (primary -> boolean .)
    ASUB            reduce using rule 169 (primary -> boolean .)
    AMUL            reduce using rule 169 (primary -> boolean .)
    ADIV            reduce using rule 169 (primary -> boolean .)
    AREM            reduce using rule 169 (primary -> boolean .)
    AAND            reduce using rule 169 (primary -> boolean .)
    AXOR            reduce using rule 169 (primary -> boolean .)
    AOR             reduce using rule 169 (primary -> boolean .)
    ALSH            reduce using rule 169 (primary -> boolean .)
    ARSH            reduce using rule 169 (primary -> boolean .)
    AUSH            reduce using rule 169 (primary -> boolean .)
    SEMICOLON       reduce using rule 169 (primary -> boolean .)
    RBRACE          reduce using rule 169 (primary -> boolean .)
    COMMA           reduce using rule 169 (primary -> boolean .)
    COLON           reduce using rule 169 (primary -> boolean .)
    RP              reduce using rule 169 (primary -> boolean .)
    RBRACK          reduce using rule 169 (primary -> boolean .)


state 81

    (170) primary -> null .

    LBRACE          reduce using rule 170 (primary -> null .)
    DOT             reduce using rule 170 (primary -> null .)
    NSDOT           reduce using rule 170 (primary -> null .)
    INCR            reduce using rule 170 (primary -> null .)
    DECR            reduce using rule 170 (primary -> null .)
    COND            reduce using rule 170 (primary -> null .)
    MUL             reduce using rule 170 (primary -> null .)
    DIV             reduce using rule 170 (primary -> null .)
    REM             reduce using rule 170 (primary -> null .)
    ADD             reduce using rule 170 (primary -> null .)
    SUB             reduce using rule 170 (primary -> null .)
    FIND            reduce using rule 170 (primary -> null .)
    MATCH           reduce using rule 170 (primary -> null .)
    LSH             reduce using rule 170 (primary -> null .)
    RSH             reduce using rule 170 (primary -> null .)
    USH             reduce using rule 170 (primary -> null .)
    BWAND           reduce using rule 170 (primary -> null .)
    XOR             reduce using rule 170 (primary -> null .)
    BWOR            reduce using rule 170 (primary -> null .)
    BOOLAND         reduce using rule 170 (primary -> null .)
    BOOLOR          reduce using rule 170 (primary -> null .)
    GT              reduce using rule 170 (primary -> null .)
    GTE             reduce using rule 170 (primary -> null .)
    LT              reduce using rule 170 (primary -> null .)
    LTE             reduce using rule 170 (primary -> null .)
    EQ              reduce using rule 170 (primary -> null .)
    EQR             reduce using rule 170 (primary -> null .)
    NE              reduce using rule 170 (primary -> null .)
    NER             reduce using rule 170 (primary -> null .)
    INSTANCEOF      reduce using rule 170 (primary -> null .)
    ELVIS           reduce using rule 170 (primary -> null .)
    ASSIGN          reduce using rule 170 (primary -> null .)
    AADD            reduce using rule 170 (primary -> null .)
    ASUB            reduce using rule 170 (primary -> null .)
    AMUL            reduce using rule 170 (primary -> null .)
    ADIV            reduce using rule 170 (primary -> null .)
    AREM            reduce using rule 170 (primary -> null .)
    AAND            reduce using rule 170 (primary -> null .)
    AXOR            reduce using rule 170 (primary -> null .)
    AOR             reduce using rule 170 (primary -> null .)
    ALSH            reduce using rule 170 (primary -> null .)
    ARSH            reduce using rule 170 (primary -> null .)
    AUSH            reduce using rule 170 (primary -> null .)
    SEMICOLON       reduce using rule 170 (primary -> null .)
    RBRACE          reduce using rule 170 (primary -> null .)
    COMMA           reduce using rule 170 (primary -> null .)
    COLON           reduce using rule 170 (primary -> null .)
    RP              reduce using rule 170 (primary -> null .)
    RBRACK          reduce using rule 170 (primary -> null .)


state 82

    (171) primary -> string .

    LBRACE          reduce using rule 171 (primary -> string .)
    DOT             reduce using rule 171 (primary -> string .)
    NSDOT           reduce using rule 171 (primary -> string .)
    INCR            reduce using rule 171 (primary -> string .)
    DECR            reduce using rule 171 (primary -> string .)
    COND            reduce using rule 171 (primary -> string .)
    MUL             reduce using rule 171 (primary -> string .)
    DIV             reduce using rule 171 (primary -> string .)
    REM             reduce using rule 171 (primary -> string .)
    ADD             reduce using rule 171 (primary -> string .)
    SUB             reduce using rule 171 (primary -> string .)
    FIND            reduce using rule 171 (primary -> string .)
    MATCH           reduce using rule 171 (primary -> string .)
    LSH             reduce using rule 171 (primary -> string .)
    RSH             reduce using rule 171 (primary -> string .)
    USH             reduce using rule 171 (primary -> string .)
    BWAND           reduce using rule 171 (primary -> string .)
    XOR             reduce using rule 171 (primary -> string .)
    BWOR            reduce using rule 171 (primary -> string .)
    BOOLAND         reduce using rule 171 (primary -> string .)
    BOOLOR          reduce using rule 171 (primary -> string .)
    GT              reduce using rule 171 (primary -> string .)
    GTE             reduce using rule 171 (primary -> string .)
    LT              reduce using rule 171 (primary -> string .)
    LTE             reduce using rule 171 (primary -> string .)
    EQ              reduce using rule 171 (primary -> string .)
    EQR             reduce using rule 171 (primary -> string .)
    NE              reduce using rule 171 (primary -> string .)
    NER             reduce using rule 171 (primary -> string .)
    INSTANCEOF      reduce using rule 171 (primary -> string .)
    ELVIS           reduce using rule 171 (primary -> string .)
    ASSIGN          reduce using rule 171 (primary -> string .)
    AADD            reduce using rule 171 (primary -> string .)
    ASUB            reduce using rule 171 (primary -> string .)
    AMUL            reduce using rule 171 (primary -> string .)
    ADIV            reduce using rule 171 (primary -> string .)
    AREM            reduce using rule 171 (primary -> string .)
    AAND            reduce using rule 171 (primary -> string .)
    AXOR            reduce using rule 171 (primary -> string .)
    AOR             reduce using rule 171 (primary -> string .)
    ALSH            reduce using rule 171 (primary -> string .)
    ARSH            reduce using rule 171 (primary -> string .)
    AUSH            reduce using rule 171 (primary -> string .)
    SEMICOLON       reduce using rule 171 (primary -> string .)
    RBRACE          reduce using rule 171 (primary -> string .)
    COMMA           reduce using rule 171 (primary -> string .)
    COLON           reduce using rule 171 (primary -> string .)
    RP              reduce using rule 171 (primary -> string .)
    RBRACK          reduce using rule 171 (primary -> string .)


state 83

    (172) primary -> regex .

    LBRACE          reduce using rule 172 (primary -> regex .)
    DOT             reduce using rule 172 (primary -> regex .)
    NSDOT           reduce using rule 172 (primary -> regex .)
    INCR            reduce using rule 172 (primary -> regex .)
    DECR            reduce using rule 172 (primary -> regex .)
    COND            reduce using rule 172 (primary -> regex .)
    MUL             reduce using rule 172 (primary -> regex .)
    DIV             reduce using rule 172 (primary -> regex .)
    REM             reduce using rule 172 (primary -> regex .)
    ADD             reduce using rule 172 (primary -> regex .)
    SUB             reduce using rule 172 (primary -> regex .)
    FIND            reduce using rule 172 (primary -> regex .)
    MATCH           reduce using rule 172 (primary -> regex .)
    LSH             reduce using rule 172 (primary -> regex .)
    RSH             reduce using rule 172 (primary -> regex .)
    USH             reduce using rule 172 (primary -> regex .)
    BWAND           reduce using rule 172 (primary -> regex .)
    XOR             reduce using rule 172 (primary -> regex .)
    BWOR            reduce using rule 172 (primary -> regex .)
    BOOLAND         reduce using rule 172 (primary -> regex .)
    BOOLOR          reduce using rule 172 (primary -> regex .)
    GT              reduce using rule 172 (primary -> regex .)
    GTE             reduce using rule 172 (primary -> regex .)
    LT              reduce using rule 172 (primary -> regex .)
    LTE             reduce using rule 172 (primary -> regex .)
    EQ              reduce using rule 172 (primary -> regex .)
    EQR             reduce using rule 172 (primary -> regex .)
    NE              reduce using rule 172 (primary -> regex .)
    NER             reduce using rule 172 (primary -> regex .)
    INSTANCEOF      reduce using rule 172 (primary -> regex .)
    ELVIS           reduce using rule 172 (primary -> regex .)
    ASSIGN          reduce using rule 172 (primary -> regex .)
    AADD            reduce using rule 172 (primary -> regex .)
    ASUB            reduce using rule 172 (primary -> regex .)
    AMUL            reduce using rule 172 (primary -> regex .)
    ADIV            reduce using rule 172 (primary -> regex .)
    AREM            reduce using rule 172 (primary -> regex .)
    AAND            reduce using rule 172 (primary -> regex .)
    AXOR            reduce using rule 172 (primary -> regex .)
    AOR             reduce using rule 172 (primary -> regex .)
    ALSH            reduce using rule 172 (primary -> regex .)
    ARSH            reduce using rule 172 (primary -> regex .)
    AUSH            reduce using rule 172 (primary -> regex .)
    SEMICOLON       reduce using rule 172 (primary -> regex .)
    RBRACE          reduce using rule 172 (primary -> regex .)
    COMMA           reduce using rule 172 (primary -> regex .)
    COLON           reduce using rule 172 (primary -> regex .)
    RP              reduce using rule 172 (primary -> regex .)
    RBRACK          reduce using rule 172 (primary -> regex .)


state 84

    (173) primary -> listinitializer .

    LBRACE          reduce using rule 173 (primary -> listinitializer .)
    DOT             reduce using rule 173 (primary -> listinitializer .)
    NSDOT           reduce using rule 173 (primary -> listinitializer .)
    INCR            reduce using rule 173 (primary -> listinitializer .)
    DECR            reduce using rule 173 (primary -> listinitializer .)
    COND            reduce using rule 173 (primary -> listinitializer .)
    MUL             reduce using rule 173 (primary -> listinitializer .)
    DIV             reduce using rule 173 (primary -> listinitializer .)
    REM             reduce using rule 173 (primary -> listinitializer .)
    ADD             reduce using rule 173 (primary -> listinitializer .)
    SUB             reduce using rule 173 (primary -> listinitializer .)
    FIND            reduce using rule 173 (primary -> listinitializer .)
    MATCH           reduce using rule 173 (primary -> listinitializer .)
    LSH             reduce using rule 173 (primary -> listinitializer .)
    RSH             reduce using rule 173 (primary -> listinitializer .)
    USH             reduce using rule 173 (primary -> listinitializer .)
    BWAND           reduce using rule 173 (primary -> listinitializer .)
    XOR             reduce using rule 173 (primary -> listinitializer .)
    BWOR            reduce using rule 173 (primary -> listinitializer .)
    BOOLAND         reduce using rule 173 (primary -> listinitializer .)
    BOOLOR          reduce using rule 173 (primary -> listinitializer .)
    GT              reduce using rule 173 (primary -> listinitializer .)
    GTE             reduce using rule 173 (primary -> listinitializer .)
    LT              reduce using rule 173 (primary -> listinitializer .)
    LTE             reduce using rule 173 (primary -> listinitializer .)
    EQ              reduce using rule 173 (primary -> listinitializer .)
    EQR             reduce using rule 173 (primary -> listinitializer .)
    NE              reduce using rule 173 (primary -> listinitializer .)
    NER             reduce using rule 173 (primary -> listinitializer .)
    INSTANCEOF      reduce using rule 173 (primary -> listinitializer .)
    ELVIS           reduce using rule 173 (primary -> listinitializer .)
    ASSIGN          reduce using rule 173 (primary -> listinitializer .)
    AADD            reduce using rule 173 (primary -> listinitializer .)
    ASUB            reduce using rule 173 (primary -> listinitializer .)
    AMUL            reduce using rule 173 (primary -> listinitializer .)
    ADIV            reduce using rule 173 (primary -> listinitializer .)
    AREM            reduce using rule 173 (primary -> listinitializer .)
    AAND            reduce using rule 173 (primary -> listinitializer .)
    AXOR            reduce using rule 173 (primary -> listinitializer .)
    AOR             reduce using rule 173 (primary -> listinitializer .)
    ALSH            reduce using rule 173 (primary -> listinitializer .)
    ARSH            reduce using rule 173 (primary -> listinitializer .)
    AUSH            reduce using rule 173 (primary -> listinitializer .)
    SEMICOLON       reduce using rule 173 (primary -> listinitializer .)
    RBRACE          reduce using rule 173 (primary -> listinitializer .)
    COMMA           reduce using rule 173 (primary -> listinitializer .)
    COLON           reduce using rule 173 (primary -> listinitializer .)
    RP              reduce using rule 173 (primary -> listinitializer .)
    RBRACK          reduce using rule 173 (primary -> listinitializer .)


state 85

    (174) primary -> mapinitializer .

    LBRACE          reduce using rule 174 (primary -> mapinitializer .)
    DOT             reduce using rule 174 (primary -> mapinitializer .)
    NSDOT           reduce using rule 174 (primary -> mapinitializer .)
    INCR            reduce using rule 174 (primary -> mapinitializer .)
    DECR            reduce using rule 174 (primary -> mapinitializer .)
    COND            reduce using rule 174 (primary -> mapinitializer .)
    MUL             reduce using rule 174 (primary -> mapinitializer .)
    DIV             reduce using rule 174 (primary -> mapinitializer .)
    REM             reduce using rule 174 (primary -> mapinitializer .)
    ADD             reduce using rule 174 (primary -> mapinitializer .)
    SUB             reduce using rule 174 (primary -> mapinitializer .)
    FIND            reduce using rule 174 (primary -> mapinitializer .)
    MATCH           reduce using rule 174 (primary -> mapinitializer .)
    LSH             reduce using rule 174 (primary -> mapinitializer .)
    RSH             reduce using rule 174 (primary -> mapinitializer .)
    USH             reduce using rule 174 (primary -> mapinitializer .)
    BWAND           reduce using rule 174 (primary -> mapinitializer .)
    XOR             reduce using rule 174 (primary -> mapinitializer .)
    BWOR            reduce using rule 174 (primary -> mapinitializer .)
    BOOLAND         reduce using rule 174 (primary -> mapinitializer .)
    BOOLOR          reduce using rule 174 (primary -> mapinitializer .)
    GT              reduce using rule 174 (primary -> mapinitializer .)
    GTE             reduce using rule 174 (primary -> mapinitializer .)
    LT              reduce using rule 174 (primary -> mapinitializer .)
    LTE             reduce using rule 174 (primary -> mapinitializer .)
    EQ              reduce using rule 174 (primary -> mapinitializer .)
    EQR             reduce using rule 174 (primary -> mapinitializer .)
    NE              reduce using rule 174 (primary -> mapinitializer .)
    NER             reduce using rule 174 (primary -> mapinitializer .)
    INSTANCEOF      reduce using rule 174 (primary -> mapinitializer .)
    ELVIS           reduce using rule 174 (primary -> mapinitializer .)
    ASSIGN          reduce using rule 174 (primary -> mapinitializer .)
    AADD            reduce using rule 174 (primary -> mapinitializer .)
    ASUB            reduce using rule 174 (primary -> mapinitializer .)
    AMUL            reduce using rule 174 (primary -> mapinitializer .)
    ADIV            reduce using rule 174 (primary -> mapinitializer .)
    AREM            reduce using rule 174 (primary -> mapinitializer .)
    AAND            reduce using rule 174 (primary -> mapinitializer .)
    AXOR            reduce using rule 174 (primary -> mapinitializer .)
    AOR             reduce using rule 174 (primary -> mapinitializer .)
    ALSH            reduce using rule 174 (primary -> mapinitializer .)
    ARSH            reduce using rule 174 (primary -> mapinitializer .)
    AUSH            reduce using rule 174 (primary -> mapinitializer .)
    SEMICOLON       reduce using rule 174 (primary -> mapinitializer .)
    RBRACE          reduce using rule 174 (primary -> mapinitializer .)
    COMMA           reduce using rule 174 (primary -> mapinitializer .)
    COLON           reduce using rule 174 (primary -> mapinitializer .)
    RP              reduce using rule 174 (primary -> mapinitializer .)
    RBRACK          reduce using rule 174 (primary -> mapinitializer .)


state 86

    (175) primary -> calllocal .

    LBRACE          reduce using rule 175 (primary -> calllocal .)
    DOT             reduce using rule 175 (primary -> calllocal .)
    NSDOT           reduce using rule 175 (primary -> calllocal .)
    INCR            reduce using rule 175 (primary -> calllocal .)
    DECR            reduce using rule 175 (primary -> calllocal .)
    COND            reduce using rule 175 (primary -> calllocal .)
    MUL             reduce using rule 175 (primary -> calllocal .)
    DIV             reduce using rule 175 (primary -> calllocal .)
    REM             reduce using rule 175 (primary -> calllocal .)
    ADD             reduce using rule 175 (primary -> calllocal .)
    SUB             reduce using rule 175 (primary -> calllocal .)
    FIND            reduce using rule 175 (primary -> calllocal .)
    MATCH           reduce using rule 175 (primary -> calllocal .)
    LSH             reduce using rule 175 (primary -> calllocal .)
    RSH             reduce using rule 175 (primary -> calllocal .)
    USH             reduce using rule 175 (primary -> calllocal .)
    BWAND           reduce using rule 175 (primary -> calllocal .)
    XOR             reduce using rule 175 (primary -> calllocal .)
    BWOR            reduce using rule 175 (primary -> calllocal .)
    BOOLAND         reduce using rule 175 (primary -> calllocal .)
    BOOLOR          reduce using rule 175 (primary -> calllocal .)
    GT              reduce using rule 175 (primary -> calllocal .)
    GTE             reduce using rule 175 (primary -> calllocal .)
    LT              reduce using rule 175 (primary -> calllocal .)
    LTE             reduce using rule 175 (primary -> calllocal .)
    EQ              reduce using rule 175 (primary -> calllocal .)
    EQR             reduce using rule 175 (primary -> calllocal .)
    NE              reduce using rule 175 (primary -> calllocal .)
    NER             reduce using rule 175 (primary -> calllocal .)
    INSTANCEOF      reduce using rule 175 (primary -> calllocal .)
    ELVIS           reduce using rule 175 (primary -> calllocal .)
    ASSIGN          reduce using rule 175 (primary -> calllocal .)
    AADD            reduce using rule 175 (primary -> calllocal .)
    ASUB            reduce using rule 175 (primary -> calllocal .)
    AMUL            reduce using rule 175 (primary -> calllocal .)
    ADIV            reduce using rule 175 (primary -> calllocal .)
    AREM            reduce using rule 175 (primary -> calllocal .)
    AAND            reduce using rule 175 (primary -> calllocal .)
    AXOR            reduce using rule 175 (primary -> calllocal .)
    AOR             reduce using rule 175 (primary -> calllocal .)
    ALSH            reduce using rule 175 (primary -> calllocal .)
    ARSH            reduce using rule 175 (primary -> calllocal .)
    AUSH            reduce using rule 175 (primary -> calllocal .)
    SEMICOLON       reduce using rule 175 (primary -> calllocal .)
    RBRACE          reduce using rule 175 (primary -> calllocal .)
    COMMA           reduce using rule 175 (primary -> calllocal .)
    COLON           reduce using rule 175 (primary -> calllocal .)
    RP              reduce using rule 175 (primary -> calllocal .)
    RBRACK          reduce using rule 175 (primary -> calllocal .)


state 87

    (176) primary -> newobject .

    LBRACE          reduce using rule 176 (primary -> newobject .)
    DOT             reduce using rule 176 (primary -> newobject .)
    NSDOT           reduce using rule 176 (primary -> newobject .)
    INCR            reduce using rule 176 (primary -> newobject .)
    DECR            reduce using rule 176 (primary -> newobject .)
    COND            reduce using rule 176 (primary -> newobject .)
    MUL             reduce using rule 176 (primary -> newobject .)
    DIV             reduce using rule 176 (primary -> newobject .)
    REM             reduce using rule 176 (primary -> newobject .)
    ADD             reduce using rule 176 (primary -> newobject .)
    SUB             reduce using rule 176 (primary -> newobject .)
    FIND            reduce using rule 176 (primary -> newobject .)
    MATCH           reduce using rule 176 (primary -> newobject .)
    LSH             reduce using rule 176 (primary -> newobject .)
    RSH             reduce using rule 176 (primary -> newobject .)
    USH             reduce using rule 176 (primary -> newobject .)
    BWAND           reduce using rule 176 (primary -> newobject .)
    XOR             reduce using rule 176 (primary -> newobject .)
    BWOR            reduce using rule 176 (primary -> newobject .)
    BOOLAND         reduce using rule 176 (primary -> newobject .)
    BOOLOR          reduce using rule 176 (primary -> newobject .)
    GT              reduce using rule 176 (primary -> newobject .)
    GTE             reduce using rule 176 (primary -> newobject .)
    LT              reduce using rule 176 (primary -> newobject .)
    LTE             reduce using rule 176 (primary -> newobject .)
    EQ              reduce using rule 176 (primary -> newobject .)
    EQR             reduce using rule 176 (primary -> newobject .)
    NE              reduce using rule 176 (primary -> newobject .)
    NER             reduce using rule 176 (primary -> newobject .)
    INSTANCEOF      reduce using rule 176 (primary -> newobject .)
    ELVIS           reduce using rule 176 (primary -> newobject .)
    ASSIGN          reduce using rule 176 (primary -> newobject .)
    AADD            reduce using rule 176 (primary -> newobject .)
    ASUB            reduce using rule 176 (primary -> newobject .)
    AMUL            reduce using rule 176 (primary -> newobject .)
    ADIV            reduce using rule 176 (primary -> newobject .)
    AREM            reduce using rule 176 (primary -> newobject .)
    AAND            reduce using rule 176 (primary -> newobject .)
    AXOR            reduce using rule 176 (primary -> newobject .)
    AOR             reduce using rule 176 (primary -> newobject .)
    ALSH            reduce using rule 176 (primary -> newobject .)
    ARSH            reduce using rule 176 (primary -> newobject .)
    AUSH            reduce using rule 176 (primary -> newobject .)
    SEMICOLON       reduce using rule 176 (primary -> newobject .)
    RBRACE          reduce using rule 176 (primary -> newobject .)
    COMMA           reduce using rule 176 (primary -> newobject .)
    COLON           reduce using rule 176 (primary -> newobject .)
    RP              reduce using rule 176 (primary -> newobject .)
    RBRACK          reduce using rule 176 (primary -> newobject .)


state 88

    (178) numeric -> octal .

    LBRACE          reduce using rule 178 (numeric -> octal .)
    DOT             reduce using rule 178 (numeric -> octal .)
    NSDOT           reduce using rule 178 (numeric -> octal .)
    INCR            reduce using rule 178 (numeric -> octal .)
    DECR            reduce using rule 178 (numeric -> octal .)
    COND            reduce using rule 178 (numeric -> octal .)
    MUL             reduce using rule 178 (numeric -> octal .)
    DIV             reduce using rule 178 (numeric -> octal .)
    REM             reduce using rule 178 (numeric -> octal .)
    ADD             reduce using rule 178 (numeric -> octal .)
    SUB             reduce using rule 178 (numeric -> octal .)
    FIND            reduce using rule 178 (numeric -> octal .)
    MATCH           reduce using rule 178 (numeric -> octal .)
    LSH             reduce using rule 178 (numeric -> octal .)
    RSH             reduce using rule 178 (numeric -> octal .)
    USH             reduce using rule 178 (numeric -> octal .)
    BWAND           reduce using rule 178 (numeric -> octal .)
    XOR             reduce using rule 178 (numeric -> octal .)
    BWOR            reduce using rule 178 (numeric -> octal .)
    BOOLAND         reduce using rule 178 (numeric -> octal .)
    BOOLOR          reduce using rule 178 (numeric -> octal .)
    GT              reduce using rule 178 (numeric -> octal .)
    GTE             reduce using rule 178 (numeric -> octal .)
    LT              reduce using rule 178 (numeric -> octal .)
    LTE             reduce using rule 178 (numeric -> octal .)
    EQ              reduce using rule 178 (numeric -> octal .)
    EQR             reduce using rule 178 (numeric -> octal .)
    NE              reduce using rule 178 (numeric -> octal .)
    NER             reduce using rule 178 (numeric -> octal .)
    INSTANCEOF      reduce using rule 178 (numeric -> octal .)
    ELVIS           reduce using rule 178 (numeric -> octal .)
    ASSIGN          reduce using rule 178 (numeric -> octal .)
    AADD            reduce using rule 178 (numeric -> octal .)
    ASUB            reduce using rule 178 (numeric -> octal .)
    AMUL            reduce using rule 178 (numeric -> octal .)
    ADIV            reduce using rule 178 (numeric -> octal .)
    AREM            reduce using rule 178 (numeric -> octal .)
    AAND            reduce using rule 178 (numeric -> octal .)
    AXOR            reduce using rule 178 (numeric -> octal .)
    AOR             reduce using rule 178 (numeric -> octal .)
    ALSH            reduce using rule 178 (numeric -> octal .)
    ARSH            reduce using rule 178 (numeric -> octal .)
    AUSH            reduce using rule 178 (numeric -> octal .)
    SEMICOLON       reduce using rule 178 (numeric -> octal .)
    RBRACE          reduce using rule 178 (numeric -> octal .)
    COMMA           reduce using rule 178 (numeric -> octal .)
    COLON           reduce using rule 178 (numeric -> octal .)
    RP              reduce using rule 178 (numeric -> octal .)
    RBRACK          reduce using rule 178 (numeric -> octal .)


state 89

    (179) numeric -> hex .

    LBRACE          reduce using rule 179 (numeric -> hex .)
    DOT             reduce using rule 179 (numeric -> hex .)
    NSDOT           reduce using rule 179 (numeric -> hex .)
    INCR            reduce using rule 179 (numeric -> hex .)
    DECR            reduce using rule 179 (numeric -> hex .)
    COND            reduce using rule 179 (numeric -> hex .)
    MUL             reduce using rule 179 (numeric -> hex .)
    DIV             reduce using rule 179 (numeric -> hex .)
    REM             reduce using rule 179 (numeric -> hex .)
    ADD             reduce using rule 179 (numeric -> hex .)
    SUB             reduce using rule 179 (numeric -> hex .)
    FIND            reduce using rule 179 (numeric -> hex .)
    MATCH           reduce using rule 179 (numeric -> hex .)
    LSH             reduce using rule 179 (numeric -> hex .)
    RSH             reduce using rule 179 (numeric -> hex .)
    USH             reduce using rule 179 (numeric -> hex .)
    BWAND           reduce using rule 179 (numeric -> hex .)
    XOR             reduce using rule 179 (numeric -> hex .)
    BWOR            reduce using rule 179 (numeric -> hex .)
    BOOLAND         reduce using rule 179 (numeric -> hex .)
    BOOLOR          reduce using rule 179 (numeric -> hex .)
    GT              reduce using rule 179 (numeric -> hex .)
    GTE             reduce using rule 179 (numeric -> hex .)
    LT              reduce using rule 179 (numeric -> hex .)
    LTE             reduce using rule 179 (numeric -> hex .)
    EQ              reduce using rule 179 (numeric -> hex .)
    EQR             reduce using rule 179 (numeric -> hex .)
    NE              reduce using rule 179 (numeric -> hex .)
    NER             reduce using rule 179 (numeric -> hex .)
    INSTANCEOF      reduce using rule 179 (numeric -> hex .)
    ELVIS           reduce using rule 179 (numeric -> hex .)
    ASSIGN          reduce using rule 179 (numeric -> hex .)
    AADD            reduce using rule 179 (numeric -> hex .)
    ASUB            reduce using rule 179 (numeric -> hex .)
    AMUL            reduce using rule 179 (numeric -> hex .)
    ADIV            reduce using rule 179 (numeric -> hex .)
    AREM            reduce using rule 179 (numeric -> hex .)
    AAND            reduce using rule 179 (numeric -> hex .)
    AXOR            reduce using rule 179 (numeric -> hex .)
    AOR             reduce using rule 179 (numeric -> hex .)
    ALSH            reduce using rule 179 (numeric -> hex .)
    ARSH            reduce using rule 179 (numeric -> hex .)
    AUSH            reduce using rule 179 (numeric -> hex .)
    SEMICOLON       reduce using rule 179 (numeric -> hex .)
    RBRACE          reduce using rule 179 (numeric -> hex .)
    COMMA           reduce using rule 179 (numeric -> hex .)
    COLON           reduce using rule 179 (numeric -> hex .)
    RP              reduce using rule 179 (numeric -> hex .)
    RBRACK          reduce using rule 179 (numeric -> hex .)


state 90

    (180) numeric -> integer .

    LBRACE          reduce using rule 180 (numeric -> integer .)
    DOT             reduce using rule 180 (numeric -> integer .)
    NSDOT           reduce using rule 180 (numeric -> integer .)
    INCR            reduce using rule 180 (numeric -> integer .)
    DECR            reduce using rule 180 (numeric -> integer .)
    COND            reduce using rule 180 (numeric -> integer .)
    MUL             reduce using rule 180 (numeric -> integer .)
    DIV             reduce using rule 180 (numeric -> integer .)
    REM             reduce using rule 180 (numeric -> integer .)
    ADD             reduce using rule 180 (numeric -> integer .)
    SUB             reduce using rule 180 (numeric -> integer .)
    FIND            reduce using rule 180 (numeric -> integer .)
    MATCH           reduce using rule 180 (numeric -> integer .)
    LSH             reduce using rule 180 (numeric -> integer .)
    RSH             reduce using rule 180 (numeric -> integer .)
    USH             reduce using rule 180 (numeric -> integer .)
    BWAND           reduce using rule 180 (numeric -> integer .)
    XOR             reduce using rule 180 (numeric -> integer .)
    BWOR            reduce using rule 180 (numeric -> integer .)
    BOOLAND         reduce using rule 180 (numeric -> integer .)
    BOOLOR          reduce using rule 180 (numeric -> integer .)
    GT              reduce using rule 180 (numeric -> integer .)
    GTE             reduce using rule 180 (numeric -> integer .)
    LT              reduce using rule 180 (numeric -> integer .)
    LTE             reduce using rule 180 (numeric -> integer .)
    EQ              reduce using rule 180 (numeric -> integer .)
    EQR             reduce using rule 180 (numeric -> integer .)
    NE              reduce using rule 180 (numeric -> integer .)
    NER             reduce using rule 180 (numeric -> integer .)
    INSTANCEOF      reduce using rule 180 (numeric -> integer .)
    ELVIS           reduce using rule 180 (numeric -> integer .)
    ASSIGN          reduce using rule 180 (numeric -> integer .)
    AADD            reduce using rule 180 (numeric -> integer .)
    ASUB            reduce using rule 180 (numeric -> integer .)
    AMUL            reduce using rule 180 (numeric -> integer .)
    ADIV            reduce using rule 180 (numeric -> integer .)
    AREM            reduce using rule 180 (numeric -> integer .)
    AAND            reduce using rule 180 (numeric -> integer .)
    AXOR            reduce using rule 180 (numeric -> integer .)
    AOR             reduce using rule 180 (numeric -> integer .)
    ALSH            reduce using rule 180 (numeric -> integer .)
    ARSH            reduce using rule 180 (numeric -> integer .)
    AUSH            reduce using rule 180 (numeric -> integer .)
    SEMICOLON       reduce using rule 180 (numeric -> integer .)
    RBRACE          reduce using rule 180 (numeric -> integer .)
    COMMA           reduce using rule 180 (numeric -> integer .)
    COLON           reduce using rule 180 (numeric -> integer .)
    RP              reduce using rule 180 (numeric -> integer .)
    RBRACK          reduce using rule 180 (numeric -> integer .)


state 91

    (181) numeric -> decimal .

    LBRACE          reduce using rule 181 (numeric -> decimal .)
    DOT             reduce using rule 181 (numeric -> decimal .)
    NSDOT           reduce using rule 181 (numeric -> decimal .)
    INCR            reduce using rule 181 (numeric -> decimal .)
    DECR            reduce using rule 181 (numeric -> decimal .)
    COND            reduce using rule 181 (numeric -> decimal .)
    MUL             reduce using rule 181 (numeric -> decimal .)
    DIV             reduce using rule 181 (numeric -> decimal .)
    REM             reduce using rule 181 (numeric -> decimal .)
    ADD             reduce using rule 181 (numeric -> decimal .)
    SUB             reduce using rule 181 (numeric -> decimal .)
    FIND            reduce using rule 181 (numeric -> decimal .)
    MATCH           reduce using rule 181 (numeric -> decimal .)
    LSH             reduce using rule 181 (numeric -> decimal .)
    RSH             reduce using rule 181 (numeric -> decimal .)
    USH             reduce using rule 181 (numeric -> decimal .)
    BWAND           reduce using rule 181 (numeric -> decimal .)
    XOR             reduce using rule 181 (numeric -> decimal .)
    BWOR            reduce using rule 181 (numeric -> decimal .)
    BOOLAND         reduce using rule 181 (numeric -> decimal .)
    BOOLOR          reduce using rule 181 (numeric -> decimal .)
    GT              reduce using rule 181 (numeric -> decimal .)
    GTE             reduce using rule 181 (numeric -> decimal .)
    LT              reduce using rule 181 (numeric -> decimal .)
    LTE             reduce using rule 181 (numeric -> decimal .)
    EQ              reduce using rule 181 (numeric -> decimal .)
    EQR             reduce using rule 181 (numeric -> decimal .)
    NE              reduce using rule 181 (numeric -> decimal .)
    NER             reduce using rule 181 (numeric -> decimal .)
    INSTANCEOF      reduce using rule 181 (numeric -> decimal .)
    ELVIS           reduce using rule 181 (numeric -> decimal .)
    ASSIGN          reduce using rule 181 (numeric -> decimal .)
    AADD            reduce using rule 181 (numeric -> decimal .)
    ASUB            reduce using rule 181 (numeric -> decimal .)
    AMUL            reduce using rule 181 (numeric -> decimal .)
    ADIV            reduce using rule 181 (numeric -> decimal .)
    AREM            reduce using rule 181 (numeric -> decimal .)
    AAND            reduce using rule 181 (numeric -> decimal .)
    AXOR            reduce using rule 181 (numeric -> decimal .)
    AOR             reduce using rule 181 (numeric -> decimal .)
    ALSH            reduce using rule 181 (numeric -> decimal .)
    ARSH            reduce using rule 181 (numeric -> decimal .)
    AUSH            reduce using rule 181 (numeric -> decimal .)
    SEMICOLON       reduce using rule 181 (numeric -> decimal .)
    RBRACE          reduce using rule 181 (numeric -> decimal .)
    COMMA           reduce using rule 181 (numeric -> decimal .)
    COLON           reduce using rule 181 (numeric -> decimal .)
    RP              reduce using rule 181 (numeric -> decimal .)
    RBRACK          reduce using rule 181 (numeric -> decimal .)


state 92

    (186) boolean -> TRUE .

    LBRACE          reduce using rule 186 (boolean -> TRUE .)
    DOT             reduce using rule 186 (boolean -> TRUE .)
    NSDOT           reduce using rule 186 (boolean -> TRUE .)
    INCR            reduce using rule 186 (boolean -> TRUE .)
    DECR            reduce using rule 186 (boolean -> TRUE .)
    COND            reduce using rule 186 (boolean -> TRUE .)
    MUL             reduce using rule 186 (boolean -> TRUE .)
    DIV             reduce using rule 186 (boolean -> TRUE .)
    REM             reduce using rule 186 (boolean -> TRUE .)
    ADD             reduce using rule 186 (boolean -> TRUE .)
    SUB             reduce using rule 186 (boolean -> TRUE .)
    FIND            reduce using rule 186 (boolean -> TRUE .)
    MATCH           reduce using rule 186 (boolean -> TRUE .)
    LSH             reduce using rule 186 (boolean -> TRUE .)
    RSH             reduce using rule 186 (boolean -> TRUE .)
    USH             reduce using rule 186 (boolean -> TRUE .)
    BWAND           reduce using rule 186 (boolean -> TRUE .)
    XOR             reduce using rule 186 (boolean -> TRUE .)
    BWOR            reduce using rule 186 (boolean -> TRUE .)
    BOOLAND         reduce using rule 186 (boolean -> TRUE .)
    BOOLOR          reduce using rule 186 (boolean -> TRUE .)
    GT              reduce using rule 186 (boolean -> TRUE .)
    GTE             reduce using rule 186 (boolean -> TRUE .)
    LT              reduce using rule 186 (boolean -> TRUE .)
    LTE             reduce using rule 186 (boolean -> TRUE .)
    EQ              reduce using rule 186 (boolean -> TRUE .)
    EQR             reduce using rule 186 (boolean -> TRUE .)
    NE              reduce using rule 186 (boolean -> TRUE .)
    NER             reduce using rule 186 (boolean -> TRUE .)
    INSTANCEOF      reduce using rule 186 (boolean -> TRUE .)
    ELVIS           reduce using rule 186 (boolean -> TRUE .)
    ASSIGN          reduce using rule 186 (boolean -> TRUE .)
    AADD            reduce using rule 186 (boolean -> TRUE .)
    ASUB            reduce using rule 186 (boolean -> TRUE .)
    AMUL            reduce using rule 186 (boolean -> TRUE .)
    ADIV            reduce using rule 186 (boolean -> TRUE .)
    AREM            reduce using rule 186 (boolean -> TRUE .)
    AAND            reduce using rule 186 (boolean -> TRUE .)
    AXOR            reduce using rule 186 (boolean -> TRUE .)
    AOR             reduce using rule 186 (boolean -> TRUE .)
    ALSH            reduce using rule 186 (boolean -> TRUE .)
    ARSH            reduce using rule 186 (boolean -> TRUE .)
    AUSH            reduce using rule 186 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 186 (boolean -> TRUE .)
    RBRACE          reduce using rule 186 (boolean -> TRUE .)
    COMMA           reduce using rule 186 (boolean -> TRUE .)
    COLON           reduce using rule 186 (boolean -> TRUE .)
    RP              reduce using rule 186 (boolean -> TRUE .)
    RBRACK          reduce using rule 186 (boolean -> TRUE .)


state 93

    (187) boolean -> FALSE .

    LBRACE          reduce using rule 187 (boolean -> FALSE .)
    DOT             reduce using rule 187 (boolean -> FALSE .)
    NSDOT           reduce using rule 187 (boolean -> FALSE .)
    INCR            reduce using rule 187 (boolean -> FALSE .)
    DECR            reduce using rule 187 (boolean -> FALSE .)
    COND            reduce using rule 187 (boolean -> FALSE .)
    MUL             reduce using rule 187 (boolean -> FALSE .)
    DIV             reduce using rule 187 (boolean -> FALSE .)
    REM             reduce using rule 187 (boolean -> FALSE .)
    ADD             reduce using rule 187 (boolean -> FALSE .)
    SUB             reduce using rule 187 (boolean -> FALSE .)
    FIND            reduce using rule 187 (boolean -> FALSE .)
    MATCH           reduce using rule 187 (boolean -> FALSE .)
    LSH             reduce using rule 187 (boolean -> FALSE .)
    RSH             reduce using rule 187 (boolean -> FALSE .)
    USH             reduce using rule 187 (boolean -> FALSE .)
    BWAND           reduce using rule 187 (boolean -> FALSE .)
    XOR             reduce using rule 187 (boolean -> FALSE .)
    BWOR            reduce using rule 187 (boolean -> FALSE .)
    BOOLAND         reduce using rule 187 (boolean -> FALSE .)
    BOOLOR          reduce using rule 187 (boolean -> FALSE .)
    GT              reduce using rule 187 (boolean -> FALSE .)
    GTE             reduce using rule 187 (boolean -> FALSE .)
    LT              reduce using rule 187 (boolean -> FALSE .)
    LTE             reduce using rule 187 (boolean -> FALSE .)
    EQ              reduce using rule 187 (boolean -> FALSE .)
    EQR             reduce using rule 187 (boolean -> FALSE .)
    NE              reduce using rule 187 (boolean -> FALSE .)
    NER             reduce using rule 187 (boolean -> FALSE .)
    INSTANCEOF      reduce using rule 187 (boolean -> FALSE .)
    ELVIS           reduce using rule 187 (boolean -> FALSE .)
    ASSIGN          reduce using rule 187 (boolean -> FALSE .)
    AADD            reduce using rule 187 (boolean -> FALSE .)
    ASUB            reduce using rule 187 (boolean -> FALSE .)
    AMUL            reduce using rule 187 (boolean -> FALSE .)
    ADIV            reduce using rule 187 (boolean -> FALSE .)
    AREM            reduce using rule 187 (boolean -> FALSE .)
    AAND            reduce using rule 187 (boolean -> FALSE .)
    AXOR            reduce using rule 187 (boolean -> FALSE .)
    AOR             reduce using rule 187 (boolean -> FALSE .)
    ALSH            reduce using rule 187 (boolean -> FALSE .)
    ARSH            reduce using rule 187 (boolean -> FALSE .)
    AUSH            reduce using rule 187 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 187 (boolean -> FALSE .)
    RBRACE          reduce using rule 187 (boolean -> FALSE .)
    COMMA           reduce using rule 187 (boolean -> FALSE .)
    COLON           reduce using rule 187 (boolean -> FALSE .)
    RP              reduce using rule 187 (boolean -> FALSE .)
    RBRACK          reduce using rule 187 (boolean -> FALSE .)


state 94

    (188) null -> NULL .

    LBRACE          reduce using rule 188 (null -> NULL .)
    DOT             reduce using rule 188 (null -> NULL .)
    NSDOT           reduce using rule 188 (null -> NULL .)
    INCR            reduce using rule 188 (null -> NULL .)
    DECR            reduce using rule 188 (null -> NULL .)
    COND            reduce using rule 188 (null -> NULL .)
    MUL             reduce using rule 188 (null -> NULL .)
    DIV             reduce using rule 188 (null -> NULL .)
    REM             reduce using rule 188 (null -> NULL .)
    ADD             reduce using rule 188 (null -> NULL .)
    SUB             reduce using rule 188 (null -> NULL .)
    FIND            reduce using rule 188 (null -> NULL .)
    MATCH           reduce using rule 188 (null -> NULL .)
    LSH             reduce using rule 188 (null -> NULL .)
    RSH             reduce using rule 188 (null -> NULL .)
    USH             reduce using rule 188 (null -> NULL .)
    BWAND           reduce using rule 188 (null -> NULL .)
    XOR             reduce using rule 188 (null -> NULL .)
    BWOR            reduce using rule 188 (null -> NULL .)
    BOOLAND         reduce using rule 188 (null -> NULL .)
    BOOLOR          reduce using rule 188 (null -> NULL .)
    GT              reduce using rule 188 (null -> NULL .)
    GTE             reduce using rule 188 (null -> NULL .)
    LT              reduce using rule 188 (null -> NULL .)
    LTE             reduce using rule 188 (null -> NULL .)
    EQ              reduce using rule 188 (null -> NULL .)
    EQR             reduce using rule 188 (null -> NULL .)
    NE              reduce using rule 188 (null -> NULL .)
    NER             reduce using rule 188 (null -> NULL .)
    INSTANCEOF      reduce using rule 188 (null -> NULL .)
    ELVIS           reduce using rule 188 (null -> NULL .)
    ASSIGN          reduce using rule 188 (null -> NULL .)
    AADD            reduce using rule 188 (null -> NULL .)
    ASUB            reduce using rule 188 (null -> NULL .)
    AMUL            reduce using rule 188 (null -> NULL .)
    ADIV            reduce using rule 188 (null -> NULL .)
    AREM            reduce using rule 188 (null -> NULL .)
    AAND            reduce using rule 188 (null -> NULL .)
    AXOR            reduce using rule 188 (null -> NULL .)
    AOR             reduce using rule 188 (null -> NULL .)
    ALSH            reduce using rule 188 (null -> NULL .)
    ARSH            reduce using rule 188 (null -> NULL .)
    AUSH            reduce using rule 188 (null -> NULL .)
    SEMICOLON       reduce using rule 188 (null -> NULL .)
    RBRACE          reduce using rule 188 (null -> NULL .)
    COMMA           reduce using rule 188 (null -> NULL .)
    COLON           reduce using rule 188 (null -> NULL .)
    RP              reduce using rule 188 (null -> NULL .)
    RBRACK          reduce using rule 188 (null -> NULL .)


state 95

    (189) string -> STRING .

    LBRACE          reduce using rule 189 (string -> STRING .)
    DOT             reduce using rule 189 (string -> STRING .)
    NSDOT           reduce using rule 189 (string -> STRING .)
    INCR            reduce using rule 189 (string -> STRING .)
    DECR            reduce using rule 189 (string -> STRING .)
    COND            reduce using rule 189 (string -> STRING .)
    MUL             reduce using rule 189 (string -> STRING .)
    DIV             reduce using rule 189 (string -> STRING .)
    REM             reduce using rule 189 (string -> STRING .)
    ADD             reduce using rule 189 (string -> STRING .)
    SUB             reduce using rule 189 (string -> STRING .)
    FIND            reduce using rule 189 (string -> STRING .)
    MATCH           reduce using rule 189 (string -> STRING .)
    LSH             reduce using rule 189 (string -> STRING .)
    RSH             reduce using rule 189 (string -> STRING .)
    USH             reduce using rule 189 (string -> STRING .)
    BWAND           reduce using rule 189 (string -> STRING .)
    XOR             reduce using rule 189 (string -> STRING .)
    BWOR            reduce using rule 189 (string -> STRING .)
    BOOLAND         reduce using rule 189 (string -> STRING .)
    BOOLOR          reduce using rule 189 (string -> STRING .)
    GT              reduce using rule 189 (string -> STRING .)
    GTE             reduce using rule 189 (string -> STRING .)
    LT              reduce using rule 189 (string -> STRING .)
    LTE             reduce using rule 189 (string -> STRING .)
    EQ              reduce using rule 189 (string -> STRING .)
    EQR             reduce using rule 189 (string -> STRING .)
    NE              reduce using rule 189 (string -> STRING .)
    NER             reduce using rule 189 (string -> STRING .)
    INSTANCEOF      reduce using rule 189 (string -> STRING .)
    ELVIS           reduce using rule 189 (string -> STRING .)
    ASSIGN          reduce using rule 189 (string -> STRING .)
    AADD            reduce using rule 189 (string -> STRING .)
    ASUB            reduce using rule 189 (string -> STRING .)
    AMUL            reduce using rule 189 (string -> STRING .)
    ADIV            reduce using rule 189 (string -> STRING .)
    AREM            reduce using rule 189 (string -> STRING .)
    AAND            reduce using rule 189 (string -> STRING .)
    AXOR            reduce using rule 189 (string -> STRING .)
    AOR             reduce using rule 189 (string -> STRING .)
    ALSH            reduce using rule 189 (string -> STRING .)
    ARSH            reduce using rule 189 (string -> STRING .)
    AUSH            reduce using rule 189 (string -> STRING .)
    SEMICOLON       reduce using rule 189 (string -> STRING .)
    RBRACE          reduce using rule 189 (string -> STRING .)
    COMMA           reduce using rule 189 (string -> STRING .)
    COLON           reduce using rule 189 (string -> STRING .)
    RP              reduce using rule 189 (string -> STRING .)
    RBRACK          reduce using rule 189 (string -> STRING .)


state 96

    (190) regex -> REGEX .

    LBRACE          reduce using rule 190 (regex -> REGEX .)
    DOT             reduce using rule 190 (regex -> REGEX .)
    NSDOT           reduce using rule 190 (regex -> REGEX .)
    INCR            reduce using rule 190 (regex -> REGEX .)
    DECR            reduce using rule 190 (regex -> REGEX .)
    COND            reduce using rule 190 (regex -> REGEX .)
    MUL             reduce using rule 190 (regex -> REGEX .)
    DIV             reduce using rule 190 (regex -> REGEX .)
    REM             reduce using rule 190 (regex -> REGEX .)
    ADD             reduce using rule 190 (regex -> REGEX .)
    SUB             reduce using rule 190 (regex -> REGEX .)
    FIND            reduce using rule 190 (regex -> REGEX .)
    MATCH           reduce using rule 190 (regex -> REGEX .)
    LSH             reduce using rule 190 (regex -> REGEX .)
    RSH             reduce using rule 190 (regex -> REGEX .)
    USH             reduce using rule 190 (regex -> REGEX .)
    BWAND           reduce using rule 190 (regex -> REGEX .)
    XOR             reduce using rule 190 (regex -> REGEX .)
    BWOR            reduce using rule 190 (regex -> REGEX .)
    BOOLAND         reduce using rule 190 (regex -> REGEX .)
    BOOLOR          reduce using rule 190 (regex -> REGEX .)
    GT              reduce using rule 190 (regex -> REGEX .)
    GTE             reduce using rule 190 (regex -> REGEX .)
    LT              reduce using rule 190 (regex -> REGEX .)
    LTE             reduce using rule 190 (regex -> REGEX .)
    EQ              reduce using rule 190 (regex -> REGEX .)
    EQR             reduce using rule 190 (regex -> REGEX .)
    NE              reduce using rule 190 (regex -> REGEX .)
    NER             reduce using rule 190 (regex -> REGEX .)
    INSTANCEOF      reduce using rule 190 (regex -> REGEX .)
    ELVIS           reduce using rule 190 (regex -> REGEX .)
    ASSIGN          reduce using rule 190 (regex -> REGEX .)
    AADD            reduce using rule 190 (regex -> REGEX .)
    ASUB            reduce using rule 190 (regex -> REGEX .)
    AMUL            reduce using rule 190 (regex -> REGEX .)
    ADIV            reduce using rule 190 (regex -> REGEX .)
    AREM            reduce using rule 190 (regex -> REGEX .)
    AAND            reduce using rule 190 (regex -> REGEX .)
    AXOR            reduce using rule 190 (regex -> REGEX .)
    AOR             reduce using rule 190 (regex -> REGEX .)
    ALSH            reduce using rule 190 (regex -> REGEX .)
    ARSH            reduce using rule 190 (regex -> REGEX .)
    AUSH            reduce using rule 190 (regex -> REGEX .)
    SEMICOLON       reduce using rule 190 (regex -> REGEX .)
    RBRACE          reduce using rule 190 (regex -> REGEX .)
    COMMA           reduce using rule 190 (regex -> REGEX .)
    COLON           reduce using rule 190 (regex -> REGEX .)
    RP              reduce using rule 190 (regex -> REGEX .)
    RBRACK          reduce using rule 190 (regex -> REGEX .)


state 97

    (195) calllocal -> DOLLAR . arguments
    (215) arguments -> . LP innerarguments RP
    (216) arguments -> . LP RP

    LP              shift and go to state 110

    arguments                      shift and go to state 197

state 98

    (182) octal -> OCTAL .

    LBRACE          reduce using rule 182 (octal -> OCTAL .)
    DOT             reduce using rule 182 (octal -> OCTAL .)
    NSDOT           reduce using rule 182 (octal -> OCTAL .)
    INCR            reduce using rule 182 (octal -> OCTAL .)
    DECR            reduce using rule 182 (octal -> OCTAL .)
    COND            reduce using rule 182 (octal -> OCTAL .)
    MUL             reduce using rule 182 (octal -> OCTAL .)
    DIV             reduce using rule 182 (octal -> OCTAL .)
    REM             reduce using rule 182 (octal -> OCTAL .)
    ADD             reduce using rule 182 (octal -> OCTAL .)
    SUB             reduce using rule 182 (octal -> OCTAL .)
    FIND            reduce using rule 182 (octal -> OCTAL .)
    MATCH           reduce using rule 182 (octal -> OCTAL .)
    LSH             reduce using rule 182 (octal -> OCTAL .)
    RSH             reduce using rule 182 (octal -> OCTAL .)
    USH             reduce using rule 182 (octal -> OCTAL .)
    BWAND           reduce using rule 182 (octal -> OCTAL .)
    XOR             reduce using rule 182 (octal -> OCTAL .)
    BWOR            reduce using rule 182 (octal -> OCTAL .)
    BOOLAND         reduce using rule 182 (octal -> OCTAL .)
    BOOLOR          reduce using rule 182 (octal -> OCTAL .)
    GT              reduce using rule 182 (octal -> OCTAL .)
    GTE             reduce using rule 182 (octal -> OCTAL .)
    LT              reduce using rule 182 (octal -> OCTAL .)
    LTE             reduce using rule 182 (octal -> OCTAL .)
    EQ              reduce using rule 182 (octal -> OCTAL .)
    EQR             reduce using rule 182 (octal -> OCTAL .)
    NE              reduce using rule 182 (octal -> OCTAL .)
    NER             reduce using rule 182 (octal -> OCTAL .)
    INSTANCEOF      reduce using rule 182 (octal -> OCTAL .)
    ELVIS           reduce using rule 182 (octal -> OCTAL .)
    ASSIGN          reduce using rule 182 (octal -> OCTAL .)
    AADD            reduce using rule 182 (octal -> OCTAL .)
    ASUB            reduce using rule 182 (octal -> OCTAL .)
    AMUL            reduce using rule 182 (octal -> OCTAL .)
    ADIV            reduce using rule 182 (octal -> OCTAL .)
    AREM            reduce using rule 182 (octal -> OCTAL .)
    AAND            reduce using rule 182 (octal -> OCTAL .)
    AXOR            reduce using rule 182 (octal -> OCTAL .)
    AOR             reduce using rule 182 (octal -> OCTAL .)
    ALSH            reduce using rule 182 (octal -> OCTAL .)
    ARSH            reduce using rule 182 (octal -> OCTAL .)
    AUSH            reduce using rule 182 (octal -> OCTAL .)
    SEMICOLON       reduce using rule 182 (octal -> OCTAL .)
    RBRACE          reduce using rule 182 (octal -> OCTAL .)
    COMMA           reduce using rule 182 (octal -> OCTAL .)
    COLON           reduce using rule 182 (octal -> OCTAL .)
    RP              reduce using rule 182 (octal -> OCTAL .)
    RBRACK          reduce using rule 182 (octal -> OCTAL .)


state 99

    (183) hex -> HEX .

    LBRACE          reduce using rule 183 (hex -> HEX .)
    DOT             reduce using rule 183 (hex -> HEX .)
    NSDOT           reduce using rule 183 (hex -> HEX .)
    INCR            reduce using rule 183 (hex -> HEX .)
    DECR            reduce using rule 183 (hex -> HEX .)
    COND            reduce using rule 183 (hex -> HEX .)
    MUL             reduce using rule 183 (hex -> HEX .)
    DIV             reduce using rule 183 (hex -> HEX .)
    REM             reduce using rule 183 (hex -> HEX .)
    ADD             reduce using rule 183 (hex -> HEX .)
    SUB             reduce using rule 183 (hex -> HEX .)
    FIND            reduce using rule 183 (hex -> HEX .)
    MATCH           reduce using rule 183 (hex -> HEX .)
    LSH             reduce using rule 183 (hex -> HEX .)
    RSH             reduce using rule 183 (hex -> HEX .)
    USH             reduce using rule 183 (hex -> HEX .)
    BWAND           reduce using rule 183 (hex -> HEX .)
    XOR             reduce using rule 183 (hex -> HEX .)
    BWOR            reduce using rule 183 (hex -> HEX .)
    BOOLAND         reduce using rule 183 (hex -> HEX .)
    BOOLOR          reduce using rule 183 (hex -> HEX .)
    GT              reduce using rule 183 (hex -> HEX .)
    GTE             reduce using rule 183 (hex -> HEX .)
    LT              reduce using rule 183 (hex -> HEX .)
    LTE             reduce using rule 183 (hex -> HEX .)
    EQ              reduce using rule 183 (hex -> HEX .)
    EQR             reduce using rule 183 (hex -> HEX .)
    NE              reduce using rule 183 (hex -> HEX .)
    NER             reduce using rule 183 (hex -> HEX .)
    INSTANCEOF      reduce using rule 183 (hex -> HEX .)
    ELVIS           reduce using rule 183 (hex -> HEX .)
    ASSIGN          reduce using rule 183 (hex -> HEX .)
    AADD            reduce using rule 183 (hex -> HEX .)
    ASUB            reduce using rule 183 (hex -> HEX .)
    AMUL            reduce using rule 183 (hex -> HEX .)
    ADIV            reduce using rule 183 (hex -> HEX .)
    AREM            reduce using rule 183 (hex -> HEX .)
    AAND            reduce using rule 183 (hex -> HEX .)
    AXOR            reduce using rule 183 (hex -> HEX .)
    AOR             reduce using rule 183 (hex -> HEX .)
    ALSH            reduce using rule 183 (hex -> HEX .)
    ARSH            reduce using rule 183 (hex -> HEX .)
    AUSH            reduce using rule 183 (hex -> HEX .)
    SEMICOLON       reduce using rule 183 (hex -> HEX .)
    RBRACE          reduce using rule 183 (hex -> HEX .)
    COMMA           reduce using rule 183 (hex -> HEX .)
    COLON           reduce using rule 183 (hex -> HEX .)
    RP              reduce using rule 183 (hex -> HEX .)
    RBRACK          reduce using rule 183 (hex -> HEX .)


state 100

    (184) integer -> INTEGER .

    LBRACE          reduce using rule 184 (integer -> INTEGER .)
    DOT             reduce using rule 184 (integer -> INTEGER .)
    NSDOT           reduce using rule 184 (integer -> INTEGER .)
    INCR            reduce using rule 184 (integer -> INTEGER .)
    DECR            reduce using rule 184 (integer -> INTEGER .)
    COND            reduce using rule 184 (integer -> INTEGER .)
    MUL             reduce using rule 184 (integer -> INTEGER .)
    DIV             reduce using rule 184 (integer -> INTEGER .)
    REM             reduce using rule 184 (integer -> INTEGER .)
    ADD             reduce using rule 184 (integer -> INTEGER .)
    SUB             reduce using rule 184 (integer -> INTEGER .)
    FIND            reduce using rule 184 (integer -> INTEGER .)
    MATCH           reduce using rule 184 (integer -> INTEGER .)
    LSH             reduce using rule 184 (integer -> INTEGER .)
    RSH             reduce using rule 184 (integer -> INTEGER .)
    USH             reduce using rule 184 (integer -> INTEGER .)
    BWAND           reduce using rule 184 (integer -> INTEGER .)
    XOR             reduce using rule 184 (integer -> INTEGER .)
    BWOR            reduce using rule 184 (integer -> INTEGER .)
    BOOLAND         reduce using rule 184 (integer -> INTEGER .)
    BOOLOR          reduce using rule 184 (integer -> INTEGER .)
    GT              reduce using rule 184 (integer -> INTEGER .)
    GTE             reduce using rule 184 (integer -> INTEGER .)
    LT              reduce using rule 184 (integer -> INTEGER .)
    LTE             reduce using rule 184 (integer -> INTEGER .)
    EQ              reduce using rule 184 (integer -> INTEGER .)
    EQR             reduce using rule 184 (integer -> INTEGER .)
    NE              reduce using rule 184 (integer -> INTEGER .)
    NER             reduce using rule 184 (integer -> INTEGER .)
    INSTANCEOF      reduce using rule 184 (integer -> INTEGER .)
    ELVIS           reduce using rule 184 (integer -> INTEGER .)
    ASSIGN          reduce using rule 184 (integer -> INTEGER .)
    AADD            reduce using rule 184 (integer -> INTEGER .)
    ASUB            reduce using rule 184 (integer -> INTEGER .)
    AMUL            reduce using rule 184 (integer -> INTEGER .)
    ADIV            reduce using rule 184 (integer -> INTEGER .)
    AREM            reduce using rule 184 (integer -> INTEGER .)
    AAND            reduce using rule 184 (integer -> INTEGER .)
    AXOR            reduce using rule 184 (integer -> INTEGER .)
    AOR             reduce using rule 184 (integer -> INTEGER .)
    ALSH            reduce using rule 184 (integer -> INTEGER .)
    ARSH            reduce using rule 184 (integer -> INTEGER .)
    AUSH            reduce using rule 184 (integer -> INTEGER .)
    SEMICOLON       reduce using rule 184 (integer -> INTEGER .)
    RBRACE          reduce using rule 184 (integer -> INTEGER .)
    COMMA           reduce using rule 184 (integer -> INTEGER .)
    COLON           reduce using rule 184 (integer -> INTEGER .)
    RP              reduce using rule 184 (integer -> INTEGER .)
    RBRACK          reduce using rule 184 (integer -> INTEGER .)


state 101

    (185) decimal -> DECIMAL .

    LBRACE          reduce using rule 185 (decimal -> DECIMAL .)
    DOT             reduce using rule 185 (decimal -> DECIMAL .)
    NSDOT           reduce using rule 185 (decimal -> DECIMAL .)
    INCR            reduce using rule 185 (decimal -> DECIMAL .)
    DECR            reduce using rule 185 (decimal -> DECIMAL .)
    COND            reduce using rule 185 (decimal -> DECIMAL .)
    MUL             reduce using rule 185 (decimal -> DECIMAL .)
    DIV             reduce using rule 185 (decimal -> DECIMAL .)
    REM             reduce using rule 185 (decimal -> DECIMAL .)
    ADD             reduce using rule 185 (decimal -> DECIMAL .)
    SUB             reduce using rule 185 (decimal -> DECIMAL .)
    FIND            reduce using rule 185 (decimal -> DECIMAL .)
    MATCH           reduce using rule 185 (decimal -> DECIMAL .)
    LSH             reduce using rule 185 (decimal -> DECIMAL .)
    RSH             reduce using rule 185 (decimal -> DECIMAL .)
    USH             reduce using rule 185 (decimal -> DECIMAL .)
    BWAND           reduce using rule 185 (decimal -> DECIMAL .)
    XOR             reduce using rule 185 (decimal -> DECIMAL .)
    BWOR            reduce using rule 185 (decimal -> DECIMAL .)
    BOOLAND         reduce using rule 185 (decimal -> DECIMAL .)
    BOOLOR          reduce using rule 185 (decimal -> DECIMAL .)
    GT              reduce using rule 185 (decimal -> DECIMAL .)
    GTE             reduce using rule 185 (decimal -> DECIMAL .)
    LT              reduce using rule 185 (decimal -> DECIMAL .)
    LTE             reduce using rule 185 (decimal -> DECIMAL .)
    EQ              reduce using rule 185 (decimal -> DECIMAL .)
    EQR             reduce using rule 185 (decimal -> DECIMAL .)
    NE              reduce using rule 185 (decimal -> DECIMAL .)
    NER             reduce using rule 185 (decimal -> DECIMAL .)
    INSTANCEOF      reduce using rule 185 (decimal -> DECIMAL .)
    ELVIS           reduce using rule 185 (decimal -> DECIMAL .)
    ASSIGN          reduce using rule 185 (decimal -> DECIMAL .)
    AADD            reduce using rule 185 (decimal -> DECIMAL .)
    ASUB            reduce using rule 185 (decimal -> DECIMAL .)
    AMUL            reduce using rule 185 (decimal -> DECIMAL .)
    ADIV            reduce using rule 185 (decimal -> DECIMAL .)
    AREM            reduce using rule 185 (decimal -> DECIMAL .)
    AAND            reduce using rule 185 (decimal -> DECIMAL .)
    AXOR            reduce using rule 185 (decimal -> DECIMAL .)
    AOR             reduce using rule 185 (decimal -> DECIMAL .)
    ALSH            reduce using rule 185 (decimal -> DECIMAL .)
    ARSH            reduce using rule 185 (decimal -> DECIMAL .)
    AUSH            reduce using rule 185 (decimal -> DECIMAL .)
    SEMICOLON       reduce using rule 185 (decimal -> DECIMAL .)
    RBRACE          reduce using rule 185 (decimal -> DECIMAL .)
    COMMA           reduce using rule 185 (decimal -> DECIMAL .)
    COLON           reduce using rule 185 (decimal -> DECIMAL .)
    RP              reduce using rule 185 (decimal -> DECIMAL .)
    RBRACK          reduce using rule 185 (decimal -> DECIMAL .)


state 102

    (1) source -> functions statements .
    (13) statements -> statements . statement
    (15) statement -> . rstatement
    (16) statement -> . dstatement SEMICOLON
    (17) rstatement -> . if_else
    (18) rstatement -> . if
    (19) rstatement -> . while
    (20) rstatement -> . for
    (21) rstatement -> . each
    (22) rstatement -> . ineach
    (23) rstatement -> . try
    (31) dstatement -> . do
    (32) dstatement -> . declaration
    (33) dstatement -> . continue
    (34) dstatement -> . break
    (35) dstatement -> . return
    (36) dstatement -> . throw
    (37) dstatement -> . expression
    (25) if_else -> . IF LP expression RP trailer ELSE trailer
    (24) if -> . IF LP expression RP trailer
    (26) while -> . WHILE LP expression RP trailer_or_empty
    (27) for -> . FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty
    (28) each -> . FOR LP decltype ID COLON expression RP trailer
    (29) ineach -> . FOR LP ID IN expression RP trailer
    (30) try -> . TRY block traps
    (38) do -> . DO block WHILE LP expression RP
    (57) declaration -> . decltype declvars
    (39) continue -> . CONTINUE
    (40) break -> . BREAK
    (41) return -> . RETURN optional_expression
    (42) throw -> . THROW expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    $end            reduce using rule 1 (source -> functions statements .)
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    TRY             shift and go to state 34
    DO              shift and go to state 35
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 37
    RETURN          shift and go to state 38
    THROW           shift and go to state 39
    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    ID              shift and go to state 7
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    statement                      shift and go to state 104
    rstatement                     shift and go to state 8
    dstatement                     shift and go to state 9
    if_else                        shift and go to state 12
    if                             shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    each                           shift and go to state 16
    ineach                         shift and go to state 17
    try                            shift and go to state 18
    do                             shift and go to state 19
    declaration                    shift and go to state 20
    continue                       shift and go to state 21
    break                          shift and go to state 22
    return                         shift and go to state 23
    throw                          shift and go to state 24
    expression                     shift and go to state 25
    decltype                       shift and go to state 105
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 11
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    idaccess                       shift and go to state 28
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 103

    (5) functions -> functions function .

    DEF             reduce using rule 5 (functions -> functions function .)
    PRIMITIVE       reduce using rule 5 (functions -> functions function .)
    IF              reduce using rule 5 (functions -> functions function .)
    WHILE           reduce using rule 5 (functions -> functions function .)
    FOR             reduce using rule 5 (functions -> functions function .)
    TRY             reduce using rule 5 (functions -> functions function .)
    DO              reduce using rule 5 (functions -> functions function .)
    CONTINUE        reduce using rule 5 (functions -> functions function .)
    BREAK           reduce using rule 5 (functions -> functions function .)
    RETURN          reduce using rule 5 (functions -> functions function .)
    THROW           reduce using rule 5 (functions -> functions function .)
    ID              reduce using rule 5 (functions -> functions function .)
    INCR            reduce using rule 5 (functions -> functions function .)
    DECR            reduce using rule 5 (functions -> functions function .)
    ADD             reduce using rule 5 (functions -> functions function .)
    SUB             reduce using rule 5 (functions -> functions function .)
    BOOLNOT         reduce using rule 5 (functions -> functions function .)
    BWNOT           reduce using rule 5 (functions -> functions function .)
    LP              reduce using rule 5 (functions -> functions function .)
    NEW             reduce using rule 5 (functions -> functions function .)
    TRUE            reduce using rule 5 (functions -> functions function .)
    FALSE           reduce using rule 5 (functions -> functions function .)
    NULL            reduce using rule 5 (functions -> functions function .)
    STRING          reduce using rule 5 (functions -> functions function .)
    REGEX           reduce using rule 5 (functions -> functions function .)
    LBRACE          reduce using rule 5 (functions -> functions function .)
    DOLLAR          reduce using rule 5 (functions -> functions function .)
    OCTAL           reduce using rule 5 (functions -> functions function .)
    HEX             reduce using rule 5 (functions -> functions function .)
    INTEGER         reduce using rule 5 (functions -> functions function .)
    DECIMAL         reduce using rule 5 (functions -> functions function .)
    $end            reduce using rule 5 (functions -> functions function .)


state 104

    (13) statements -> statements statement .

    IF              reduce using rule 13 (statements -> statements statement .)
    WHILE           reduce using rule 13 (statements -> statements statement .)
    FOR             reduce using rule 13 (statements -> statements statement .)
    TRY             reduce using rule 13 (statements -> statements statement .)
    DO              reduce using rule 13 (statements -> statements statement .)
    CONTINUE        reduce using rule 13 (statements -> statements statement .)
    BREAK           reduce using rule 13 (statements -> statements statement .)
    RETURN          reduce using rule 13 (statements -> statements statement .)
    THROW           reduce using rule 13 (statements -> statements statement .)
    DEF             reduce using rule 13 (statements -> statements statement .)
    PRIMITIVE       reduce using rule 13 (statements -> statements statement .)
    ID              reduce using rule 13 (statements -> statements statement .)
    INCR            reduce using rule 13 (statements -> statements statement .)
    DECR            reduce using rule 13 (statements -> statements statement .)
    ADD             reduce using rule 13 (statements -> statements statement .)
    SUB             reduce using rule 13 (statements -> statements statement .)
    BOOLNOT         reduce using rule 13 (statements -> statements statement .)
    BWNOT           reduce using rule 13 (statements -> statements statement .)
    LP              reduce using rule 13 (statements -> statements statement .)
    NEW             reduce using rule 13 (statements -> statements statement .)
    TRUE            reduce using rule 13 (statements -> statements statement .)
    FALSE           reduce using rule 13 (statements -> statements statement .)
    NULL            reduce using rule 13 (statements -> statements statement .)
    STRING          reduce using rule 13 (statements -> statements statement .)
    REGEX           reduce using rule 13 (statements -> statements statement .)
    LBRACE          reduce using rule 13 (statements -> statements statement .)
    DOLLAR          reduce using rule 13 (statements -> statements statement .)
    OCTAL           reduce using rule 13 (statements -> statements statement .)
    HEX             reduce using rule 13 (statements -> statements statement .)
    INTEGER         reduce using rule 13 (statements -> statements statement .)
    DECIMAL         reduce using rule 13 (statements -> statements statement .)
    $end            reduce using rule 13 (statements -> statements statement .)
    RBRACK          reduce using rule 13 (statements -> statements statement .)


state 105

    (57) declaration -> decltype . declvars
    (67) declvars -> . declvars COMMA declvar
    (68) declvars -> . declvar
    (69) declvar -> . ID ASSIGN expression
    (70) declvar -> . ID

    ID              shift and go to state 198

    declvars                       shift and go to state 107
    declvar                        shift and go to state 108

state 106

    (7) function -> decltype ID . parameters block
    (69) declvar -> ID . ASSIGN expression
    (70) declvar -> ID .
    (8) parameters -> . LP innerparameters RP
    (9) parameters -> . LP RP

    ASSIGN          shift and go to state 200
    COMMA           reduce using rule 70 (declvar -> ID .)
    SEMICOLON       reduce using rule 70 (declvar -> ID .)
    LP              shift and go to state 201

    parameters                     shift and go to state 199

state 107

    (57) declaration -> decltype declvars .
    (67) declvars -> declvars . COMMA declvar

    SEMICOLON       reduce using rule 57 (declaration -> decltype declvars .)
    RBRACK          reduce using rule 57 (declaration -> decltype declvars .)
    COMMA           shift and go to state 202


state 108

    (68) declvars -> declvar .

    COMMA           reduce using rule 68 (declvars -> declvar .)
    SEMICOLON       reduce using rule 68 (declvars -> declvar .)
    RBRACK          reduce using rule 68 (declvars -> declvar .)


state 109

    (194) calllocal -> ID arguments .

    LBRACE          reduce using rule 194 (calllocal -> ID arguments .)
    DOT             reduce using rule 194 (calllocal -> ID arguments .)
    NSDOT           reduce using rule 194 (calllocal -> ID arguments .)
    INCR            reduce using rule 194 (calllocal -> ID arguments .)
    DECR            reduce using rule 194 (calllocal -> ID arguments .)
    COND            reduce using rule 194 (calllocal -> ID arguments .)
    MUL             reduce using rule 194 (calllocal -> ID arguments .)
    DIV             reduce using rule 194 (calllocal -> ID arguments .)
    REM             reduce using rule 194 (calllocal -> ID arguments .)
    ADD             reduce using rule 194 (calllocal -> ID arguments .)
    SUB             reduce using rule 194 (calllocal -> ID arguments .)
    FIND            reduce using rule 194 (calllocal -> ID arguments .)
    MATCH           reduce using rule 194 (calllocal -> ID arguments .)
    LSH             reduce using rule 194 (calllocal -> ID arguments .)
    RSH             reduce using rule 194 (calllocal -> ID arguments .)
    USH             reduce using rule 194 (calllocal -> ID arguments .)
    BWAND           reduce using rule 194 (calllocal -> ID arguments .)
    XOR             reduce using rule 194 (calllocal -> ID arguments .)
    BWOR            reduce using rule 194 (calllocal -> ID arguments .)
    BOOLAND         reduce using rule 194 (calllocal -> ID arguments .)
    BOOLOR          reduce using rule 194 (calllocal -> ID arguments .)
    GT              reduce using rule 194 (calllocal -> ID arguments .)
    GTE             reduce using rule 194 (calllocal -> ID arguments .)
    LT              reduce using rule 194 (calllocal -> ID arguments .)
    LTE             reduce using rule 194 (calllocal -> ID arguments .)
    EQ              reduce using rule 194 (calllocal -> ID arguments .)
    EQR             reduce using rule 194 (calllocal -> ID arguments .)
    NE              reduce using rule 194 (calllocal -> ID arguments .)
    NER             reduce using rule 194 (calllocal -> ID arguments .)
    INSTANCEOF      reduce using rule 194 (calllocal -> ID arguments .)
    ELVIS           reduce using rule 194 (calllocal -> ID arguments .)
    ASSIGN          reduce using rule 194 (calllocal -> ID arguments .)
    AADD            reduce using rule 194 (calllocal -> ID arguments .)
    ASUB            reduce using rule 194 (calllocal -> ID arguments .)
    AMUL            reduce using rule 194 (calllocal -> ID arguments .)
    ADIV            reduce using rule 194 (calllocal -> ID arguments .)
    AREM            reduce using rule 194 (calllocal -> ID arguments .)
    AAND            reduce using rule 194 (calllocal -> ID arguments .)
    AXOR            reduce using rule 194 (calllocal -> ID arguments .)
    AOR             reduce using rule 194 (calllocal -> ID arguments .)
    ALSH            reduce using rule 194 (calllocal -> ID arguments .)
    ARSH            reduce using rule 194 (calllocal -> ID arguments .)
    AUSH            reduce using rule 194 (calllocal -> ID arguments .)
    SEMICOLON       reduce using rule 194 (calllocal -> ID arguments .)
    RBRACE          reduce using rule 194 (calllocal -> ID arguments .)
    COMMA           reduce using rule 194 (calllocal -> ID arguments .)
    COLON           reduce using rule 194 (calllocal -> ID arguments .)
    RP              reduce using rule 194 (calllocal -> ID arguments .)
    RBRACK          reduce using rule 194 (calllocal -> ID arguments .)


state 110

    (215) arguments -> LP . innerarguments RP
    (216) arguments -> LP . RP
    (217) innerarguments -> . innerarguments COMMA argument
    (218) innerarguments -> . argument
    (219) argument -> . expression
    (220) argument -> . lambda
    (221) argument -> . funcref
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (222) lambda -> . lamtypes ARROW block
    (223) lambda -> . lamtypes ARROW expression
    (230) funcref -> . classfuncref
    (231) funcref -> . constructorfuncref
    (232) funcref -> . localfuncref
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (224) lamtypes -> . LP innerlamtypes RP
    (225) lamtypes -> . lamtype
    (233) classfuncref -> . decltype REF ID
    (234) constructorfuncref -> . decltype REF NEW
    (235) localfuncref -> . THIS REF ID
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (228) lamtype -> . decltype ID
    (229) lamtype -> . ID
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    RP              shift and go to state 205
    LP              shift and go to state 203
    THIS            shift and go to state 217
    ID              shift and go to state 216
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    innerarguments                 shift and go to state 204
    argument                       shift and go to state 206
    expression                     shift and go to state 207
    lambda                         shift and go to state 208
    funcref                        shift and go to state 209
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    lamtypes                       shift and go to state 210
    classfuncref                   shift and go to state 211
    constructorfuncref             shift and go to state 212
    localfuncref                   shift and go to state 213
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    lamtype                        shift and go to state 214
    decltype                       shift and go to state 215
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 11
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    idaccess                       shift and go to state 28
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 111

    (16) statement -> dstatement SEMICOLON .

    IF              reduce using rule 16 (statement -> dstatement SEMICOLON .)
    WHILE           reduce using rule 16 (statement -> dstatement SEMICOLON .)
    FOR             reduce using rule 16 (statement -> dstatement SEMICOLON .)
    TRY             reduce using rule 16 (statement -> dstatement SEMICOLON .)
    DO              reduce using rule 16 (statement -> dstatement SEMICOLON .)
    CONTINUE        reduce using rule 16 (statement -> dstatement SEMICOLON .)
    BREAK           reduce using rule 16 (statement -> dstatement SEMICOLON .)
    RETURN          reduce using rule 16 (statement -> dstatement SEMICOLON .)
    THROW           reduce using rule 16 (statement -> dstatement SEMICOLON .)
    DEF             reduce using rule 16 (statement -> dstatement SEMICOLON .)
    PRIMITIVE       reduce using rule 16 (statement -> dstatement SEMICOLON .)
    ID              reduce using rule 16 (statement -> dstatement SEMICOLON .)
    INCR            reduce using rule 16 (statement -> dstatement SEMICOLON .)
    DECR            reduce using rule 16 (statement -> dstatement SEMICOLON .)
    ADD             reduce using rule 16 (statement -> dstatement SEMICOLON .)
    SUB             reduce using rule 16 (statement -> dstatement SEMICOLON .)
    BOOLNOT         reduce using rule 16 (statement -> dstatement SEMICOLON .)
    BWNOT           reduce using rule 16 (statement -> dstatement SEMICOLON .)
    LP              reduce using rule 16 (statement -> dstatement SEMICOLON .)
    NEW             reduce using rule 16 (statement -> dstatement SEMICOLON .)
    TRUE            reduce using rule 16 (statement -> dstatement SEMICOLON .)
    FALSE           reduce using rule 16 (statement -> dstatement SEMICOLON .)
    NULL            reduce using rule 16 (statement -> dstatement SEMICOLON .)
    STRING          reduce using rule 16 (statement -> dstatement SEMICOLON .)
    REGEX           reduce using rule 16 (statement -> dstatement SEMICOLON .)
    LBRACE          reduce using rule 16 (statement -> dstatement SEMICOLON .)
    DOLLAR          reduce using rule 16 (statement -> dstatement SEMICOLON .)
    OCTAL           reduce using rule 16 (statement -> dstatement SEMICOLON .)
    HEX             reduce using rule 16 (statement -> dstatement SEMICOLON .)
    INTEGER         reduce using rule 16 (statement -> dstatement SEMICOLON .)
    DECIMAL         reduce using rule 16 (statement -> dstatement SEMICOLON .)
    $end            reduce using rule 16 (statement -> dstatement SEMICOLON .)
    RBRACK          reduce using rule 16 (statement -> dstatement SEMICOLON .)
    ELSE            reduce using rule 16 (statement -> dstatement SEMICOLON .)


state 112

    (58) decltype -> type closedbraces .
    (62) closedbraces -> closedbraces . LBRACE RBRACE

    ID              reduce using rule 58 (decltype -> type closedbraces .)
    REF             reduce using rule 58 (decltype -> type closedbraces .)
    COND            reduce using rule 58 (decltype -> type closedbraces .)
    MUL             reduce using rule 58 (decltype -> type closedbraces .)
    DIV             reduce using rule 58 (decltype -> type closedbraces .)
    REM             reduce using rule 58 (decltype -> type closedbraces .)
    ADD             reduce using rule 58 (decltype -> type closedbraces .)
    SUB             reduce using rule 58 (decltype -> type closedbraces .)
    FIND            reduce using rule 58 (decltype -> type closedbraces .)
    MATCH           reduce using rule 58 (decltype -> type closedbraces .)
    LSH             reduce using rule 58 (decltype -> type closedbraces .)
    RSH             reduce using rule 58 (decltype -> type closedbraces .)
    USH             reduce using rule 58 (decltype -> type closedbraces .)
    BWAND           reduce using rule 58 (decltype -> type closedbraces .)
    XOR             reduce using rule 58 (decltype -> type closedbraces .)
    BWOR            reduce using rule 58 (decltype -> type closedbraces .)
    BOOLAND         reduce using rule 58 (decltype -> type closedbraces .)
    BOOLOR          reduce using rule 58 (decltype -> type closedbraces .)
    GT              reduce using rule 58 (decltype -> type closedbraces .)
    GTE             reduce using rule 58 (decltype -> type closedbraces .)
    LT              reduce using rule 58 (decltype -> type closedbraces .)
    LTE             reduce using rule 58 (decltype -> type closedbraces .)
    EQ              reduce using rule 58 (decltype -> type closedbraces .)
    EQR             reduce using rule 58 (decltype -> type closedbraces .)
    NE              reduce using rule 58 (decltype -> type closedbraces .)
    NER             reduce using rule 58 (decltype -> type closedbraces .)
    INSTANCEOF      reduce using rule 58 (decltype -> type closedbraces .)
    ELVIS           reduce using rule 58 (decltype -> type closedbraces .)
    ASSIGN          reduce using rule 58 (decltype -> type closedbraces .)
    AADD            reduce using rule 58 (decltype -> type closedbraces .)
    ASUB            reduce using rule 58 (decltype -> type closedbraces .)
    AMUL            reduce using rule 58 (decltype -> type closedbraces .)
    ADIV            reduce using rule 58 (decltype -> type closedbraces .)
    AREM            reduce using rule 58 (decltype -> type closedbraces .)
    AAND            reduce using rule 58 (decltype -> type closedbraces .)
    AXOR            reduce using rule 58 (decltype -> type closedbraces .)
    AOR             reduce using rule 58 (decltype -> type closedbraces .)
    ALSH            reduce using rule 58 (decltype -> type closedbraces .)
    ARSH            reduce using rule 58 (decltype -> type closedbraces .)
    AUSH            reduce using rule 58 (decltype -> type closedbraces .)
    SEMICOLON       reduce using rule 58 (decltype -> type closedbraces .)
    RBRACE          reduce using rule 58 (decltype -> type closedbraces .)
    COMMA           reduce using rule 58 (decltype -> type closedbraces .)
    COLON           reduce using rule 58 (decltype -> type closedbraces .)
    RP              reduce using rule 58 (decltype -> type closedbraces .)
    RBRACK          reduce using rule 58 (decltype -> type closedbraces .)
    LBRACE          shift and go to state 218


state 113

    (63) closedbraces -> LBRACE . RBRACE

    RBRACE          shift and go to state 219


state 114

    (166) braceaccess -> idaccess_lbrace . expression RBRACE
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    idaccess_lbrace                shift and go to state 114
    expression                     shift and go to state 116
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 115

    (60) decltype -> idaccess_lbrace RBRACE . closedbraces
    (61) decltype -> idaccess_lbrace RBRACE .
    (62) closedbraces -> . closedbraces LBRACE RBRACE
    (63) closedbraces -> . LBRACE RBRACE

    ID              reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    REF             reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    COND            reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    MUL             reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    DIV             reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    REM             reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    ADD             reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    SUB             reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    FIND            reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    MATCH           reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    LSH             reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    RSH             reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    USH             reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    BWAND           reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    XOR             reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    BWOR            reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    BOOLAND         reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    BOOLOR          reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    GT              reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    GTE             reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    LT              reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    LTE             reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    EQ              reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    EQR             reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    NE              reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    NER             reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    INSTANCEOF      reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    ELVIS           reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    ASSIGN          reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    AADD            reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    ASUB            reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    AMUL            reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    ADIV            reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    AREM            reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    AAND            reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    AXOR            reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    AOR             reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    ALSH            reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    ARSH            reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    AUSH            reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    SEMICOLON       reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    RBRACE          reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    COMMA           reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    COLON           reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    RP              reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    RBRACK          reduce using rule 61 (decltype -> idaccess_lbrace RBRACE .)
    LBRACE          shift and go to state 113

    closedbraces                   shift and go to state 220

state 116

    (166) braceaccess -> idaccess_lbrace expression . RBRACE

    RBRACE          shift and go to state 221


state 117

    (194) calllocal -> ID . arguments
    (192) idaccess -> ID .
    (215) arguments -> . LP innerarguments RP
    (216) arguments -> . LP RP

  ! shift/reduce conflict for LP resolved as shift
    LBRACE          reduce using rule 192 (idaccess -> ID .)
    DOT             reduce using rule 192 (idaccess -> ID .)
    NSDOT           reduce using rule 192 (idaccess -> ID .)
    INCR            reduce using rule 192 (idaccess -> ID .)
    DECR            reduce using rule 192 (idaccess -> ID .)
    COND            reduce using rule 192 (idaccess -> ID .)
    MUL             reduce using rule 192 (idaccess -> ID .)
    DIV             reduce using rule 192 (idaccess -> ID .)
    REM             reduce using rule 192 (idaccess -> ID .)
    ADD             reduce using rule 192 (idaccess -> ID .)
    SUB             reduce using rule 192 (idaccess -> ID .)
    FIND            reduce using rule 192 (idaccess -> ID .)
    MATCH           reduce using rule 192 (idaccess -> ID .)
    LSH             reduce using rule 192 (idaccess -> ID .)
    RSH             reduce using rule 192 (idaccess -> ID .)
    USH             reduce using rule 192 (idaccess -> ID .)
    BWAND           reduce using rule 192 (idaccess -> ID .)
    XOR             reduce using rule 192 (idaccess -> ID .)
    BWOR            reduce using rule 192 (idaccess -> ID .)
    BOOLAND         reduce using rule 192 (idaccess -> ID .)
    BOOLOR          reduce using rule 192 (idaccess -> ID .)
    GT              reduce using rule 192 (idaccess -> ID .)
    GTE             reduce using rule 192 (idaccess -> ID .)
    LT              reduce using rule 192 (idaccess -> ID .)
    LTE             reduce using rule 192 (idaccess -> ID .)
    EQ              reduce using rule 192 (idaccess -> ID .)
    EQR             reduce using rule 192 (idaccess -> ID .)
    NE              reduce using rule 192 (idaccess -> ID .)
    NER             reduce using rule 192 (idaccess -> ID .)
    INSTANCEOF      reduce using rule 192 (idaccess -> ID .)
    ELVIS           reduce using rule 192 (idaccess -> ID .)
    ASSIGN          reduce using rule 192 (idaccess -> ID .)
    AADD            reduce using rule 192 (idaccess -> ID .)
    ASUB            reduce using rule 192 (idaccess -> ID .)
    AMUL            reduce using rule 192 (idaccess -> ID .)
    ADIV            reduce using rule 192 (idaccess -> ID .)
    AREM            reduce using rule 192 (idaccess -> ID .)
    AAND            reduce using rule 192 (idaccess -> ID .)
    AXOR            reduce using rule 192 (idaccess -> ID .)
    AOR             reduce using rule 192 (idaccess -> ID .)
    ALSH            reduce using rule 192 (idaccess -> ID .)
    ARSH            reduce using rule 192 (idaccess -> ID .)
    AUSH            reduce using rule 192 (idaccess -> ID .)
    RBRACE          reduce using rule 192 (idaccess -> ID .)
    COMMA           reduce using rule 192 (idaccess -> ID .)
    COLON           reduce using rule 192 (idaccess -> ID .)
    SEMICOLON       reduce using rule 192 (idaccess -> ID .)
    RBRACK          reduce using rule 192 (idaccess -> ID .)
    RP              reduce using rule 192 (idaccess -> ID .)
    LP              shift and go to state 110

  ! LP              [ reduce using rule 192 (idaccess -> ID .) ]

    arguments                      shift and go to state 109

state 118

    (158) callinvoke_no_null_safe -> idaccess . arguments
    (163) fieldaccess_no_null_safe -> idaccess .
    (193) idaccess_lbrace -> idaccess . LBRACE
    (191) idaccess -> idaccess . DOT ID
    (215) arguments -> . LP innerarguments RP
    (216) arguments -> . LP RP

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    NSDOT           reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    INCR            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    DECR            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    COND            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    MUL             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    DIV             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    REM             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ADD             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    SUB             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    FIND            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    MATCH           reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    LSH             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    RSH             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    USH             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    BWAND           reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    XOR             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    BWOR            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    BOOLAND         reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    BOOLOR          reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    GT              reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    GTE             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    LT              reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    LTE             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    EQ              reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    EQR             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    NE              reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    NER             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    INSTANCEOF      reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ELVIS           reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ASSIGN          reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AADD            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ASUB            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AMUL            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ADIV            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AREM            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AAND            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AXOR            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AOR             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ALSH            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ARSH            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AUSH            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    RBRACE          reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    COMMA           reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    COLON           reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    SEMICOLON       reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    RBRACK          reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    RP              reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    LBRACE          shift and go to state 119
    DOT             shift and go to state 120
    LP              shift and go to state 110

  ! LBRACE          [ reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .) ]
  ! DOT             [ reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .) ]

    arguments                      shift and go to state 121

state 119

    (193) idaccess_lbrace -> idaccess LBRACE .

    RBRACE          reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    INCR            reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    DECR            reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    ADD             reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    SUB             reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    BOOLNOT         reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    BWNOT           reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    LP              reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    NEW             reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    TRUE            reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    FALSE           reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    NULL            reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    STRING          reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    REGEX           reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    LBRACE          reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    ID              reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    DOLLAR          reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    OCTAL           reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    HEX             reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    INTEGER         reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    DECIMAL         reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)


state 120

    (191) idaccess -> idaccess DOT . ID

    ID              shift and go to state 222


state 121

    (158) callinvoke_no_null_safe -> idaccess arguments .

    LBRACE          reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    DOT             reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    NSDOT           reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    INCR            reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    DECR            reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    COND            reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    MUL             reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    DIV             reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    REM             reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    ADD             reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    SUB             reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    FIND            reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    MATCH           reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    LSH             reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    RSH             reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    USH             reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    BWAND           reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    XOR             reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    BWOR            reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    BOOLAND         reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    BOOLOR          reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    GT              reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    GTE             reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    LT              reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    LTE             reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    EQ              reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    EQR             reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    NE              reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    NER             reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    INSTANCEOF      reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    ELVIS           reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    ASSIGN          reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    AADD            reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    ASUB            reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    AMUL            reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    ADIV            reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    AREM            reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    AAND            reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    AXOR            reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    AOR             reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    ALSH            reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    ARSH            reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    AUSH            reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    SEMICOLON       reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    RBRACE          reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    COMMA           reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    COLON           reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    RP              reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)
    RBRACK          reduce using rule 158 (callinvoke_no_null_safe -> idaccess arguments .)


state 122

    (204) listinitializer -> LBRACE optional_expressions . RBRACE

    RBRACE          shift and go to state 223


state 123

    (209) mapinitializer -> LBRACE optional_maptokens . RBRACE

    RBRACE          shift and go to state 224


state 124

    (205) optional_expressions -> expressions .

    RBRACE          reduce using rule 205 (optional_expressions -> expressions .)


state 125

    (210) optional_maptokens -> maptokens .
    (212) maptokens -> maptokens . COMMA maptoken

    RBRACE          reduce using rule 210 (optional_maptokens -> maptokens .)
    COMMA           shift and go to state 225


state 126

    (211) optional_maptokens -> COLON .

    RBRACE          reduce using rule 211 (optional_maptokens -> COLON .)


state 127

    (207) expressions -> expression . COMMA expression
    (208) expressions -> expression .
    (214) maptoken -> expression . COLON expression

    COMMA           shift and go to state 226
    RBRACE          reduce using rule 208 (expressions -> expression .)
    COLON           shift and go to state 227


state 128

    (213) maptokens -> maptoken .

    COMMA           reduce using rule 213 (maptokens -> maptoken .)
    RBRACE          reduce using rule 213 (maptokens -> maptoken .)


state 129

    (25) if_else -> IF LP . expression RP trailer ELSE trailer
    (24) if -> IF LP . expression RP trailer
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    expression                     shift and go to state 228
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 130

    (141) primordefcast -> LP primordefcasttype . RP unary

    RP              shift and go to state 229


state 131

    (142) refcast -> LP refcasttype . RP unarynotaddsub

    RP              shift and go to state 230


state 132

    (177) precedence -> LP expression . RP

    RP              shift and go to state 231


state 133

    (143) primordefcasttype -> DEF .
    (145) refcasttype -> DEF . closedbraces
    (62) closedbraces -> . closedbraces LBRACE RBRACE
    (63) closedbraces -> . LBRACE RBRACE

    RP              reduce using rule 143 (primordefcasttype -> DEF .)
    LBRACE          shift and go to state 113

    closedbraces                   shift and go to state 232

state 134

    (144) primordefcasttype -> PRIMITIVE .
    (146) refcasttype -> PRIMITIVE . closedbraces
    (62) closedbraces -> . closedbraces LBRACE RBRACE
    (63) closedbraces -> . LBRACE RBRACE

    RP              reduce using rule 144 (primordefcasttype -> PRIMITIVE .)
    LBRACE          shift and go to state 113

    closedbraces                   shift and go to state 233

state 135

    (147) refcasttype -> idaccess . closedbraces
    (148) refcasttype -> idaccess .
    (191) idaccess -> idaccess . DOT ID
    (158) callinvoke_no_null_safe -> idaccess . arguments
    (163) fieldaccess_no_null_safe -> idaccess .
    (193) idaccess_lbrace -> idaccess . LBRACE
    (62) closedbraces -> . closedbraces LBRACE RBRACE
    (63) closedbraces -> . LBRACE RBRACE
    (215) arguments -> . LP innerarguments RP
    (216) arguments -> . LP RP

  ! shift/reduce conflict for DOT resolved as shift
  ! reduce/reduce conflict for RP resolved using rule 148 (refcasttype -> idaccess .)
  ! shift/reduce conflict for LBRACE resolved as shift
    RP              reduce using rule 148 (refcasttype -> idaccess .)
    DOT             shift and go to state 120
    NSDOT           reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    INCR            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    DECR            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    COND            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    MUL             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    DIV             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    REM             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ADD             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    SUB             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    FIND            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    MATCH           reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    LSH             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    RSH             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    USH             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    BWAND           reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    XOR             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    BWOR            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    BOOLAND         reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    BOOLOR          reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    GT              reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    GTE             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    LT              reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    LTE             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    EQ              reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    EQR             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    NE              reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    NER             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    INSTANCEOF      reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ELVIS           reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ASSIGN          reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AADD            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ASUB            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AMUL            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ADIV            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AREM            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AAND            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AXOR            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AOR             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ALSH            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ARSH            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AUSH            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    LBRACE          shift and go to state 235
    LP              shift and go to state 110

  ! LBRACE          [ reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .) ]
  ! DOT             [ reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .) ]
  ! RP              [ reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .) ]

    closedbraces                   shift and go to state 234
    arguments                      shift and go to state 121

state 136

    (26) while -> WHILE LP . expression RP trailer_or_empty
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    expression                     shift and go to state 236
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 137

    (27) for -> FOR LP . initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty
    (28) each -> FOR LP . decltype ID COLON expression RP trailer
    (29) ineach -> FOR LP . ID IN expression RP trailer
    (52) initializer -> . declaration
    (53) initializer -> . expression
    (54) initializer -> .
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (57) declaration -> . decltype declvars
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    ID              shift and go to state 239
    SEMICOLON       reduce using rule 54 (initializer -> .)
    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    initializer                    shift and go to state 237
    decltype                       shift and go to state 238
    expression                     shift and go to state 240
    declaration                    shift and go to state 241
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 11
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    idaccess                       shift and go to state 28
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 138

    (30) try -> TRY block . traps
    (71) traps -> . traps trap
    (72) traps -> . trap
    (73) trap -> . CATCH LP type ID RP block

    CATCH           shift and go to state 244

    traps                          shift and go to state 242
    trap                           shift and go to state 243

state 139

    (47) block -> LBRACK . statements RBRACK
    (48) block -> LBRACK . dstatement RBRACK
    (49) block -> LBRACK . statements dstatement RBRACK
    (50) block -> LBRACK . RBRACK
    (13) statements -> . statements statement
    (14) statements -> . statement
    (31) dstatement -> . do
    (32) dstatement -> . declaration
    (33) dstatement -> . continue
    (34) dstatement -> . break
    (35) dstatement -> . return
    (36) dstatement -> . throw
    (37) dstatement -> . expression
    (15) statement -> . rstatement
    (16) statement -> . dstatement SEMICOLON
    (38) do -> . DO block WHILE LP expression RP
    (57) declaration -> . decltype declvars
    (39) continue -> . CONTINUE
    (40) break -> . BREAK
    (41) return -> . RETURN optional_expression
    (42) throw -> . THROW expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (17) rstatement -> . if_else
    (18) rstatement -> . if
    (19) rstatement -> . while
    (20) rstatement -> . for
    (21) rstatement -> . each
    (22) rstatement -> . ineach
    (23) rstatement -> . try
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (25) if_else -> . IF LP expression RP trailer ELSE trailer
    (24) if -> . IF LP expression RP trailer
    (26) while -> . WHILE LP expression RP trailer_or_empty
    (27) for -> . FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty
    (28) each -> . FOR LP decltype ID COLON expression RP trailer
    (29) ineach -> . FOR LP ID IN expression RP trailer
    (30) try -> . TRY block traps
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    RBRACK          shift and go to state 246
    DO              shift and go to state 35
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 37
    RETURN          shift and go to state 38
    THROW           shift and go to state 39
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    TRY             shift and go to state 34
    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    ID              shift and go to state 7
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    statements                     shift and go to state 245
    dstatement                     shift and go to state 247
    statement                      shift and go to state 5
    do                             shift and go to state 19
    declaration                    shift and go to state 20
    continue                       shift and go to state 21
    break                          shift and go to state 22
    return                         shift and go to state 23
    throw                          shift and go to state 24
    expression                     shift and go to state 25
    rstatement                     shift and go to state 8
    decltype                       shift and go to state 105
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    if_else                        shift and go to state 12
    if                             shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    each                           shift and go to state 16
    ineach                         shift and go to state 17
    try                            shift and go to state 18
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 11
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    idaccess                       shift and go to state 28
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 140

    (38) do -> DO block . WHILE LP expression RP

    WHILE           shift and go to state 248


state 141

    (41) return -> RETURN optional_expression .

    SEMICOLON       reduce using rule 41 (return -> RETURN optional_expression .)
    RBRACK          reduce using rule 41 (return -> RETURN optional_expression .)


state 142

    (74) optional_expression -> expression .

    SEMICOLON       reduce using rule 74 (optional_expression -> expression .)
    RBRACK          reduce using rule 74 (optional_expression -> expression .)


state 143

    (42) throw -> THROW expression .

    SEMICOLON       reduce using rule 42 (throw -> THROW expression .)
    RBRACK          reduce using rule 42 (throw -> THROW expression .)


state 144

    (110) conditional -> noncondexpression COND . expression COLON expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 40
    expression                     shift and go to state 249
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 145

    (82) binary -> noncondexpression MUL . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 250
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 146

    (83) binary -> noncondexpression DIV . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 251
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 147

    (84) binary -> noncondexpression REM . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 252
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 148

    (85) binary -> noncondexpression ADD . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 253
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 149

    (86) binary -> noncondexpression SUB . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 254
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 150

    (87) binary -> noncondexpression FIND . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 255
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 151

    (88) binary -> noncondexpression MATCH . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 256
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 152

    (89) binary -> noncondexpression LSH . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 257
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 153

    (90) binary -> noncondexpression RSH . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 258
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 154

    (91) binary -> noncondexpression USH . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 259
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 155

    (92) binary -> noncondexpression BWAND . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 260
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 156

    (93) binary -> noncondexpression XOR . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 261
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 157

    (94) binary -> noncondexpression BWOR . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 262
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 158

    (95) bool -> noncondexpression BOOLAND . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 263
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 159

    (96) bool -> noncondexpression BOOLOR . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 264
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 160

    (97) comp -> noncondexpression GT . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 265
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 161

    (98) comp -> noncondexpression GTE . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 266
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 162

    (99) comp -> noncondexpression LT . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 267
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 163

    (100) comp -> noncondexpression LTE . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 268
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 164

    (101) comp -> noncondexpression EQ . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 269
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 165

    (102) comp -> noncondexpression EQR . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 270
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 166

    (103) comp -> noncondexpression NE . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 271
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 167

    (104) comp -> noncondexpression NER . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 272
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 168

    (105) instanceof -> noncondexpression INSTANCEOF . decltype
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID

    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    ID              shift and go to state 196

    decltype                       shift and go to state 273
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 274
    idaccess                       shift and go to state 275

state 169

    (106) elvis -> noncondexpression ELVIS . noncondexpression
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 276
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 170

    (113) only_assignment -> noncondexpression ASSIGN . expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 40
    expression                     shift and go to state 277
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 171

    (114) compound_assignment -> noncondexpression AADD . expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 40
    expression                     shift and go to state 278
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 172

    (115) compound_assignment -> noncondexpression ASUB . expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 40
    expression                     shift and go to state 279
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 173

    (116) compound_assignment -> noncondexpression AMUL . expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 40
    expression                     shift and go to state 280
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 174

    (117) compound_assignment -> noncondexpression ADIV . expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 40
    expression                     shift and go to state 281
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 175

    (118) compound_assignment -> noncondexpression AREM . expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 40
    expression                     shift and go to state 282
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 176

    (119) compound_assignment -> noncondexpression AAND . expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 40
    expression                     shift and go to state 283
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 177

    (120) compound_assignment -> noncondexpression AXOR . expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 40
    expression                     shift and go to state 284
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 178

    (121) compound_assignment -> noncondexpression AOR . expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 40
    expression                     shift and go to state 285
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 179

    (122) compound_assignment -> noncondexpression ALSH . expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 40
    expression                     shift and go to state 286
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 180

    (123) compound_assignment -> noncondexpression ARSH . expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 40
    expression                     shift and go to state 287
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 181

    (124) compound_assignment -> noncondexpression AUSH . expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 40
    expression                     shift and go to state 288
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 182

    (129) pre -> ADD unary .

    COND            reduce using rule 129 (pre -> ADD unary .)
    MUL             reduce using rule 129 (pre -> ADD unary .)
    DIV             reduce using rule 129 (pre -> ADD unary .)
    REM             reduce using rule 129 (pre -> ADD unary .)
    ADD             reduce using rule 129 (pre -> ADD unary .)
    SUB             reduce using rule 129 (pre -> ADD unary .)
    FIND            reduce using rule 129 (pre -> ADD unary .)
    MATCH           reduce using rule 129 (pre -> ADD unary .)
    LSH             reduce using rule 129 (pre -> ADD unary .)
    RSH             reduce using rule 129 (pre -> ADD unary .)
    USH             reduce using rule 129 (pre -> ADD unary .)
    BWAND           reduce using rule 129 (pre -> ADD unary .)
    XOR             reduce using rule 129 (pre -> ADD unary .)
    BWOR            reduce using rule 129 (pre -> ADD unary .)
    BOOLAND         reduce using rule 129 (pre -> ADD unary .)
    BOOLOR          reduce using rule 129 (pre -> ADD unary .)
    GT              reduce using rule 129 (pre -> ADD unary .)
    GTE             reduce using rule 129 (pre -> ADD unary .)
    LT              reduce using rule 129 (pre -> ADD unary .)
    LTE             reduce using rule 129 (pre -> ADD unary .)
    EQ              reduce using rule 129 (pre -> ADD unary .)
    EQR             reduce using rule 129 (pre -> ADD unary .)
    NE              reduce using rule 129 (pre -> ADD unary .)
    NER             reduce using rule 129 (pre -> ADD unary .)
    INSTANCEOF      reduce using rule 129 (pre -> ADD unary .)
    ELVIS           reduce using rule 129 (pre -> ADD unary .)
    ASSIGN          reduce using rule 129 (pre -> ADD unary .)
    AADD            reduce using rule 129 (pre -> ADD unary .)
    ASUB            reduce using rule 129 (pre -> ADD unary .)
    AMUL            reduce using rule 129 (pre -> ADD unary .)
    ADIV            reduce using rule 129 (pre -> ADD unary .)
    AREM            reduce using rule 129 (pre -> ADD unary .)
    AAND            reduce using rule 129 (pre -> ADD unary .)
    AXOR            reduce using rule 129 (pre -> ADD unary .)
    AOR             reduce using rule 129 (pre -> ADD unary .)
    ALSH            reduce using rule 129 (pre -> ADD unary .)
    ARSH            reduce using rule 129 (pre -> ADD unary .)
    AUSH            reduce using rule 129 (pre -> ADD unary .)
    SEMICOLON       reduce using rule 129 (pre -> ADD unary .)
    RBRACE          reduce using rule 129 (pre -> ADD unary .)
    COMMA           reduce using rule 129 (pre -> ADD unary .)
    COLON           reduce using rule 129 (pre -> ADD unary .)
    RP              reduce using rule 129 (pre -> ADD unary .)
    RBRACK          reduce using rule 129 (pre -> ADD unary .)


state 183

    (130) pre -> SUB unary .

    COND            reduce using rule 130 (pre -> SUB unary .)
    MUL             reduce using rule 130 (pre -> SUB unary .)
    DIV             reduce using rule 130 (pre -> SUB unary .)
    REM             reduce using rule 130 (pre -> SUB unary .)
    ADD             reduce using rule 130 (pre -> SUB unary .)
    SUB             reduce using rule 130 (pre -> SUB unary .)
    FIND            reduce using rule 130 (pre -> SUB unary .)
    MATCH           reduce using rule 130 (pre -> SUB unary .)
    LSH             reduce using rule 130 (pre -> SUB unary .)
    RSH             reduce using rule 130 (pre -> SUB unary .)
    USH             reduce using rule 130 (pre -> SUB unary .)
    BWAND           reduce using rule 130 (pre -> SUB unary .)
    XOR             reduce using rule 130 (pre -> SUB unary .)
    BWOR            reduce using rule 130 (pre -> SUB unary .)
    BOOLAND         reduce using rule 130 (pre -> SUB unary .)
    BOOLOR          reduce using rule 130 (pre -> SUB unary .)
    GT              reduce using rule 130 (pre -> SUB unary .)
    GTE             reduce using rule 130 (pre -> SUB unary .)
    LT              reduce using rule 130 (pre -> SUB unary .)
    LTE             reduce using rule 130 (pre -> SUB unary .)
    EQ              reduce using rule 130 (pre -> SUB unary .)
    EQR             reduce using rule 130 (pre -> SUB unary .)
    NE              reduce using rule 130 (pre -> SUB unary .)
    NER             reduce using rule 130 (pre -> SUB unary .)
    INSTANCEOF      reduce using rule 130 (pre -> SUB unary .)
    ELVIS           reduce using rule 130 (pre -> SUB unary .)
    ASSIGN          reduce using rule 130 (pre -> SUB unary .)
    AADD            reduce using rule 130 (pre -> SUB unary .)
    ASUB            reduce using rule 130 (pre -> SUB unary .)
    AMUL            reduce using rule 130 (pre -> SUB unary .)
    ADIV            reduce using rule 130 (pre -> SUB unary .)
    AREM            reduce using rule 130 (pre -> SUB unary .)
    AAND            reduce using rule 130 (pre -> SUB unary .)
    AXOR            reduce using rule 130 (pre -> SUB unary .)
    AOR             reduce using rule 130 (pre -> SUB unary .)
    ALSH            reduce using rule 130 (pre -> SUB unary .)
    ARSH            reduce using rule 130 (pre -> SUB unary .)
    AUSH            reduce using rule 130 (pre -> SUB unary .)
    SEMICOLON       reduce using rule 130 (pre -> SUB unary .)
    RBRACE          reduce using rule 130 (pre -> SUB unary .)
    COMMA           reduce using rule 130 (pre -> SUB unary .)
    COLON           reduce using rule 130 (pre -> SUB unary .)
    RP              reduce using rule 130 (pre -> SUB unary .)
    RBRACK          reduce using rule 130 (pre -> SUB unary .)


state 184

    (127) pre -> INCR chain .

    COND            reduce using rule 127 (pre -> INCR chain .)
    MUL             reduce using rule 127 (pre -> INCR chain .)
    DIV             reduce using rule 127 (pre -> INCR chain .)
    REM             reduce using rule 127 (pre -> INCR chain .)
    ADD             reduce using rule 127 (pre -> INCR chain .)
    SUB             reduce using rule 127 (pre -> INCR chain .)
    FIND            reduce using rule 127 (pre -> INCR chain .)
    MATCH           reduce using rule 127 (pre -> INCR chain .)
    LSH             reduce using rule 127 (pre -> INCR chain .)
    RSH             reduce using rule 127 (pre -> INCR chain .)
    USH             reduce using rule 127 (pre -> INCR chain .)
    BWAND           reduce using rule 127 (pre -> INCR chain .)
    XOR             reduce using rule 127 (pre -> INCR chain .)
    BWOR            reduce using rule 127 (pre -> INCR chain .)
    BOOLAND         reduce using rule 127 (pre -> INCR chain .)
    BOOLOR          reduce using rule 127 (pre -> INCR chain .)
    GT              reduce using rule 127 (pre -> INCR chain .)
    GTE             reduce using rule 127 (pre -> INCR chain .)
    LT              reduce using rule 127 (pre -> INCR chain .)
    LTE             reduce using rule 127 (pre -> INCR chain .)
    EQ              reduce using rule 127 (pre -> INCR chain .)
    EQR             reduce using rule 127 (pre -> INCR chain .)
    NE              reduce using rule 127 (pre -> INCR chain .)
    NER             reduce using rule 127 (pre -> INCR chain .)
    INSTANCEOF      reduce using rule 127 (pre -> INCR chain .)
    ELVIS           reduce using rule 127 (pre -> INCR chain .)
    ASSIGN          reduce using rule 127 (pre -> INCR chain .)
    AADD            reduce using rule 127 (pre -> INCR chain .)
    ASUB            reduce using rule 127 (pre -> INCR chain .)
    AMUL            reduce using rule 127 (pre -> INCR chain .)
    ADIV            reduce using rule 127 (pre -> INCR chain .)
    AREM            reduce using rule 127 (pre -> INCR chain .)
    AAND            reduce using rule 127 (pre -> INCR chain .)
    AXOR            reduce using rule 127 (pre -> INCR chain .)
    AOR             reduce using rule 127 (pre -> INCR chain .)
    ALSH            reduce using rule 127 (pre -> INCR chain .)
    ARSH            reduce using rule 127 (pre -> INCR chain .)
    AUSH            reduce using rule 127 (pre -> INCR chain .)
    SEMICOLON       reduce using rule 127 (pre -> INCR chain .)
    RBRACE          reduce using rule 127 (pre -> INCR chain .)
    COMMA           reduce using rule 127 (pre -> INCR chain .)
    COLON           reduce using rule 127 (pre -> INCR chain .)
    RP              reduce using rule 127 (pre -> INCR chain .)
    RBRACK          reduce using rule 127 (pre -> INCR chain .)


state 185

    (177) precedence -> LP . expression RP
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    expression                     shift and go to state 132
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 186

    (135) post -> chain INCR .

    COND            reduce using rule 135 (post -> chain INCR .)
    MUL             reduce using rule 135 (post -> chain INCR .)
    DIV             reduce using rule 135 (post -> chain INCR .)
    REM             reduce using rule 135 (post -> chain INCR .)
    ADD             reduce using rule 135 (post -> chain INCR .)
    SUB             reduce using rule 135 (post -> chain INCR .)
    FIND            reduce using rule 135 (post -> chain INCR .)
    MATCH           reduce using rule 135 (post -> chain INCR .)
    LSH             reduce using rule 135 (post -> chain INCR .)
    RSH             reduce using rule 135 (post -> chain INCR .)
    USH             reduce using rule 135 (post -> chain INCR .)
    BWAND           reduce using rule 135 (post -> chain INCR .)
    XOR             reduce using rule 135 (post -> chain INCR .)
    BWOR            reduce using rule 135 (post -> chain INCR .)
    BOOLAND         reduce using rule 135 (post -> chain INCR .)
    BOOLOR          reduce using rule 135 (post -> chain INCR .)
    GT              reduce using rule 135 (post -> chain INCR .)
    GTE             reduce using rule 135 (post -> chain INCR .)
    LT              reduce using rule 135 (post -> chain INCR .)
    LTE             reduce using rule 135 (post -> chain INCR .)
    EQ              reduce using rule 135 (post -> chain INCR .)
    EQR             reduce using rule 135 (post -> chain INCR .)
    NE              reduce using rule 135 (post -> chain INCR .)
    NER             reduce using rule 135 (post -> chain INCR .)
    INSTANCEOF      reduce using rule 135 (post -> chain INCR .)
    ELVIS           reduce using rule 135 (post -> chain INCR .)
    ASSIGN          reduce using rule 135 (post -> chain INCR .)
    AADD            reduce using rule 135 (post -> chain INCR .)
    ASUB            reduce using rule 135 (post -> chain INCR .)
    AMUL            reduce using rule 135 (post -> chain INCR .)
    ADIV            reduce using rule 135 (post -> chain INCR .)
    AREM            reduce using rule 135 (post -> chain INCR .)
    AAND            reduce using rule 135 (post -> chain INCR .)
    AXOR            reduce using rule 135 (post -> chain INCR .)
    AOR             reduce using rule 135 (post -> chain INCR .)
    ALSH            reduce using rule 135 (post -> chain INCR .)
    ARSH            reduce using rule 135 (post -> chain INCR .)
    AUSH            reduce using rule 135 (post -> chain INCR .)
    SEMICOLON       reduce using rule 135 (post -> chain INCR .)
    RBRACE          reduce using rule 135 (post -> chain INCR .)
    COMMA           reduce using rule 135 (post -> chain INCR .)
    COLON           reduce using rule 135 (post -> chain INCR .)
    RP              reduce using rule 135 (post -> chain INCR .)
    RBRACK          reduce using rule 135 (post -> chain INCR .)


state 187

    (136) post -> chain DECR .

    COND            reduce using rule 136 (post -> chain DECR .)
    MUL             reduce using rule 136 (post -> chain DECR .)
    DIV             reduce using rule 136 (post -> chain DECR .)
    REM             reduce using rule 136 (post -> chain DECR .)
    ADD             reduce using rule 136 (post -> chain DECR .)
    SUB             reduce using rule 136 (post -> chain DECR .)
    FIND            reduce using rule 136 (post -> chain DECR .)
    MATCH           reduce using rule 136 (post -> chain DECR .)
    LSH             reduce using rule 136 (post -> chain DECR .)
    RSH             reduce using rule 136 (post -> chain DECR .)
    USH             reduce using rule 136 (post -> chain DECR .)
    BWAND           reduce using rule 136 (post -> chain DECR .)
    XOR             reduce using rule 136 (post -> chain DECR .)
    BWOR            reduce using rule 136 (post -> chain DECR .)
    BOOLAND         reduce using rule 136 (post -> chain DECR .)
    BOOLOR          reduce using rule 136 (post -> chain DECR .)
    GT              reduce using rule 136 (post -> chain DECR .)
    GTE             reduce using rule 136 (post -> chain DECR .)
    LT              reduce using rule 136 (post -> chain DECR .)
    LTE             reduce using rule 136 (post -> chain DECR .)
    EQ              reduce using rule 136 (post -> chain DECR .)
    EQR             reduce using rule 136 (post -> chain DECR .)
    NE              reduce using rule 136 (post -> chain DECR .)
    NER             reduce using rule 136 (post -> chain DECR .)
    INSTANCEOF      reduce using rule 136 (post -> chain DECR .)
    ELVIS           reduce using rule 136 (post -> chain DECR .)
    ASSIGN          reduce using rule 136 (post -> chain DECR .)
    AADD            reduce using rule 136 (post -> chain DECR .)
    ASUB            reduce using rule 136 (post -> chain DECR .)
    AMUL            reduce using rule 136 (post -> chain DECR .)
    ADIV            reduce using rule 136 (post -> chain DECR .)
    AREM            reduce using rule 136 (post -> chain DECR .)
    AAND            reduce using rule 136 (post -> chain DECR .)
    AXOR            reduce using rule 136 (post -> chain DECR .)
    AOR             reduce using rule 136 (post -> chain DECR .)
    ALSH            reduce using rule 136 (post -> chain DECR .)
    ARSH            reduce using rule 136 (post -> chain DECR .)
    AUSH            reduce using rule 136 (post -> chain DECR .)
    SEMICOLON       reduce using rule 136 (post -> chain DECR .)
    RBRACE          reduce using rule 136 (post -> chain DECR .)
    COMMA           reduce using rule 136 (post -> chain DECR .)
    COLON           reduce using rule 136 (post -> chain DECR .)
    RP              reduce using rule 136 (post -> chain DECR .)
    RBRACK          reduce using rule 136 (post -> chain DECR .)


state 188

    (128) pre -> DECR chain .

    COND            reduce using rule 128 (pre -> DECR chain .)
    MUL             reduce using rule 128 (pre -> DECR chain .)
    DIV             reduce using rule 128 (pre -> DECR chain .)
    REM             reduce using rule 128 (pre -> DECR chain .)
    ADD             reduce using rule 128 (pre -> DECR chain .)
    SUB             reduce using rule 128 (pre -> DECR chain .)
    FIND            reduce using rule 128 (pre -> DECR chain .)
    MATCH           reduce using rule 128 (pre -> DECR chain .)
    LSH             reduce using rule 128 (pre -> DECR chain .)
    RSH             reduce using rule 128 (pre -> DECR chain .)
    USH             reduce using rule 128 (pre -> DECR chain .)
    BWAND           reduce using rule 128 (pre -> DECR chain .)
    XOR             reduce using rule 128 (pre -> DECR chain .)
    BWOR            reduce using rule 128 (pre -> DECR chain .)
    BOOLAND         reduce using rule 128 (pre -> DECR chain .)
    BOOLOR          reduce using rule 128 (pre -> DECR chain .)
    GT              reduce using rule 128 (pre -> DECR chain .)
    GTE             reduce using rule 128 (pre -> DECR chain .)
    LT              reduce using rule 128 (pre -> DECR chain .)
    LTE             reduce using rule 128 (pre -> DECR chain .)
    EQ              reduce using rule 128 (pre -> DECR chain .)
    EQR             reduce using rule 128 (pre -> DECR chain .)
    NE              reduce using rule 128 (pre -> DECR chain .)
    NER             reduce using rule 128 (pre -> DECR chain .)
    INSTANCEOF      reduce using rule 128 (pre -> DECR chain .)
    ELVIS           reduce using rule 128 (pre -> DECR chain .)
    ASSIGN          reduce using rule 128 (pre -> DECR chain .)
    AADD            reduce using rule 128 (pre -> DECR chain .)
    ASUB            reduce using rule 128 (pre -> DECR chain .)
    AMUL            reduce using rule 128 (pre -> DECR chain .)
    ADIV            reduce using rule 128 (pre -> DECR chain .)
    AREM            reduce using rule 128 (pre -> DECR chain .)
    AAND            reduce using rule 128 (pre -> DECR chain .)
    AXOR            reduce using rule 128 (pre -> DECR chain .)
    AOR             reduce using rule 128 (pre -> DECR chain .)
    ALSH            reduce using rule 128 (pre -> DECR chain .)
    ARSH            reduce using rule 128 (pre -> DECR chain .)
    AUSH            reduce using rule 128 (pre -> DECR chain .)
    SEMICOLON       reduce using rule 128 (pre -> DECR chain .)
    RBRACE          reduce using rule 128 (pre -> DECR chain .)
    COMMA           reduce using rule 128 (pre -> DECR chain .)
    COLON           reduce using rule 128 (pre -> DECR chain .)
    RP              reduce using rule 128 (pre -> DECR chain .)
    RBRACK          reduce using rule 128 (pre -> DECR chain .)


state 189

    (165) braceaccess -> dynamic LBRACE . expression RBRACE
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    dynamic                        shift and go to state 62
    expression                     shift and go to state 289
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 190

    (157) callinvoke_no_null_safe -> dynamic DOT . ID arguments
    (162) fieldaccess_no_null_safe -> dynamic DOT . ID

    ID              shift and go to state 290


state 191

    (159) callinvoke_null_safe -> dynamic NSDOT . ID arguments
    (164) fieldaccess_null_safe -> dynamic NSDOT . ID

    ID              shift and go to state 291


state 192

    (137) not -> BOOLNOT unary .

    COND            reduce using rule 137 (not -> BOOLNOT unary .)
    MUL             reduce using rule 137 (not -> BOOLNOT unary .)
    DIV             reduce using rule 137 (not -> BOOLNOT unary .)
    REM             reduce using rule 137 (not -> BOOLNOT unary .)
    ADD             reduce using rule 137 (not -> BOOLNOT unary .)
    SUB             reduce using rule 137 (not -> BOOLNOT unary .)
    FIND            reduce using rule 137 (not -> BOOLNOT unary .)
    MATCH           reduce using rule 137 (not -> BOOLNOT unary .)
    LSH             reduce using rule 137 (not -> BOOLNOT unary .)
    RSH             reduce using rule 137 (not -> BOOLNOT unary .)
    USH             reduce using rule 137 (not -> BOOLNOT unary .)
    BWAND           reduce using rule 137 (not -> BOOLNOT unary .)
    XOR             reduce using rule 137 (not -> BOOLNOT unary .)
    BWOR            reduce using rule 137 (not -> BOOLNOT unary .)
    BOOLAND         reduce using rule 137 (not -> BOOLNOT unary .)
    BOOLOR          reduce using rule 137 (not -> BOOLNOT unary .)
    GT              reduce using rule 137 (not -> BOOLNOT unary .)
    GTE             reduce using rule 137 (not -> BOOLNOT unary .)
    LT              reduce using rule 137 (not -> BOOLNOT unary .)
    LTE             reduce using rule 137 (not -> BOOLNOT unary .)
    EQ              reduce using rule 137 (not -> BOOLNOT unary .)
    EQR             reduce using rule 137 (not -> BOOLNOT unary .)
    NE              reduce using rule 137 (not -> BOOLNOT unary .)
    NER             reduce using rule 137 (not -> BOOLNOT unary .)
    INSTANCEOF      reduce using rule 137 (not -> BOOLNOT unary .)
    ELVIS           reduce using rule 137 (not -> BOOLNOT unary .)
    ASSIGN          reduce using rule 137 (not -> BOOLNOT unary .)
    AADD            reduce using rule 137 (not -> BOOLNOT unary .)
    ASUB            reduce using rule 137 (not -> BOOLNOT unary .)
    AMUL            reduce using rule 137 (not -> BOOLNOT unary .)
    ADIV            reduce using rule 137 (not -> BOOLNOT unary .)
    AREM            reduce using rule 137 (not -> BOOLNOT unary .)
    AAND            reduce using rule 137 (not -> BOOLNOT unary .)
    AXOR            reduce using rule 137 (not -> BOOLNOT unary .)
    AOR             reduce using rule 137 (not -> BOOLNOT unary .)
    ALSH            reduce using rule 137 (not -> BOOLNOT unary .)
    ARSH            reduce using rule 137 (not -> BOOLNOT unary .)
    AUSH            reduce using rule 137 (not -> BOOLNOT unary .)
    SEMICOLON       reduce using rule 137 (not -> BOOLNOT unary .)
    RBRACE          reduce using rule 137 (not -> BOOLNOT unary .)
    COMMA           reduce using rule 137 (not -> BOOLNOT unary .)
    COLON           reduce using rule 137 (not -> BOOLNOT unary .)
    RP              reduce using rule 137 (not -> BOOLNOT unary .)
    RBRACK          reduce using rule 137 (not -> BOOLNOT unary .)


state 193

    (138) not -> BWNOT unary .

    COND            reduce using rule 138 (not -> BWNOT unary .)
    MUL             reduce using rule 138 (not -> BWNOT unary .)
    DIV             reduce using rule 138 (not -> BWNOT unary .)
    REM             reduce using rule 138 (not -> BWNOT unary .)
    ADD             reduce using rule 138 (not -> BWNOT unary .)
    SUB             reduce using rule 138 (not -> BWNOT unary .)
    FIND            reduce using rule 138 (not -> BWNOT unary .)
    MATCH           reduce using rule 138 (not -> BWNOT unary .)
    LSH             reduce using rule 138 (not -> BWNOT unary .)
    RSH             reduce using rule 138 (not -> BWNOT unary .)
    USH             reduce using rule 138 (not -> BWNOT unary .)
    BWAND           reduce using rule 138 (not -> BWNOT unary .)
    XOR             reduce using rule 138 (not -> BWNOT unary .)
    BWOR            reduce using rule 138 (not -> BWNOT unary .)
    BOOLAND         reduce using rule 138 (not -> BWNOT unary .)
    BOOLOR          reduce using rule 138 (not -> BWNOT unary .)
    GT              reduce using rule 138 (not -> BWNOT unary .)
    GTE             reduce using rule 138 (not -> BWNOT unary .)
    LT              reduce using rule 138 (not -> BWNOT unary .)
    LTE             reduce using rule 138 (not -> BWNOT unary .)
    EQ              reduce using rule 138 (not -> BWNOT unary .)
    EQR             reduce using rule 138 (not -> BWNOT unary .)
    NE              reduce using rule 138 (not -> BWNOT unary .)
    NER             reduce using rule 138 (not -> BWNOT unary .)
    INSTANCEOF      reduce using rule 138 (not -> BWNOT unary .)
    ELVIS           reduce using rule 138 (not -> BWNOT unary .)
    ASSIGN          reduce using rule 138 (not -> BWNOT unary .)
    AADD            reduce using rule 138 (not -> BWNOT unary .)
    ASUB            reduce using rule 138 (not -> BWNOT unary .)
    AMUL            reduce using rule 138 (not -> BWNOT unary .)
    ADIV            reduce using rule 138 (not -> BWNOT unary .)
    AREM            reduce using rule 138 (not -> BWNOT unary .)
    AAND            reduce using rule 138 (not -> BWNOT unary .)
    AXOR            reduce using rule 138 (not -> BWNOT unary .)
    AOR             reduce using rule 138 (not -> BWNOT unary .)
    ALSH            reduce using rule 138 (not -> BWNOT unary .)
    ARSH            reduce using rule 138 (not -> BWNOT unary .)
    AUSH            reduce using rule 138 (not -> BWNOT unary .)
    SEMICOLON       reduce using rule 138 (not -> BWNOT unary .)
    RBRACE          reduce using rule 138 (not -> BWNOT unary .)
    COMMA           reduce using rule 138 (not -> BWNOT unary .)
    COLON           reduce using rule 138 (not -> BWNOT unary .)
    RP              reduce using rule 138 (not -> BWNOT unary .)
    RBRACK          reduce using rule 138 (not -> BWNOT unary .)


state 194

    (199) newstandardarray -> NEW type . dims
    (200) newinitializedarray -> NEW type . LBRACE RBRACE LBRACK arguments RBRACK
    (196) newobject -> NEW type . arguments
    (201) dims -> . dims dim
    (202) dims -> . dim
    (215) arguments -> . LP innerarguments RP
    (216) arguments -> . LP RP
    (203) dim -> . LBRACE expression RBRACE

    LBRACE          shift and go to state 293
    LP              shift and go to state 110

    dims                           shift and go to state 292
    arguments                      shift and go to state 294
    dim                            shift and go to state 295

state 195

    (66) type -> idaccess .
    (191) idaccess -> idaccess . DOT ID

    LBRACE          reduce using rule 66 (type -> idaccess .)
    LP              reduce using rule 66 (type -> idaccess .)
    ID              reduce using rule 66 (type -> idaccess .)
    DOT             shift and go to state 120


state 196

    (192) idaccess -> ID .

    DOT             reduce using rule 192 (idaccess -> ID .)
    LBRACE          reduce using rule 192 (idaccess -> ID .)
    LP              reduce using rule 192 (idaccess -> ID .)
    COND            reduce using rule 192 (idaccess -> ID .)
    MUL             reduce using rule 192 (idaccess -> ID .)
    DIV             reduce using rule 192 (idaccess -> ID .)
    REM             reduce using rule 192 (idaccess -> ID .)
    ADD             reduce using rule 192 (idaccess -> ID .)
    SUB             reduce using rule 192 (idaccess -> ID .)
    FIND            reduce using rule 192 (idaccess -> ID .)
    MATCH           reduce using rule 192 (idaccess -> ID .)
    LSH             reduce using rule 192 (idaccess -> ID .)
    RSH             reduce using rule 192 (idaccess -> ID .)
    USH             reduce using rule 192 (idaccess -> ID .)
    BWAND           reduce using rule 192 (idaccess -> ID .)
    XOR             reduce using rule 192 (idaccess -> ID .)
    BWOR            reduce using rule 192 (idaccess -> ID .)
    BOOLAND         reduce using rule 192 (idaccess -> ID .)
    BOOLOR          reduce using rule 192 (idaccess -> ID .)
    GT              reduce using rule 192 (idaccess -> ID .)
    GTE             reduce using rule 192 (idaccess -> ID .)
    LT              reduce using rule 192 (idaccess -> ID .)
    LTE             reduce using rule 192 (idaccess -> ID .)
    EQ              reduce using rule 192 (idaccess -> ID .)
    EQR             reduce using rule 192 (idaccess -> ID .)
    NE              reduce using rule 192 (idaccess -> ID .)
    NER             reduce using rule 192 (idaccess -> ID .)
    INSTANCEOF      reduce using rule 192 (idaccess -> ID .)
    ELVIS           reduce using rule 192 (idaccess -> ID .)
    ASSIGN          reduce using rule 192 (idaccess -> ID .)
    AADD            reduce using rule 192 (idaccess -> ID .)
    ASUB            reduce using rule 192 (idaccess -> ID .)
    AMUL            reduce using rule 192 (idaccess -> ID .)
    ADIV            reduce using rule 192 (idaccess -> ID .)
    AREM            reduce using rule 192 (idaccess -> ID .)
    AAND            reduce using rule 192 (idaccess -> ID .)
    AXOR            reduce using rule 192 (idaccess -> ID .)
    AOR             reduce using rule 192 (idaccess -> ID .)
    ALSH            reduce using rule 192 (idaccess -> ID .)
    ARSH            reduce using rule 192 (idaccess -> ID .)
    AUSH            reduce using rule 192 (idaccess -> ID .)
    SEMICOLON       reduce using rule 192 (idaccess -> ID .)
    RBRACE          reduce using rule 192 (idaccess -> ID .)
    COMMA           reduce using rule 192 (idaccess -> ID .)
    COLON           reduce using rule 192 (idaccess -> ID .)
    RP              reduce using rule 192 (idaccess -> ID .)
    RBRACK          reduce using rule 192 (idaccess -> ID .)
    ID              reduce using rule 192 (idaccess -> ID .)


state 197

    (195) calllocal -> DOLLAR arguments .

    LBRACE          reduce using rule 195 (calllocal -> DOLLAR arguments .)
    DOT             reduce using rule 195 (calllocal -> DOLLAR arguments .)
    NSDOT           reduce using rule 195 (calllocal -> DOLLAR arguments .)
    INCR            reduce using rule 195 (calllocal -> DOLLAR arguments .)
    DECR            reduce using rule 195 (calllocal -> DOLLAR arguments .)
    COND            reduce using rule 195 (calllocal -> DOLLAR arguments .)
    MUL             reduce using rule 195 (calllocal -> DOLLAR arguments .)
    DIV             reduce using rule 195 (calllocal -> DOLLAR arguments .)
    REM             reduce using rule 195 (calllocal -> DOLLAR arguments .)
    ADD             reduce using rule 195 (calllocal -> DOLLAR arguments .)
    SUB             reduce using rule 195 (calllocal -> DOLLAR arguments .)
    FIND            reduce using rule 195 (calllocal -> DOLLAR arguments .)
    MATCH           reduce using rule 195 (calllocal -> DOLLAR arguments .)
    LSH             reduce using rule 195 (calllocal -> DOLLAR arguments .)
    RSH             reduce using rule 195 (calllocal -> DOLLAR arguments .)
    USH             reduce using rule 195 (calllocal -> DOLLAR arguments .)
    BWAND           reduce using rule 195 (calllocal -> DOLLAR arguments .)
    XOR             reduce using rule 195 (calllocal -> DOLLAR arguments .)
    BWOR            reduce using rule 195 (calllocal -> DOLLAR arguments .)
    BOOLAND         reduce using rule 195 (calllocal -> DOLLAR arguments .)
    BOOLOR          reduce using rule 195 (calllocal -> DOLLAR arguments .)
    GT              reduce using rule 195 (calllocal -> DOLLAR arguments .)
    GTE             reduce using rule 195 (calllocal -> DOLLAR arguments .)
    LT              reduce using rule 195 (calllocal -> DOLLAR arguments .)
    LTE             reduce using rule 195 (calllocal -> DOLLAR arguments .)
    EQ              reduce using rule 195 (calllocal -> DOLLAR arguments .)
    EQR             reduce using rule 195 (calllocal -> DOLLAR arguments .)
    NE              reduce using rule 195 (calllocal -> DOLLAR arguments .)
    NER             reduce using rule 195 (calllocal -> DOLLAR arguments .)
    INSTANCEOF      reduce using rule 195 (calllocal -> DOLLAR arguments .)
    ELVIS           reduce using rule 195 (calllocal -> DOLLAR arguments .)
    ASSIGN          reduce using rule 195 (calllocal -> DOLLAR arguments .)
    AADD            reduce using rule 195 (calllocal -> DOLLAR arguments .)
    ASUB            reduce using rule 195 (calllocal -> DOLLAR arguments .)
    AMUL            reduce using rule 195 (calllocal -> DOLLAR arguments .)
    ADIV            reduce using rule 195 (calllocal -> DOLLAR arguments .)
    AREM            reduce using rule 195 (calllocal -> DOLLAR arguments .)
    AAND            reduce using rule 195 (calllocal -> DOLLAR arguments .)
    AXOR            reduce using rule 195 (calllocal -> DOLLAR arguments .)
    AOR             reduce using rule 195 (calllocal -> DOLLAR arguments .)
    ALSH            reduce using rule 195 (calllocal -> DOLLAR arguments .)
    ARSH            reduce using rule 195 (calllocal -> DOLLAR arguments .)
    AUSH            reduce using rule 195 (calllocal -> DOLLAR arguments .)
    SEMICOLON       reduce using rule 195 (calllocal -> DOLLAR arguments .)
    RBRACE          reduce using rule 195 (calllocal -> DOLLAR arguments .)
    COMMA           reduce using rule 195 (calllocal -> DOLLAR arguments .)
    COLON           reduce using rule 195 (calllocal -> DOLLAR arguments .)
    RP              reduce using rule 195 (calllocal -> DOLLAR arguments .)
    RBRACK          reduce using rule 195 (calllocal -> DOLLAR arguments .)


state 198

    (69) declvar -> ID . ASSIGN expression
    (70) declvar -> ID .

    ASSIGN          shift and go to state 200
    COMMA           reduce using rule 70 (declvar -> ID .)
    SEMICOLON       reduce using rule 70 (declvar -> ID .)
    RBRACK          reduce using rule 70 (declvar -> ID .)


state 199

    (7) function -> decltype ID parameters . block
    (47) block -> . LBRACK statements RBRACK
    (48) block -> . LBRACK dstatement RBRACK
    (49) block -> . LBRACK statements dstatement RBRACK
    (50) block -> . LBRACK RBRACK

    LBRACK          shift and go to state 139

    block                          shift and go to state 296

state 200

    (69) declvar -> ID ASSIGN . expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    expression                     shift and go to state 297
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 201

    (8) parameters -> LP . innerparameters RP
    (9) parameters -> LP . RP
    (10) innerparameters -> . innerparameters COMMA declparam
    (11) innerparameters -> . declparam
    (12) declparam -> . decltype ID
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID

    RP              shift and go to state 299
    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    ID              shift and go to state 196

    innerparameters                shift and go to state 298
    declparam                      shift and go to state 300
    decltype                       shift and go to state 301
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 274
    idaccess                       shift and go to state 275

state 202

    (67) declvars -> declvars COMMA . declvar
    (69) declvar -> . ID ASSIGN expression
    (70) declvar -> . ID

    ID              shift and go to state 198

    declvar                        shift and go to state 302

state 203

    (224) lamtypes -> LP . innerlamtypes RP
    (141) primordefcast -> LP . primordefcasttype RP unary
    (142) refcast -> LP . refcasttype RP unarynotaddsub
    (177) precedence -> LP . expression RP
    (226) innerlamtypes -> . innerlamtypes COMMA lamtype
    (227) innerlamtypes -> . lamtype
    (143) primordefcasttype -> . DEF
    (144) primordefcasttype -> . PRIMITIVE
    (145) refcasttype -> . DEF closedbraces
    (146) refcasttype -> . PRIMITIVE closedbraces
    (147) refcasttype -> . idaccess closedbraces
    (148) refcasttype -> . idaccess
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (228) lamtype -> . decltype ID
    (229) lamtype -> . ID
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    DEF             shift and go to state 305
    PRIMITIVE       shift and go to state 306
    ID              shift and go to state 216
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    innerlamtypes                  shift and go to state 303
    primordefcasttype              shift and go to state 130
    unary                          shift and go to state 43
    refcasttype                    shift and go to state 131
    unarynotaddsub                 shift and go to state 52
    expression                     shift and go to state 132
    lamtype                        shift and go to state 304
    idaccess                       shift and go to state 307
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    decltype                       shift and go to state 308
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 11
    pre                            shift and go to state 51
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 204

    (215) arguments -> LP innerarguments . RP
    (217) innerarguments -> innerarguments . COMMA argument

    RP              shift and go to state 309
    COMMA           shift and go to state 310


state 205

    (216) arguments -> LP RP .

    LBRACE          reduce using rule 216 (arguments -> LP RP .)
    DOT             reduce using rule 216 (arguments -> LP RP .)
    NSDOT           reduce using rule 216 (arguments -> LP RP .)
    INCR            reduce using rule 216 (arguments -> LP RP .)
    DECR            reduce using rule 216 (arguments -> LP RP .)
    COND            reduce using rule 216 (arguments -> LP RP .)
    MUL             reduce using rule 216 (arguments -> LP RP .)
    DIV             reduce using rule 216 (arguments -> LP RP .)
    REM             reduce using rule 216 (arguments -> LP RP .)
    ADD             reduce using rule 216 (arguments -> LP RP .)
    SUB             reduce using rule 216 (arguments -> LP RP .)
    FIND            reduce using rule 216 (arguments -> LP RP .)
    MATCH           reduce using rule 216 (arguments -> LP RP .)
    LSH             reduce using rule 216 (arguments -> LP RP .)
    RSH             reduce using rule 216 (arguments -> LP RP .)
    USH             reduce using rule 216 (arguments -> LP RP .)
    BWAND           reduce using rule 216 (arguments -> LP RP .)
    XOR             reduce using rule 216 (arguments -> LP RP .)
    BWOR            reduce using rule 216 (arguments -> LP RP .)
    BOOLAND         reduce using rule 216 (arguments -> LP RP .)
    BOOLOR          reduce using rule 216 (arguments -> LP RP .)
    GT              reduce using rule 216 (arguments -> LP RP .)
    GTE             reduce using rule 216 (arguments -> LP RP .)
    LT              reduce using rule 216 (arguments -> LP RP .)
    LTE             reduce using rule 216 (arguments -> LP RP .)
    EQ              reduce using rule 216 (arguments -> LP RP .)
    EQR             reduce using rule 216 (arguments -> LP RP .)
    NE              reduce using rule 216 (arguments -> LP RP .)
    NER             reduce using rule 216 (arguments -> LP RP .)
    INSTANCEOF      reduce using rule 216 (arguments -> LP RP .)
    ELVIS           reduce using rule 216 (arguments -> LP RP .)
    ASSIGN          reduce using rule 216 (arguments -> LP RP .)
    AADD            reduce using rule 216 (arguments -> LP RP .)
    ASUB            reduce using rule 216 (arguments -> LP RP .)
    AMUL            reduce using rule 216 (arguments -> LP RP .)
    ADIV            reduce using rule 216 (arguments -> LP RP .)
    AREM            reduce using rule 216 (arguments -> LP RP .)
    AAND            reduce using rule 216 (arguments -> LP RP .)
    AXOR            reduce using rule 216 (arguments -> LP RP .)
    AOR             reduce using rule 216 (arguments -> LP RP .)
    ALSH            reduce using rule 216 (arguments -> LP RP .)
    ARSH            reduce using rule 216 (arguments -> LP RP .)
    AUSH            reduce using rule 216 (arguments -> LP RP .)
    SEMICOLON       reduce using rule 216 (arguments -> LP RP .)
    RP              reduce using rule 216 (arguments -> LP RP .)
    RBRACK          reduce using rule 216 (arguments -> LP RP .)
    COMMA           reduce using rule 216 (arguments -> LP RP .)
    RBRACE          reduce using rule 216 (arguments -> LP RP .)
    COLON           reduce using rule 216 (arguments -> LP RP .)


state 206

    (218) innerarguments -> argument .

    RP              reduce using rule 218 (innerarguments -> argument .)
    COMMA           reduce using rule 218 (innerarguments -> argument .)


state 207

    (219) argument -> expression .

    RP              reduce using rule 219 (argument -> expression .)
    COMMA           reduce using rule 219 (argument -> expression .)


state 208

    (220) argument -> lambda .

    RP              reduce using rule 220 (argument -> lambda .)
    COMMA           reduce using rule 220 (argument -> lambda .)


state 209

    (221) argument -> funcref .

    RP              reduce using rule 221 (argument -> funcref .)
    COMMA           reduce using rule 221 (argument -> funcref .)


state 210

    (222) lambda -> lamtypes . ARROW block
    (223) lambda -> lamtypes . ARROW expression

    ARROW           shift and go to state 311


state 211

    (230) funcref -> classfuncref .

    RP              reduce using rule 230 (funcref -> classfuncref .)
    COMMA           reduce using rule 230 (funcref -> classfuncref .)


state 212

    (231) funcref -> constructorfuncref .

    RP              reduce using rule 231 (funcref -> constructorfuncref .)
    COMMA           reduce using rule 231 (funcref -> constructorfuncref .)


state 213

    (232) funcref -> localfuncref .

    RP              reduce using rule 232 (funcref -> localfuncref .)
    COMMA           reduce using rule 232 (funcref -> localfuncref .)


state 214

    (225) lamtypes -> lamtype .

    ARROW           reduce using rule 225 (lamtypes -> lamtype .)


state 215

    (233) classfuncref -> decltype . REF ID
    (234) constructorfuncref -> decltype . REF NEW
    (228) lamtype -> decltype . ID

    REF             shift and go to state 312
    ID              shift and go to state 313


state 216

    (229) lamtype -> ID .
    (192) idaccess -> ID .
    (194) calllocal -> ID . arguments
    (215) arguments -> . LP innerarguments RP
    (216) arguments -> . LP RP

  ! reduce/reduce conflict for RP resolved using rule 192 (idaccess -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 192 (idaccess -> ID .)
  ! shift/reduce conflict for LP resolved as shift
    ARROW           reduce using rule 229 (lamtype -> ID .)
    LBRACE          reduce using rule 192 (idaccess -> ID .)
    DOT             reduce using rule 192 (idaccess -> ID .)
    REF             reduce using rule 192 (idaccess -> ID .)
    ID              reduce using rule 192 (idaccess -> ID .)
    NSDOT           reduce using rule 192 (idaccess -> ID .)
    INCR            reduce using rule 192 (idaccess -> ID .)
    DECR            reduce using rule 192 (idaccess -> ID .)
    COND            reduce using rule 192 (idaccess -> ID .)
    MUL             reduce using rule 192 (idaccess -> ID .)
    DIV             reduce using rule 192 (idaccess -> ID .)
    REM             reduce using rule 192 (idaccess -> ID .)
    ADD             reduce using rule 192 (idaccess -> ID .)
    SUB             reduce using rule 192 (idaccess -> ID .)
    FIND            reduce using rule 192 (idaccess -> ID .)
    MATCH           reduce using rule 192 (idaccess -> ID .)
    LSH             reduce using rule 192 (idaccess -> ID .)
    RSH             reduce using rule 192 (idaccess -> ID .)
    USH             reduce using rule 192 (idaccess -> ID .)
    BWAND           reduce using rule 192 (idaccess -> ID .)
    XOR             reduce using rule 192 (idaccess -> ID .)
    BWOR            reduce using rule 192 (idaccess -> ID .)
    BOOLAND         reduce using rule 192 (idaccess -> ID .)
    BOOLOR          reduce using rule 192 (idaccess -> ID .)
    GT              reduce using rule 192 (idaccess -> ID .)
    GTE             reduce using rule 192 (idaccess -> ID .)
    LT              reduce using rule 192 (idaccess -> ID .)
    LTE             reduce using rule 192 (idaccess -> ID .)
    EQ              reduce using rule 192 (idaccess -> ID .)
    EQR             reduce using rule 192 (idaccess -> ID .)
    NE              reduce using rule 192 (idaccess -> ID .)
    NER             reduce using rule 192 (idaccess -> ID .)
    INSTANCEOF      reduce using rule 192 (idaccess -> ID .)
    ELVIS           reduce using rule 192 (idaccess -> ID .)
    ASSIGN          reduce using rule 192 (idaccess -> ID .)
    AADD            reduce using rule 192 (idaccess -> ID .)
    ASUB            reduce using rule 192 (idaccess -> ID .)
    AMUL            reduce using rule 192 (idaccess -> ID .)
    ADIV            reduce using rule 192 (idaccess -> ID .)
    AREM            reduce using rule 192 (idaccess -> ID .)
    AAND            reduce using rule 192 (idaccess -> ID .)
    AXOR            reduce using rule 192 (idaccess -> ID .)
    AOR             reduce using rule 192 (idaccess -> ID .)
    ALSH            reduce using rule 192 (idaccess -> ID .)
    ARSH            reduce using rule 192 (idaccess -> ID .)
    AUSH            reduce using rule 192 (idaccess -> ID .)
    RP              reduce using rule 192 (idaccess -> ID .)
    COMMA           reduce using rule 192 (idaccess -> ID .)
    LP              shift and go to state 110

  ! RP              [ reduce using rule 229 (lamtype -> ID .) ]
  ! COMMA           [ reduce using rule 229 (lamtype -> ID .) ]
  ! LP              [ reduce using rule 192 (idaccess -> ID .) ]

    arguments                      shift and go to state 109

state 217

    (235) localfuncref -> THIS . REF ID

    REF             shift and go to state 314


state 218

    (62) closedbraces -> closedbraces LBRACE . RBRACE

    RBRACE          shift and go to state 315


state 219

    (63) closedbraces -> LBRACE RBRACE .

    LBRACE          reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    ID              reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    REF             reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    COND            reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    MUL             reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    DIV             reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    REM             reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    ADD             reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    SUB             reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    FIND            reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    MATCH           reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    LSH             reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    RSH             reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    USH             reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    BWAND           reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    XOR             reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    BWOR            reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    BOOLAND         reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    BOOLOR          reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    GT              reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    GTE             reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    LT              reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    LTE             reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    EQ              reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    EQR             reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    NE              reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    NER             reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    INSTANCEOF      reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    ELVIS           reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    ASSIGN          reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    AADD            reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    ASUB            reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    AMUL            reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    ADIV            reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    AREM            reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    AAND            reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    AXOR            reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    AOR             reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    ALSH            reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    ARSH            reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    AUSH            reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    RBRACE          reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    COMMA           reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    COLON           reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    RP              reduce using rule 63 (closedbraces -> LBRACE RBRACE .)
    RBRACK          reduce using rule 63 (closedbraces -> LBRACE RBRACE .)


state 220

    (60) decltype -> idaccess_lbrace RBRACE closedbraces .
    (62) closedbraces -> closedbraces . LBRACE RBRACE

    ID              reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    REF             reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    COND            reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    MUL             reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    DIV             reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    REM             reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    ADD             reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    SUB             reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    FIND            reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    MATCH           reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    LSH             reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    RSH             reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    USH             reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    BWAND           reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    XOR             reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    BWOR            reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    BOOLAND         reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    BOOLOR          reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    GT              reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    GTE             reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    LT              reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    LTE             reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    EQ              reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    EQR             reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    NE              reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    NER             reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    INSTANCEOF      reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    ELVIS           reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    ASSIGN          reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    AADD            reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    ASUB            reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    AMUL            reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    ADIV            reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    AREM            reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    AAND            reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    AXOR            reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    AOR             reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    ALSH            reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    ARSH            reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    AUSH            reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    SEMICOLON       reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    RBRACE          reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    COMMA           reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    COLON           reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    RP              reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    RBRACK          reduce using rule 60 (decltype -> idaccess_lbrace RBRACE closedbraces .)
    LBRACE          shift and go to state 218


state 221

    (166) braceaccess -> idaccess_lbrace expression RBRACE .

    LBRACE          reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    DOT             reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    NSDOT           reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    INCR            reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    DECR            reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    COND            reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    MUL             reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    DIV             reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    REM             reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    ADD             reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    SUB             reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    FIND            reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    MATCH           reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    LSH             reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    RSH             reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    USH             reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    BWAND           reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    XOR             reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    BWOR            reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    BOOLAND         reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    BOOLOR          reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    GT              reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    GTE             reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    LT              reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    LTE             reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    EQ              reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    EQR             reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    NE              reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    NER             reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    INSTANCEOF      reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    ELVIS           reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    ASSIGN          reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    AADD            reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    ASUB            reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    AMUL            reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    ADIV            reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    AREM            reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    AAND            reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    AXOR            reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    AOR             reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    ALSH            reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    ARSH            reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    AUSH            reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    SEMICOLON       reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    RBRACE          reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    COMMA           reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    COLON           reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    RP              reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)
    RBRACK          reduce using rule 166 (braceaccess -> idaccess_lbrace expression RBRACE .)


state 222

    (191) idaccess -> idaccess DOT ID .

    LBRACE          reduce using rule 191 (idaccess -> idaccess DOT ID .)
    DOT             reduce using rule 191 (idaccess -> idaccess DOT ID .)
    LP              reduce using rule 191 (idaccess -> idaccess DOT ID .)
    ID              reduce using rule 191 (idaccess -> idaccess DOT ID .)
    NSDOT           reduce using rule 191 (idaccess -> idaccess DOT ID .)
    INCR            reduce using rule 191 (idaccess -> idaccess DOT ID .)
    DECR            reduce using rule 191 (idaccess -> idaccess DOT ID .)
    COND            reduce using rule 191 (idaccess -> idaccess DOT ID .)
    MUL             reduce using rule 191 (idaccess -> idaccess DOT ID .)
    DIV             reduce using rule 191 (idaccess -> idaccess DOT ID .)
    REM             reduce using rule 191 (idaccess -> idaccess DOT ID .)
    ADD             reduce using rule 191 (idaccess -> idaccess DOT ID .)
    SUB             reduce using rule 191 (idaccess -> idaccess DOT ID .)
    FIND            reduce using rule 191 (idaccess -> idaccess DOT ID .)
    MATCH           reduce using rule 191 (idaccess -> idaccess DOT ID .)
    LSH             reduce using rule 191 (idaccess -> idaccess DOT ID .)
    RSH             reduce using rule 191 (idaccess -> idaccess DOT ID .)
    USH             reduce using rule 191 (idaccess -> idaccess DOT ID .)
    BWAND           reduce using rule 191 (idaccess -> idaccess DOT ID .)
    XOR             reduce using rule 191 (idaccess -> idaccess DOT ID .)
    BWOR            reduce using rule 191 (idaccess -> idaccess DOT ID .)
    BOOLAND         reduce using rule 191 (idaccess -> idaccess DOT ID .)
    BOOLOR          reduce using rule 191 (idaccess -> idaccess DOT ID .)
    GT              reduce using rule 191 (idaccess -> idaccess DOT ID .)
    GTE             reduce using rule 191 (idaccess -> idaccess DOT ID .)
    LT              reduce using rule 191 (idaccess -> idaccess DOT ID .)
    LTE             reduce using rule 191 (idaccess -> idaccess DOT ID .)
    EQ              reduce using rule 191 (idaccess -> idaccess DOT ID .)
    EQR             reduce using rule 191 (idaccess -> idaccess DOT ID .)
    NE              reduce using rule 191 (idaccess -> idaccess DOT ID .)
    NER             reduce using rule 191 (idaccess -> idaccess DOT ID .)
    INSTANCEOF      reduce using rule 191 (idaccess -> idaccess DOT ID .)
    ELVIS           reduce using rule 191 (idaccess -> idaccess DOT ID .)
    ASSIGN          reduce using rule 191 (idaccess -> idaccess DOT ID .)
    AADD            reduce using rule 191 (idaccess -> idaccess DOT ID .)
    ASUB            reduce using rule 191 (idaccess -> idaccess DOT ID .)
    AMUL            reduce using rule 191 (idaccess -> idaccess DOT ID .)
    ADIV            reduce using rule 191 (idaccess -> idaccess DOT ID .)
    AREM            reduce using rule 191 (idaccess -> idaccess DOT ID .)
    AAND            reduce using rule 191 (idaccess -> idaccess DOT ID .)
    AXOR            reduce using rule 191 (idaccess -> idaccess DOT ID .)
    AOR             reduce using rule 191 (idaccess -> idaccess DOT ID .)
    ALSH            reduce using rule 191 (idaccess -> idaccess DOT ID .)
    ARSH            reduce using rule 191 (idaccess -> idaccess DOT ID .)
    AUSH            reduce using rule 191 (idaccess -> idaccess DOT ID .)
    SEMICOLON       reduce using rule 191 (idaccess -> idaccess DOT ID .)
    RBRACE          reduce using rule 191 (idaccess -> idaccess DOT ID .)
    COMMA           reduce using rule 191 (idaccess -> idaccess DOT ID .)
    COLON           reduce using rule 191 (idaccess -> idaccess DOT ID .)
    RP              reduce using rule 191 (idaccess -> idaccess DOT ID .)
    RBRACK          reduce using rule 191 (idaccess -> idaccess DOT ID .)
    REF             reduce using rule 191 (idaccess -> idaccess DOT ID .)


state 223

    (204) listinitializer -> LBRACE optional_expressions RBRACE .

    LBRACE          reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    DOT             reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    NSDOT           reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    INCR            reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    DECR            reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    COND            reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    MUL             reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    DIV             reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    REM             reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    ADD             reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    SUB             reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    FIND            reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    MATCH           reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    LSH             reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    RSH             reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    USH             reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    BWAND           reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    XOR             reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    BWOR            reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    BOOLAND         reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    BOOLOR          reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    GT              reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    GTE             reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    LT              reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    LTE             reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    EQ              reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    EQR             reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    NE              reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    NER             reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    INSTANCEOF      reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    ELVIS           reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    ASSIGN          reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    AADD            reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    ASUB            reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    AMUL            reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    ADIV            reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    AREM            reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    AAND            reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    AXOR            reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    AOR             reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    ALSH            reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    ARSH            reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    AUSH            reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    SEMICOLON       reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    RBRACE          reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    COMMA           reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    COLON           reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    RP              reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)
    RBRACK          reduce using rule 204 (listinitializer -> LBRACE optional_expressions RBRACE .)


state 224

    (209) mapinitializer -> LBRACE optional_maptokens RBRACE .

    LBRACE          reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    DOT             reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    NSDOT           reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    INCR            reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    DECR            reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    COND            reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    MUL             reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    DIV             reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    REM             reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    ADD             reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    SUB             reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    FIND            reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    MATCH           reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    LSH             reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    RSH             reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    USH             reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    BWAND           reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    XOR             reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    BWOR            reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    BOOLAND         reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    BOOLOR          reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    GT              reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    GTE             reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    LT              reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    LTE             reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    EQ              reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    EQR             reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    NE              reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    NER             reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    INSTANCEOF      reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    ELVIS           reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    ASSIGN          reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    AADD            reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    ASUB            reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    AMUL            reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    ADIV            reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    AREM            reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    AAND            reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    AXOR            reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    AOR             reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    ALSH            reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    ARSH            reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    AUSH            reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    SEMICOLON       reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    RBRACE          reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    COMMA           reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    COLON           reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    RP              reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)
    RBRACK          reduce using rule 209 (mapinitializer -> LBRACE optional_maptokens RBRACE .)


state 225

    (212) maptokens -> maptokens COMMA . maptoken
    (214) maptoken -> . expression COLON expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    maptoken                       shift and go to state 316
    expression                     shift and go to state 317
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 226

    (207) expressions -> expression COMMA . expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    expression                     shift and go to state 318
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 227

    (214) maptoken -> expression COLON . expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    expression                     shift and go to state 319
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 228

    (25) if_else -> IF LP expression . RP trailer ELSE trailer
    (24) if -> IF LP expression . RP trailer

    RP              shift and go to state 320


state 229

    (141) primordefcast -> LP primordefcasttype RP . unary
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    unary                          shift and go to state 321
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 230

    (142) refcast -> LP refcasttype RP . unarynotaddsub
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    unarynotaddsub                 shift and go to state 322
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 231

    (177) precedence -> LP expression RP .

    LBRACE          reduce using rule 177 (precedence -> LP expression RP .)
    DOT             reduce using rule 177 (precedence -> LP expression RP .)
    NSDOT           reduce using rule 177 (precedence -> LP expression RP .)
    INCR            reduce using rule 177 (precedence -> LP expression RP .)
    DECR            reduce using rule 177 (precedence -> LP expression RP .)
    COND            reduce using rule 177 (precedence -> LP expression RP .)
    MUL             reduce using rule 177 (precedence -> LP expression RP .)
    DIV             reduce using rule 177 (precedence -> LP expression RP .)
    REM             reduce using rule 177 (precedence -> LP expression RP .)
    ADD             reduce using rule 177 (precedence -> LP expression RP .)
    SUB             reduce using rule 177 (precedence -> LP expression RP .)
    FIND            reduce using rule 177 (precedence -> LP expression RP .)
    MATCH           reduce using rule 177 (precedence -> LP expression RP .)
    LSH             reduce using rule 177 (precedence -> LP expression RP .)
    RSH             reduce using rule 177 (precedence -> LP expression RP .)
    USH             reduce using rule 177 (precedence -> LP expression RP .)
    BWAND           reduce using rule 177 (precedence -> LP expression RP .)
    XOR             reduce using rule 177 (precedence -> LP expression RP .)
    BWOR            reduce using rule 177 (precedence -> LP expression RP .)
    BOOLAND         reduce using rule 177 (precedence -> LP expression RP .)
    BOOLOR          reduce using rule 177 (precedence -> LP expression RP .)
    GT              reduce using rule 177 (precedence -> LP expression RP .)
    GTE             reduce using rule 177 (precedence -> LP expression RP .)
    LT              reduce using rule 177 (precedence -> LP expression RP .)
    LTE             reduce using rule 177 (precedence -> LP expression RP .)
    EQ              reduce using rule 177 (precedence -> LP expression RP .)
    EQR             reduce using rule 177 (precedence -> LP expression RP .)
    NE              reduce using rule 177 (precedence -> LP expression RP .)
    NER             reduce using rule 177 (precedence -> LP expression RP .)
    INSTANCEOF      reduce using rule 177 (precedence -> LP expression RP .)
    ELVIS           reduce using rule 177 (precedence -> LP expression RP .)
    ASSIGN          reduce using rule 177 (precedence -> LP expression RP .)
    AADD            reduce using rule 177 (precedence -> LP expression RP .)
    ASUB            reduce using rule 177 (precedence -> LP expression RP .)
    AMUL            reduce using rule 177 (precedence -> LP expression RP .)
    ADIV            reduce using rule 177 (precedence -> LP expression RP .)
    AREM            reduce using rule 177 (precedence -> LP expression RP .)
    AAND            reduce using rule 177 (precedence -> LP expression RP .)
    AXOR            reduce using rule 177 (precedence -> LP expression RP .)
    AOR             reduce using rule 177 (precedence -> LP expression RP .)
    ALSH            reduce using rule 177 (precedence -> LP expression RP .)
    ARSH            reduce using rule 177 (precedence -> LP expression RP .)
    AUSH            reduce using rule 177 (precedence -> LP expression RP .)
    SEMICOLON       reduce using rule 177 (precedence -> LP expression RP .)
    RBRACE          reduce using rule 177 (precedence -> LP expression RP .)
    COMMA           reduce using rule 177 (precedence -> LP expression RP .)
    COLON           reduce using rule 177 (precedence -> LP expression RP .)
    RP              reduce using rule 177 (precedence -> LP expression RP .)
    RBRACK          reduce using rule 177 (precedence -> LP expression RP .)


state 232

    (145) refcasttype -> DEF closedbraces .
    (62) closedbraces -> closedbraces . LBRACE RBRACE

    RP              reduce using rule 145 (refcasttype -> DEF closedbraces .)
    LBRACE          shift and go to state 218


state 233

    (146) refcasttype -> PRIMITIVE closedbraces .
    (62) closedbraces -> closedbraces . LBRACE RBRACE

    RP              reduce using rule 146 (refcasttype -> PRIMITIVE closedbraces .)
    LBRACE          shift and go to state 218


state 234

    (147) refcasttype -> idaccess closedbraces .
    (62) closedbraces -> closedbraces . LBRACE RBRACE

    RP              reduce using rule 147 (refcasttype -> idaccess closedbraces .)
    LBRACE          shift and go to state 218


state 235

    (193) idaccess_lbrace -> idaccess LBRACE .
    (63) closedbraces -> LBRACE . RBRACE

  ! shift/reduce conflict for RBRACE resolved as shift
    INCR            reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    DECR            reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    ADD             reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    SUB             reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    BOOLNOT         reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    BWNOT           reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    LP              reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    NEW             reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    TRUE            reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    FALSE           reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    NULL            reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    STRING          reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    REGEX           reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    LBRACE          reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    ID              reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    DOLLAR          reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    OCTAL           reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    HEX             reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    INTEGER         reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    DECIMAL         reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .)
    RBRACE          shift and go to state 219

  ! RBRACE          [ reduce using rule 193 (idaccess_lbrace -> idaccess LBRACE .) ]


state 236

    (26) while -> WHILE LP expression . RP trailer_or_empty

    RP              shift and go to state 323


state 237

    (27) for -> FOR LP initializer . SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty

    SEMICOLON       shift and go to state 324


state 238

    (28) each -> FOR LP decltype . ID COLON expression RP trailer
    (57) declaration -> decltype . declvars
    (67) declvars -> . declvars COMMA declvar
    (68) declvars -> . declvar
    (69) declvar -> . ID ASSIGN expression
    (70) declvar -> . ID

    ID              shift and go to state 325

    declvars                       shift and go to state 107
    declvar                        shift and go to state 108

state 239

    (29) ineach -> FOR LP ID . IN expression RP trailer
    (192) idaccess -> ID .
    (194) calllocal -> ID . arguments
    (215) arguments -> . LP innerarguments RP
    (216) arguments -> . LP RP

  ! shift/reduce conflict for LP resolved as shift
    IN              shift and go to state 326
    LBRACE          reduce using rule 192 (idaccess -> ID .)
    DOT             reduce using rule 192 (idaccess -> ID .)
    ID              reduce using rule 192 (idaccess -> ID .)
    NSDOT           reduce using rule 192 (idaccess -> ID .)
    INCR            reduce using rule 192 (idaccess -> ID .)
    DECR            reduce using rule 192 (idaccess -> ID .)
    COND            reduce using rule 192 (idaccess -> ID .)
    MUL             reduce using rule 192 (idaccess -> ID .)
    DIV             reduce using rule 192 (idaccess -> ID .)
    REM             reduce using rule 192 (idaccess -> ID .)
    ADD             reduce using rule 192 (idaccess -> ID .)
    SUB             reduce using rule 192 (idaccess -> ID .)
    FIND            reduce using rule 192 (idaccess -> ID .)
    MATCH           reduce using rule 192 (idaccess -> ID .)
    LSH             reduce using rule 192 (idaccess -> ID .)
    RSH             reduce using rule 192 (idaccess -> ID .)
    USH             reduce using rule 192 (idaccess -> ID .)
    BWAND           reduce using rule 192 (idaccess -> ID .)
    XOR             reduce using rule 192 (idaccess -> ID .)
    BWOR            reduce using rule 192 (idaccess -> ID .)
    BOOLAND         reduce using rule 192 (idaccess -> ID .)
    BOOLOR          reduce using rule 192 (idaccess -> ID .)
    GT              reduce using rule 192 (idaccess -> ID .)
    GTE             reduce using rule 192 (idaccess -> ID .)
    LT              reduce using rule 192 (idaccess -> ID .)
    LTE             reduce using rule 192 (idaccess -> ID .)
    EQ              reduce using rule 192 (idaccess -> ID .)
    EQR             reduce using rule 192 (idaccess -> ID .)
    NE              reduce using rule 192 (idaccess -> ID .)
    NER             reduce using rule 192 (idaccess -> ID .)
    INSTANCEOF      reduce using rule 192 (idaccess -> ID .)
    ELVIS           reduce using rule 192 (idaccess -> ID .)
    ASSIGN          reduce using rule 192 (idaccess -> ID .)
    AADD            reduce using rule 192 (idaccess -> ID .)
    ASUB            reduce using rule 192 (idaccess -> ID .)
    AMUL            reduce using rule 192 (idaccess -> ID .)
    ADIV            reduce using rule 192 (idaccess -> ID .)
    AREM            reduce using rule 192 (idaccess -> ID .)
    AAND            reduce using rule 192 (idaccess -> ID .)
    AXOR            reduce using rule 192 (idaccess -> ID .)
    AOR             reduce using rule 192 (idaccess -> ID .)
    ALSH            reduce using rule 192 (idaccess -> ID .)
    ARSH            reduce using rule 192 (idaccess -> ID .)
    AUSH            reduce using rule 192 (idaccess -> ID .)
    SEMICOLON       reduce using rule 192 (idaccess -> ID .)
    LP              shift and go to state 110

  ! LP              [ reduce using rule 192 (idaccess -> ID .) ]

    arguments                      shift and go to state 109

state 240

    (53) initializer -> expression .

    SEMICOLON       reduce using rule 53 (initializer -> expression .)


state 241

    (52) initializer -> declaration .

    SEMICOLON       reduce using rule 52 (initializer -> declaration .)


state 242

    (30) try -> TRY block traps .
    (71) traps -> traps . trap
    (73) trap -> . CATCH LP type ID RP block

    IF              reduce using rule 30 (try -> TRY block traps .)
    WHILE           reduce using rule 30 (try -> TRY block traps .)
    FOR             reduce using rule 30 (try -> TRY block traps .)
    TRY             reduce using rule 30 (try -> TRY block traps .)
    DO              reduce using rule 30 (try -> TRY block traps .)
    CONTINUE        reduce using rule 30 (try -> TRY block traps .)
    BREAK           reduce using rule 30 (try -> TRY block traps .)
    RETURN          reduce using rule 30 (try -> TRY block traps .)
    THROW           reduce using rule 30 (try -> TRY block traps .)
    DEF             reduce using rule 30 (try -> TRY block traps .)
    PRIMITIVE       reduce using rule 30 (try -> TRY block traps .)
    ID              reduce using rule 30 (try -> TRY block traps .)
    INCR            reduce using rule 30 (try -> TRY block traps .)
    DECR            reduce using rule 30 (try -> TRY block traps .)
    ADD             reduce using rule 30 (try -> TRY block traps .)
    SUB             reduce using rule 30 (try -> TRY block traps .)
    BOOLNOT         reduce using rule 30 (try -> TRY block traps .)
    BWNOT           reduce using rule 30 (try -> TRY block traps .)
    LP              reduce using rule 30 (try -> TRY block traps .)
    NEW             reduce using rule 30 (try -> TRY block traps .)
    TRUE            reduce using rule 30 (try -> TRY block traps .)
    FALSE           reduce using rule 30 (try -> TRY block traps .)
    NULL            reduce using rule 30 (try -> TRY block traps .)
    STRING          reduce using rule 30 (try -> TRY block traps .)
    REGEX           reduce using rule 30 (try -> TRY block traps .)
    LBRACE          reduce using rule 30 (try -> TRY block traps .)
    DOLLAR          reduce using rule 30 (try -> TRY block traps .)
    OCTAL           reduce using rule 30 (try -> TRY block traps .)
    HEX             reduce using rule 30 (try -> TRY block traps .)
    INTEGER         reduce using rule 30 (try -> TRY block traps .)
    DECIMAL         reduce using rule 30 (try -> TRY block traps .)
    $end            reduce using rule 30 (try -> TRY block traps .)
    RBRACK          reduce using rule 30 (try -> TRY block traps .)
    ELSE            reduce using rule 30 (try -> TRY block traps .)
    CATCH           shift and go to state 244

    trap                           shift and go to state 327

state 243

    (72) traps -> trap .

    CATCH           reduce using rule 72 (traps -> trap .)
    IF              reduce using rule 72 (traps -> trap .)
    WHILE           reduce using rule 72 (traps -> trap .)
    FOR             reduce using rule 72 (traps -> trap .)
    TRY             reduce using rule 72 (traps -> trap .)
    DO              reduce using rule 72 (traps -> trap .)
    CONTINUE        reduce using rule 72 (traps -> trap .)
    BREAK           reduce using rule 72 (traps -> trap .)
    RETURN          reduce using rule 72 (traps -> trap .)
    THROW           reduce using rule 72 (traps -> trap .)
    DEF             reduce using rule 72 (traps -> trap .)
    PRIMITIVE       reduce using rule 72 (traps -> trap .)
    ID              reduce using rule 72 (traps -> trap .)
    INCR            reduce using rule 72 (traps -> trap .)
    DECR            reduce using rule 72 (traps -> trap .)
    ADD             reduce using rule 72 (traps -> trap .)
    SUB             reduce using rule 72 (traps -> trap .)
    BOOLNOT         reduce using rule 72 (traps -> trap .)
    BWNOT           reduce using rule 72 (traps -> trap .)
    LP              reduce using rule 72 (traps -> trap .)
    NEW             reduce using rule 72 (traps -> trap .)
    TRUE            reduce using rule 72 (traps -> trap .)
    FALSE           reduce using rule 72 (traps -> trap .)
    NULL            reduce using rule 72 (traps -> trap .)
    STRING          reduce using rule 72 (traps -> trap .)
    REGEX           reduce using rule 72 (traps -> trap .)
    LBRACE          reduce using rule 72 (traps -> trap .)
    DOLLAR          reduce using rule 72 (traps -> trap .)
    OCTAL           reduce using rule 72 (traps -> trap .)
    HEX             reduce using rule 72 (traps -> trap .)
    INTEGER         reduce using rule 72 (traps -> trap .)
    DECIMAL         reduce using rule 72 (traps -> trap .)
    $end            reduce using rule 72 (traps -> trap .)
    RBRACK          reduce using rule 72 (traps -> trap .)
    ELSE            reduce using rule 72 (traps -> trap .)


state 244

    (73) trap -> CATCH . LP type ID RP block

    LP              shift and go to state 328


state 245

    (47) block -> LBRACK statements . RBRACK
    (49) block -> LBRACK statements . dstatement RBRACK
    (13) statements -> statements . statement
    (31) dstatement -> . do
    (32) dstatement -> . declaration
    (33) dstatement -> . continue
    (34) dstatement -> . break
    (35) dstatement -> . return
    (36) dstatement -> . throw
    (37) dstatement -> . expression
    (15) statement -> . rstatement
    (16) statement -> . dstatement SEMICOLON
    (38) do -> . DO block WHILE LP expression RP
    (57) declaration -> . decltype declvars
    (39) continue -> . CONTINUE
    (40) break -> . BREAK
    (41) return -> . RETURN optional_expression
    (42) throw -> . THROW expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (17) rstatement -> . if_else
    (18) rstatement -> . if
    (19) rstatement -> . while
    (20) rstatement -> . for
    (21) rstatement -> . each
    (22) rstatement -> . ineach
    (23) rstatement -> . try
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (25) if_else -> . IF LP expression RP trailer ELSE trailer
    (24) if -> . IF LP expression RP trailer
    (26) while -> . WHILE LP expression RP trailer_or_empty
    (27) for -> . FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty
    (28) each -> . FOR LP decltype ID COLON expression RP trailer
    (29) ineach -> . FOR LP ID IN expression RP trailer
    (30) try -> . TRY block traps
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    RBRACK          shift and go to state 329
    DO              shift and go to state 35
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 37
    RETURN          shift and go to state 38
    THROW           shift and go to state 39
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    TRY             shift and go to state 34
    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    ID              shift and go to state 7
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    dstatement                     shift and go to state 330
    statement                      shift and go to state 104
    do                             shift and go to state 19
    declaration                    shift and go to state 20
    continue                       shift and go to state 21
    break                          shift and go to state 22
    return                         shift and go to state 23
    throw                          shift and go to state 24
    expression                     shift and go to state 25
    rstatement                     shift and go to state 8
    decltype                       shift and go to state 105
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    if_else                        shift and go to state 12
    if                             shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    each                           shift and go to state 16
    ineach                         shift and go to state 17
    try                            shift and go to state 18
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 11
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    idaccess                       shift and go to state 28
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 246

    (50) block -> LBRACK RBRACK .

    CATCH           reduce using rule 50 (block -> LBRACK RBRACK .)
    WHILE           reduce using rule 50 (block -> LBRACK RBRACK .)
    DEF             reduce using rule 50 (block -> LBRACK RBRACK .)
    PRIMITIVE       reduce using rule 50 (block -> LBRACK RBRACK .)
    IF              reduce using rule 50 (block -> LBRACK RBRACK .)
    FOR             reduce using rule 50 (block -> LBRACK RBRACK .)
    TRY             reduce using rule 50 (block -> LBRACK RBRACK .)
    DO              reduce using rule 50 (block -> LBRACK RBRACK .)
    CONTINUE        reduce using rule 50 (block -> LBRACK RBRACK .)
    BREAK           reduce using rule 50 (block -> LBRACK RBRACK .)
    RETURN          reduce using rule 50 (block -> LBRACK RBRACK .)
    THROW           reduce using rule 50 (block -> LBRACK RBRACK .)
    ID              reduce using rule 50 (block -> LBRACK RBRACK .)
    INCR            reduce using rule 50 (block -> LBRACK RBRACK .)
    DECR            reduce using rule 50 (block -> LBRACK RBRACK .)
    ADD             reduce using rule 50 (block -> LBRACK RBRACK .)
    SUB             reduce using rule 50 (block -> LBRACK RBRACK .)
    BOOLNOT         reduce using rule 50 (block -> LBRACK RBRACK .)
    BWNOT           reduce using rule 50 (block -> LBRACK RBRACK .)
    LP              reduce using rule 50 (block -> LBRACK RBRACK .)
    NEW             reduce using rule 50 (block -> LBRACK RBRACK .)
    TRUE            reduce using rule 50 (block -> LBRACK RBRACK .)
    FALSE           reduce using rule 50 (block -> LBRACK RBRACK .)
    NULL            reduce using rule 50 (block -> LBRACK RBRACK .)
    STRING          reduce using rule 50 (block -> LBRACK RBRACK .)
    REGEX           reduce using rule 50 (block -> LBRACK RBRACK .)
    LBRACE          reduce using rule 50 (block -> LBRACK RBRACK .)
    DOLLAR          reduce using rule 50 (block -> LBRACK RBRACK .)
    OCTAL           reduce using rule 50 (block -> LBRACK RBRACK .)
    HEX             reduce using rule 50 (block -> LBRACK RBRACK .)
    INTEGER         reduce using rule 50 (block -> LBRACK RBRACK .)
    DECIMAL         reduce using rule 50 (block -> LBRACK RBRACK .)
    $end            reduce using rule 50 (block -> LBRACK RBRACK .)
    RP              reduce using rule 50 (block -> LBRACK RBRACK .)
    COMMA           reduce using rule 50 (block -> LBRACK RBRACK .)
    ELSE            reduce using rule 50 (block -> LBRACK RBRACK .)
    RBRACK          reduce using rule 50 (block -> LBRACK RBRACK .)


state 247

    (48) block -> LBRACK dstatement . RBRACK
    (16) statement -> dstatement . SEMICOLON

    RBRACK          shift and go to state 331
    SEMICOLON       shift and go to state 111


state 248

    (38) do -> DO block WHILE . LP expression RP

    LP              shift and go to state 332


state 249

    (110) conditional -> noncondexpression COND expression . COLON expression

    COLON           shift and go to state 333


state 250

    (82) binary -> noncondexpression MUL noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    MUL             reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    DIV             reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    REM             reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    ADD             reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    SUB             reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    ASSIGN          reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    AADD            reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    ASUB            reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    AMUL            reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    ADIV            reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    AREM            reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    AAND            reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    AXOR            reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    AOR             reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    ALSH            reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    ARSH            reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    AUSH            reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    SEMICOLON       reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    RBRACE          reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    COMMA           reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    COLON           reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    RP              reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    RBRACK          reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .)
    FIND            shift and go to state 150
    MATCH           shift and go to state 151
    LSH             shift and go to state 152
    RSH             shift and go to state 153
    USH             shift and go to state 154
    BWAND           shift and go to state 155
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    GT              shift and go to state 160
    GTE             shift and go to state 161
    LT              shift and go to state 162
    LTE             shift and go to state 163
    EQ              shift and go to state 164
    EQR             shift and go to state 165
    NE              shift and go to state 166
    NER             shift and go to state 167
    INSTANCEOF      shift and go to state 168
    ELVIS           shift and go to state 169

  ! FIND            [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! MATCH           [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! LSH             [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! RSH             [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! USH             [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! BWAND           [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! XOR             [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! BWOR            [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! GT              [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! GTE             [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! LT              [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! LTE             [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! EQ              [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! EQR             [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! NE              [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! NER             [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! INSTANCEOF      [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! ELVIS           [ reduce using rule 82 (binary -> noncondexpression MUL noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]


state 251

    (83) binary -> noncondexpression DIV noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    MUL             reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    DIV             reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    REM             reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    ADD             reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    SUB             reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    ASSIGN          reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    AADD            reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    ASUB            reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    AMUL            reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    ADIV            reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    AREM            reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    AAND            reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    AXOR            reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    AOR             reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    ALSH            reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    ARSH            reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    AUSH            reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    SEMICOLON       reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    RBRACE          reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    COMMA           reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    COLON           reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    RP              reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    RBRACK          reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .)
    FIND            shift and go to state 150
    MATCH           shift and go to state 151
    LSH             shift and go to state 152
    RSH             shift and go to state 153
    USH             shift and go to state 154
    BWAND           shift and go to state 155
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    GT              shift and go to state 160
    GTE             shift and go to state 161
    LT              shift and go to state 162
    LTE             shift and go to state 163
    EQ              shift and go to state 164
    EQR             shift and go to state 165
    NE              shift and go to state 166
    NER             shift and go to state 167
    INSTANCEOF      shift and go to state 168
    ELVIS           shift and go to state 169

  ! FIND            [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! MATCH           [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! LSH             [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! RSH             [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! USH             [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! BWAND           [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! XOR             [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! BWOR            [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! GT              [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! GTE             [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! LT              [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! LTE             [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! EQ              [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! EQR             [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! NE              [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! NER             [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! INSTANCEOF      [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! ELVIS           [ reduce using rule 83 (binary -> noncondexpression DIV noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]


state 252

    (84) binary -> noncondexpression REM noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    MUL             reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    DIV             reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    REM             reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    ADD             reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    SUB             reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    ASSIGN          reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    AADD            reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    ASUB            reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    AMUL            reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    ADIV            reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    AREM            reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    AAND            reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    AXOR            reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    AOR             reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    ALSH            reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    ARSH            reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    AUSH            reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    SEMICOLON       reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    RBRACE          reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    COMMA           reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    COLON           reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    RP              reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    RBRACK          reduce using rule 84 (binary -> noncondexpression REM noncondexpression .)
    FIND            shift and go to state 150
    MATCH           shift and go to state 151
    LSH             shift and go to state 152
    RSH             shift and go to state 153
    USH             shift and go to state 154
    BWAND           shift and go to state 155
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    GT              shift and go to state 160
    GTE             shift and go to state 161
    LT              shift and go to state 162
    LTE             shift and go to state 163
    EQ              shift and go to state 164
    EQR             shift and go to state 165
    NE              shift and go to state 166
    NER             shift and go to state 167
    INSTANCEOF      shift and go to state 168
    ELVIS           shift and go to state 169

  ! FIND            [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! MATCH           [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! LSH             [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! RSH             [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! USH             [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! BWAND           [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! XOR             [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! BWOR            [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! GT              [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! GTE             [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! LT              [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! LTE             [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! EQ              [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! EQR             [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! NE              [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! NER             [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! INSTANCEOF      [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! ELVIS           [ reduce using rule 84 (binary -> noncondexpression REM noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]


state 253

    (85) binary -> noncondexpression ADD noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    ADD             reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    SUB             reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    ASSIGN          reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    AADD            reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    ASUB            reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    AMUL            reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    ADIV            reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    AREM            reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    AAND            reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    AXOR            reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    AOR             reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    ALSH            reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    ARSH            reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    AUSH            reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    SEMICOLON       reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    RBRACE          reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    COMMA           reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    COLON           reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    RP              reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    RBRACK          reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .)
    MUL             shift and go to state 145
    DIV             shift and go to state 146
    REM             shift and go to state 147
    FIND            shift and go to state 150
    MATCH           shift and go to state 151
    LSH             shift and go to state 152
    RSH             shift and go to state 153
    USH             shift and go to state 154
    BWAND           shift and go to state 155
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    GT              shift and go to state 160
    GTE             shift and go to state 161
    LT              shift and go to state 162
    LTE             shift and go to state 163
    EQ              shift and go to state 164
    EQR             shift and go to state 165
    NE              shift and go to state 166
    NER             shift and go to state 167
    INSTANCEOF      shift and go to state 168
    ELVIS           shift and go to state 169

  ! MUL             [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! DIV             [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! REM             [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! FIND            [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! MATCH           [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! LSH             [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! RSH             [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! USH             [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! BWAND           [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! XOR             [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! BWOR            [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! GT              [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! GTE             [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! LT              [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! LTE             [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! EQ              [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! EQR             [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! NE              [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! NER             [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! INSTANCEOF      [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! ELVIS           [ reduce using rule 85 (binary -> noncondexpression ADD noncondexpression .) ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]


state 254

    (86) binary -> noncondexpression SUB noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    ADD             reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    SUB             reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    ASSIGN          reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    AADD            reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    ASUB            reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    AMUL            reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    ADIV            reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    AREM            reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    AAND            reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    AXOR            reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    AOR             reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    ALSH            reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    ARSH            reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    AUSH            reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    SEMICOLON       reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    RBRACE          reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    COMMA           reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    COLON           reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    RP              reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    RBRACK          reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .)
    MUL             shift and go to state 145
    DIV             shift and go to state 146
    REM             shift and go to state 147
    FIND            shift and go to state 150
    MATCH           shift and go to state 151
    LSH             shift and go to state 152
    RSH             shift and go to state 153
    USH             shift and go to state 154
    BWAND           shift and go to state 155
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    GT              shift and go to state 160
    GTE             shift and go to state 161
    LT              shift and go to state 162
    LTE             shift and go to state 163
    EQ              shift and go to state 164
    EQR             shift and go to state 165
    NE              shift and go to state 166
    NER             shift and go to state 167
    INSTANCEOF      shift and go to state 168
    ELVIS           shift and go to state 169

  ! MUL             [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! DIV             [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! REM             [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! FIND            [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! MATCH           [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! LSH             [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! RSH             [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! USH             [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! BWAND           [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! XOR             [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! BWOR            [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! GT              [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! GTE             [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! LT              [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! LTE             [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! EQ              [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! EQR             [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! NE              [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! NER             [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! INSTANCEOF      [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! ELVIS           [ reduce using rule 86 (binary -> noncondexpression SUB noncondexpression .) ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]


state 255

    (87) binary -> noncondexpression FIND noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    MUL             reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    DIV             reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    REM             reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    ADD             reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    SUB             reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    FIND            reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    MATCH           reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    ASSIGN          reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    AADD            reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    ASUB            reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    AMUL            reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    ADIV            reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    AREM            reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    AAND            reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    AXOR            reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    AOR             reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    ALSH            reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    ARSH            reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    AUSH            reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    SEMICOLON       reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    RBRACE          reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    COMMA           reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    COLON           reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    RP              reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    RBRACK          reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .)
    LSH             shift and go to state 152
    RSH             shift and go to state 153
    USH             shift and go to state 154
    BWAND           shift and go to state 155
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    GT              shift and go to state 160
    GTE             shift and go to state 161
    LT              shift and go to state 162
    LTE             shift and go to state 163
    EQ              shift and go to state 164
    EQR             shift and go to state 165
    NE              shift and go to state 166
    NER             shift and go to state 167
    INSTANCEOF      shift and go to state 168
    ELVIS           shift and go to state 169

  ! LSH             [ reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .) ]
  ! RSH             [ reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .) ]
  ! USH             [ reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .) ]
  ! BWAND           [ reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .) ]
  ! XOR             [ reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .) ]
  ! BWOR            [ reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .) ]
  ! GT              [ reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .) ]
  ! GTE             [ reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .) ]
  ! LT              [ reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .) ]
  ! LTE             [ reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .) ]
  ! EQ              [ reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .) ]
  ! EQR             [ reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .) ]
  ! NE              [ reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .) ]
  ! NER             [ reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .) ]
  ! INSTANCEOF      [ reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .) ]
  ! ELVIS           [ reduce using rule 87 (binary -> noncondexpression FIND noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]
  ! FIND            [ shift and go to state 150 ]
  ! MATCH           [ shift and go to state 151 ]


state 256

    (88) binary -> noncondexpression MATCH noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    MUL             reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    DIV             reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    REM             reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    ADD             reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    SUB             reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    FIND            reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    MATCH           reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    ASSIGN          reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    AADD            reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    ASUB            reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    AMUL            reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    ADIV            reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    AREM            reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    AAND            reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    AXOR            reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    AOR             reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    ALSH            reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    ARSH            reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    AUSH            reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    SEMICOLON       reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    RBRACE          reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    COMMA           reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    COLON           reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    RP              reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    RBRACK          reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .)
    LSH             shift and go to state 152
    RSH             shift and go to state 153
    USH             shift and go to state 154
    BWAND           shift and go to state 155
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    GT              shift and go to state 160
    GTE             shift and go to state 161
    LT              shift and go to state 162
    LTE             shift and go to state 163
    EQ              shift and go to state 164
    EQR             shift and go to state 165
    NE              shift and go to state 166
    NER             shift and go to state 167
    INSTANCEOF      shift and go to state 168
    ELVIS           shift and go to state 169

  ! LSH             [ reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .) ]
  ! RSH             [ reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .) ]
  ! USH             [ reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .) ]
  ! BWAND           [ reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .) ]
  ! XOR             [ reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .) ]
  ! BWOR            [ reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .) ]
  ! GT              [ reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .) ]
  ! GTE             [ reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .) ]
  ! LT              [ reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .) ]
  ! LTE             [ reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .) ]
  ! EQ              [ reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .) ]
  ! EQR             [ reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .) ]
  ! NE              [ reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .) ]
  ! NER             [ reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .) ]
  ! INSTANCEOF      [ reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .) ]
  ! ELVIS           [ reduce using rule 88 (binary -> noncondexpression MATCH noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]
  ! FIND            [ shift and go to state 150 ]
  ! MATCH           [ shift and go to state 151 ]


state 257

    (89) binary -> noncondexpression LSH noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    MUL             reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    DIV             reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    REM             reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    ADD             reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    SUB             reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    FIND            reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    MATCH           reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    LSH             reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    RSH             reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    USH             reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    ASSIGN          reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    AADD            reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    ASUB            reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    AMUL            reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    ADIV            reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    AREM            reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    AAND            reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    AXOR            reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    AOR             reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    ALSH            reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    ARSH            reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    AUSH            reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    SEMICOLON       reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    RBRACE          reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    COMMA           reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    COLON           reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    RP              reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    RBRACK          reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .)
    BWAND           shift and go to state 155
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    GT              shift and go to state 160
    GTE             shift and go to state 161
    LT              shift and go to state 162
    LTE             shift and go to state 163
    EQ              shift and go to state 164
    EQR             shift and go to state 165
    NE              shift and go to state 166
    NER             shift and go to state 167
    INSTANCEOF      shift and go to state 168
    ELVIS           shift and go to state 169

  ! BWAND           [ reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .) ]
  ! XOR             [ reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .) ]
  ! BWOR            [ reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .) ]
  ! GT              [ reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .) ]
  ! GTE             [ reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .) ]
  ! LT              [ reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .) ]
  ! LTE             [ reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .) ]
  ! EQ              [ reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .) ]
  ! EQR             [ reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .) ]
  ! NE              [ reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .) ]
  ! NER             [ reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .) ]
  ! INSTANCEOF      [ reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .) ]
  ! ELVIS           [ reduce using rule 89 (binary -> noncondexpression LSH noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]
  ! FIND            [ shift and go to state 150 ]
  ! MATCH           [ shift and go to state 151 ]
  ! LSH             [ shift and go to state 152 ]
  ! RSH             [ shift and go to state 153 ]
  ! USH             [ shift and go to state 154 ]


state 258

    (90) binary -> noncondexpression RSH noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    MUL             reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    DIV             reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    REM             reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    ADD             reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    SUB             reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    FIND            reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    MATCH           reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    LSH             reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    RSH             reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    USH             reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    ASSIGN          reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    AADD            reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    ASUB            reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    AMUL            reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    ADIV            reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    AREM            reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    AAND            reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    AXOR            reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    AOR             reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    ALSH            reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    ARSH            reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    AUSH            reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    SEMICOLON       reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    RBRACE          reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    COMMA           reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    COLON           reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    RP              reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    RBRACK          reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .)
    BWAND           shift and go to state 155
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    GT              shift and go to state 160
    GTE             shift and go to state 161
    LT              shift and go to state 162
    LTE             shift and go to state 163
    EQ              shift and go to state 164
    EQR             shift and go to state 165
    NE              shift and go to state 166
    NER             shift and go to state 167
    INSTANCEOF      shift and go to state 168
    ELVIS           shift and go to state 169

  ! BWAND           [ reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .) ]
  ! XOR             [ reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .) ]
  ! BWOR            [ reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .) ]
  ! GT              [ reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .) ]
  ! GTE             [ reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .) ]
  ! LT              [ reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .) ]
  ! LTE             [ reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .) ]
  ! EQ              [ reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .) ]
  ! EQR             [ reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .) ]
  ! NE              [ reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .) ]
  ! NER             [ reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .) ]
  ! INSTANCEOF      [ reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .) ]
  ! ELVIS           [ reduce using rule 90 (binary -> noncondexpression RSH noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]
  ! FIND            [ shift and go to state 150 ]
  ! MATCH           [ shift and go to state 151 ]
  ! LSH             [ shift and go to state 152 ]
  ! RSH             [ shift and go to state 153 ]
  ! USH             [ shift and go to state 154 ]


state 259

    (91) binary -> noncondexpression USH noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    MUL             reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    DIV             reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    REM             reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    ADD             reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    SUB             reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    FIND            reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    MATCH           reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    LSH             reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    RSH             reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    USH             reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    ASSIGN          reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    AADD            reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    ASUB            reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    AMUL            reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    ADIV            reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    AREM            reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    AAND            reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    AXOR            reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    AOR             reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    ALSH            reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    ARSH            reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    AUSH            reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    SEMICOLON       reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    RBRACE          reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    COMMA           reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    COLON           reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    RP              reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    RBRACK          reduce using rule 91 (binary -> noncondexpression USH noncondexpression .)
    BWAND           shift and go to state 155
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    GT              shift and go to state 160
    GTE             shift and go to state 161
    LT              shift and go to state 162
    LTE             shift and go to state 163
    EQ              shift and go to state 164
    EQR             shift and go to state 165
    NE              shift and go to state 166
    NER             shift and go to state 167
    INSTANCEOF      shift and go to state 168
    ELVIS           shift and go to state 169

  ! BWAND           [ reduce using rule 91 (binary -> noncondexpression USH noncondexpression .) ]
  ! XOR             [ reduce using rule 91 (binary -> noncondexpression USH noncondexpression .) ]
  ! BWOR            [ reduce using rule 91 (binary -> noncondexpression USH noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 91 (binary -> noncondexpression USH noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 91 (binary -> noncondexpression USH noncondexpression .) ]
  ! GT              [ reduce using rule 91 (binary -> noncondexpression USH noncondexpression .) ]
  ! GTE             [ reduce using rule 91 (binary -> noncondexpression USH noncondexpression .) ]
  ! LT              [ reduce using rule 91 (binary -> noncondexpression USH noncondexpression .) ]
  ! LTE             [ reduce using rule 91 (binary -> noncondexpression USH noncondexpression .) ]
  ! EQ              [ reduce using rule 91 (binary -> noncondexpression USH noncondexpression .) ]
  ! EQR             [ reduce using rule 91 (binary -> noncondexpression USH noncondexpression .) ]
  ! NE              [ reduce using rule 91 (binary -> noncondexpression USH noncondexpression .) ]
  ! NER             [ reduce using rule 91 (binary -> noncondexpression USH noncondexpression .) ]
  ! INSTANCEOF      [ reduce using rule 91 (binary -> noncondexpression USH noncondexpression .) ]
  ! ELVIS           [ reduce using rule 91 (binary -> noncondexpression USH noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]
  ! FIND            [ shift and go to state 150 ]
  ! MATCH           [ shift and go to state 151 ]
  ! LSH             [ shift and go to state 152 ]
  ! RSH             [ shift and go to state 153 ]
  ! USH             [ shift and go to state 154 ]


state 260

    (92) binary -> noncondexpression BWAND noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    MUL             reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    DIV             reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    REM             reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    ADD             reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    SUB             reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    FIND            reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    MATCH           reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    LSH             reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    RSH             reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    USH             reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    BWAND           reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    GT              reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    GTE             reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    LT              reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    LTE             reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    EQ              reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    EQR             reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    NE              reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    NER             reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    INSTANCEOF      reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    ASSIGN          reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    AADD            reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    ASUB            reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    AMUL            reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    ADIV            reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    AREM            reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    AAND            reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    AXOR            reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    AOR             reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    ALSH            reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    ARSH            reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    AUSH            reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    SEMICOLON       reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    RBRACE          reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    COMMA           reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    COLON           reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    RP              reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    RBRACK          reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .)
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    ELVIS           shift and go to state 169

  ! XOR             [ reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .) ]
  ! BWOR            [ reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .) ]
  ! ELVIS           [ reduce using rule 92 (binary -> noncondexpression BWAND noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]
  ! FIND            [ shift and go to state 150 ]
  ! MATCH           [ shift and go to state 151 ]
  ! LSH             [ shift and go to state 152 ]
  ! RSH             [ shift and go to state 153 ]
  ! USH             [ shift and go to state 154 ]
  ! BWAND           [ shift and go to state 155 ]
  ! GT              [ shift and go to state 160 ]
  ! GTE             [ shift and go to state 161 ]
  ! LT              [ shift and go to state 162 ]
  ! LTE             [ shift and go to state 163 ]
  ! EQ              [ shift and go to state 164 ]
  ! EQR             [ shift and go to state 165 ]
  ! NE              [ shift and go to state 166 ]
  ! NER             [ shift and go to state 167 ]
  ! INSTANCEOF      [ shift and go to state 168 ]


state 261

    (93) binary -> noncondexpression XOR noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    MUL             reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    DIV             reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    REM             reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    ADD             reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    SUB             reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    FIND            reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    MATCH           reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    LSH             reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    RSH             reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    USH             reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    BWAND           reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    XOR             reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    GT              reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    GTE             reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    LT              reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    LTE             reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    EQ              reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    EQR             reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    NE              reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    NER             reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    INSTANCEOF      reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    ASSIGN          reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    AADD            reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    ASUB            reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    AMUL            reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    ADIV            reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    AREM            reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    AAND            reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    AXOR            reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    AOR             reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    ALSH            reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    ARSH            reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    AUSH            reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    SEMICOLON       reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    RBRACE          reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    COMMA           reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    COLON           reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    RP              reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    RBRACK          reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .)
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    ELVIS           shift and go to state 169

  ! BWOR            [ reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .) ]
  ! ELVIS           [ reduce using rule 93 (binary -> noncondexpression XOR noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]
  ! FIND            [ shift and go to state 150 ]
  ! MATCH           [ shift and go to state 151 ]
  ! LSH             [ shift and go to state 152 ]
  ! RSH             [ shift and go to state 153 ]
  ! USH             [ shift and go to state 154 ]
  ! BWAND           [ shift and go to state 155 ]
  ! XOR             [ shift and go to state 156 ]
  ! GT              [ shift and go to state 160 ]
  ! GTE             [ shift and go to state 161 ]
  ! LT              [ shift and go to state 162 ]
  ! LTE             [ shift and go to state 163 ]
  ! EQ              [ shift and go to state 164 ]
  ! EQR             [ shift and go to state 165 ]
  ! NE              [ shift and go to state 166 ]
  ! NER             [ shift and go to state 167 ]
  ! INSTANCEOF      [ shift and go to state 168 ]


state 262

    (94) binary -> noncondexpression BWOR noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    MUL             reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    DIV             reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    REM             reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    ADD             reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    SUB             reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    FIND            reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    MATCH           reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    LSH             reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    RSH             reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    USH             reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    BWAND           reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    XOR             reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    BWOR            reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    GT              reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    GTE             reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    LT              reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    LTE             reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    EQ              reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    EQR             reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    NE              reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    NER             reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    INSTANCEOF      reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    ASSIGN          reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    AADD            reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    ASUB            reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    AMUL            reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    ADIV            reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    AREM            reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    AAND            reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    AXOR            reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    AOR             reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    ALSH            reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    ARSH            reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    AUSH            reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    SEMICOLON       reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    RBRACE          reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    COMMA           reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    COLON           reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    RP              reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    RBRACK          reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .)
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    ELVIS           shift and go to state 169

  ! BOOLAND         [ reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .) ]
  ! ELVIS           [ reduce using rule 94 (binary -> noncondexpression BWOR noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]
  ! FIND            [ shift and go to state 150 ]
  ! MATCH           [ shift and go to state 151 ]
  ! LSH             [ shift and go to state 152 ]
  ! RSH             [ shift and go to state 153 ]
  ! USH             [ shift and go to state 154 ]
  ! BWAND           [ shift and go to state 155 ]
  ! XOR             [ shift and go to state 156 ]
  ! BWOR            [ shift and go to state 157 ]
  ! GT              [ shift and go to state 160 ]
  ! GTE             [ shift and go to state 161 ]
  ! LT              [ shift and go to state 162 ]
  ! LTE             [ shift and go to state 163 ]
  ! EQ              [ shift and go to state 164 ]
  ! EQR             [ shift and go to state 165 ]
  ! NE              [ shift and go to state 166 ]
  ! NER             [ shift and go to state 167 ]
  ! INSTANCEOF      [ shift and go to state 168 ]


state 263

    (95) bool -> noncondexpression BOOLAND noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    MUL             reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    DIV             reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    REM             reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    ADD             reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    SUB             reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    FIND            reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    MATCH           reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    LSH             reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    RSH             reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    USH             reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    BWAND           reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    XOR             reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    BWOR            reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    BOOLAND         reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    GT              reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    GTE             reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    LT              reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    LTE             reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    EQ              reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    EQR             reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    NE              reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    NER             reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    INSTANCEOF      reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    ASSIGN          reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    AADD            reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    ASUB            reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    AMUL            reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    ADIV            reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    AREM            reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    AAND            reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    AXOR            reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    AOR             reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    ALSH            reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    ARSH            reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    AUSH            reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    SEMICOLON       reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    RBRACE          reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    COMMA           reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    COLON           reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    RP              reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    RBRACK          reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .)
    BOOLOR          shift and go to state 159
    ELVIS           shift and go to state 169

  ! BOOLOR          [ reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .) ]
  ! ELVIS           [ reduce using rule 95 (bool -> noncondexpression BOOLAND noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]
  ! FIND            [ shift and go to state 150 ]
  ! MATCH           [ shift and go to state 151 ]
  ! LSH             [ shift and go to state 152 ]
  ! RSH             [ shift and go to state 153 ]
  ! USH             [ shift and go to state 154 ]
  ! BWAND           [ shift and go to state 155 ]
  ! XOR             [ shift and go to state 156 ]
  ! BWOR            [ shift and go to state 157 ]
  ! BOOLAND         [ shift and go to state 158 ]
  ! GT              [ shift and go to state 160 ]
  ! GTE             [ shift and go to state 161 ]
  ! LT              [ shift and go to state 162 ]
  ! LTE             [ shift and go to state 163 ]
  ! EQ              [ shift and go to state 164 ]
  ! EQR             [ shift and go to state 165 ]
  ! NE              [ shift and go to state 166 ]
  ! NER             [ shift and go to state 167 ]
  ! INSTANCEOF      [ shift and go to state 168 ]


state 264

    (96) bool -> noncondexpression BOOLOR noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    MUL             reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    DIV             reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    REM             reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    ADD             reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    SUB             reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    FIND            reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    MATCH           reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    LSH             reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    RSH             reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    USH             reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    BWAND           reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    XOR             reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    BWOR            reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    BOOLAND         reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    BOOLOR          reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    GT              reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    GTE             reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    LT              reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    LTE             reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    EQ              reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    EQR             reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    NE              reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    NER             reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    INSTANCEOF      reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    ASSIGN          reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    AADD            reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    ASUB            reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    AMUL            reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    ADIV            reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    AREM            reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    AAND            reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    AXOR            reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    AOR             reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    ALSH            reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    ARSH            reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    AUSH            reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    SEMICOLON       reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    RBRACE          reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    COMMA           reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    COLON           reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    RP              reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    RBRACK          reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .)
    ELVIS           shift and go to state 169

  ! ELVIS           [ reduce using rule 96 (bool -> noncondexpression BOOLOR noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]
  ! FIND            [ shift and go to state 150 ]
  ! MATCH           [ shift and go to state 151 ]
  ! LSH             [ shift and go to state 152 ]
  ! RSH             [ shift and go to state 153 ]
  ! USH             [ shift and go to state 154 ]
  ! BWAND           [ shift and go to state 155 ]
  ! XOR             [ shift and go to state 156 ]
  ! BWOR            [ shift and go to state 157 ]
  ! BOOLAND         [ shift and go to state 158 ]
  ! BOOLOR          [ shift and go to state 159 ]
  ! GT              [ shift and go to state 160 ]
  ! GTE             [ shift and go to state 161 ]
  ! LT              [ shift and go to state 162 ]
  ! LTE             [ shift and go to state 163 ]
  ! EQ              [ shift and go to state 164 ]
  ! EQR             [ shift and go to state 165 ]
  ! NE              [ shift and go to state 166 ]
  ! NER             [ shift and go to state 167 ]
  ! INSTANCEOF      [ shift and go to state 168 ]


state 265

    (97) comp -> noncondexpression GT noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    MUL             reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    DIV             reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    REM             reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    ADD             reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    SUB             reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    FIND            reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    MATCH           reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    LSH             reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    RSH             reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    USH             reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    GT              reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    GTE             reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    LT              reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    LTE             reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    ASSIGN          reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    AADD            reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    ASUB            reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    AMUL            reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    ADIV            reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    AREM            reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    AAND            reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    AXOR            reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    AOR             reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    ALSH            reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    ARSH            reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    AUSH            reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    SEMICOLON       reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    RBRACE          reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    COMMA           reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    COLON           reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    RP              reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    RBRACK          reduce using rule 97 (comp -> noncondexpression GT noncondexpression .)
    BWAND           shift and go to state 155
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    EQ              shift and go to state 164
    EQR             shift and go to state 165
    NE              shift and go to state 166
    NER             shift and go to state 167
    INSTANCEOF      shift and go to state 168
    ELVIS           shift and go to state 169

  ! BWAND           [ reduce using rule 97 (comp -> noncondexpression GT noncondexpression .) ]
  ! XOR             [ reduce using rule 97 (comp -> noncondexpression GT noncondexpression .) ]
  ! BWOR            [ reduce using rule 97 (comp -> noncondexpression GT noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 97 (comp -> noncondexpression GT noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 97 (comp -> noncondexpression GT noncondexpression .) ]
  ! EQ              [ reduce using rule 97 (comp -> noncondexpression GT noncondexpression .) ]
  ! EQR             [ reduce using rule 97 (comp -> noncondexpression GT noncondexpression .) ]
  ! NE              [ reduce using rule 97 (comp -> noncondexpression GT noncondexpression .) ]
  ! NER             [ reduce using rule 97 (comp -> noncondexpression GT noncondexpression .) ]
  ! INSTANCEOF      [ reduce using rule 97 (comp -> noncondexpression GT noncondexpression .) ]
  ! ELVIS           [ reduce using rule 97 (comp -> noncondexpression GT noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]
  ! FIND            [ shift and go to state 150 ]
  ! MATCH           [ shift and go to state 151 ]
  ! LSH             [ shift and go to state 152 ]
  ! RSH             [ shift and go to state 153 ]
  ! USH             [ shift and go to state 154 ]
  ! GT              [ shift and go to state 160 ]
  ! GTE             [ shift and go to state 161 ]
  ! LT              [ shift and go to state 162 ]
  ! LTE             [ shift and go to state 163 ]


state 266

    (98) comp -> noncondexpression GTE noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    MUL             reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    DIV             reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    REM             reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    ADD             reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    SUB             reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    FIND            reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    MATCH           reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    LSH             reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    RSH             reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    USH             reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    GT              reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    GTE             reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    LT              reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    LTE             reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    ASSIGN          reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    AADD            reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    ASUB            reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    AMUL            reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    ADIV            reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    AREM            reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    AAND            reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    AXOR            reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    AOR             reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    ALSH            reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    ARSH            reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    AUSH            reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    SEMICOLON       reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    RBRACE          reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    COMMA           reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    COLON           reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    RP              reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    RBRACK          reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .)
    BWAND           shift and go to state 155
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    EQ              shift and go to state 164
    EQR             shift and go to state 165
    NE              shift and go to state 166
    NER             shift and go to state 167
    INSTANCEOF      shift and go to state 168
    ELVIS           shift and go to state 169

  ! BWAND           [ reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .) ]
  ! XOR             [ reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .) ]
  ! BWOR            [ reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .) ]
  ! EQ              [ reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .) ]
  ! EQR             [ reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .) ]
  ! NE              [ reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .) ]
  ! NER             [ reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .) ]
  ! INSTANCEOF      [ reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .) ]
  ! ELVIS           [ reduce using rule 98 (comp -> noncondexpression GTE noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]
  ! FIND            [ shift and go to state 150 ]
  ! MATCH           [ shift and go to state 151 ]
  ! LSH             [ shift and go to state 152 ]
  ! RSH             [ shift and go to state 153 ]
  ! USH             [ shift and go to state 154 ]
  ! GT              [ shift and go to state 160 ]
  ! GTE             [ shift and go to state 161 ]
  ! LT              [ shift and go to state 162 ]
  ! LTE             [ shift and go to state 163 ]


state 267

    (99) comp -> noncondexpression LT noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    MUL             reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    DIV             reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    REM             reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    ADD             reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    SUB             reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    FIND            reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    MATCH           reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    LSH             reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    RSH             reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    USH             reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    GT              reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    GTE             reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    LT              reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    LTE             reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    ASSIGN          reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    AADD            reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    ASUB            reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    AMUL            reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    ADIV            reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    AREM            reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    AAND            reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    AXOR            reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    AOR             reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    ALSH            reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    ARSH            reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    AUSH            reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    SEMICOLON       reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    RBRACE          reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    COMMA           reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    COLON           reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    RP              reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    RBRACK          reduce using rule 99 (comp -> noncondexpression LT noncondexpression .)
    BWAND           shift and go to state 155
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    EQ              shift and go to state 164
    EQR             shift and go to state 165
    NE              shift and go to state 166
    NER             shift and go to state 167
    INSTANCEOF      shift and go to state 168
    ELVIS           shift and go to state 169

  ! BWAND           [ reduce using rule 99 (comp -> noncondexpression LT noncondexpression .) ]
  ! XOR             [ reduce using rule 99 (comp -> noncondexpression LT noncondexpression .) ]
  ! BWOR            [ reduce using rule 99 (comp -> noncondexpression LT noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 99 (comp -> noncondexpression LT noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 99 (comp -> noncondexpression LT noncondexpression .) ]
  ! EQ              [ reduce using rule 99 (comp -> noncondexpression LT noncondexpression .) ]
  ! EQR             [ reduce using rule 99 (comp -> noncondexpression LT noncondexpression .) ]
  ! NE              [ reduce using rule 99 (comp -> noncondexpression LT noncondexpression .) ]
  ! NER             [ reduce using rule 99 (comp -> noncondexpression LT noncondexpression .) ]
  ! INSTANCEOF      [ reduce using rule 99 (comp -> noncondexpression LT noncondexpression .) ]
  ! ELVIS           [ reduce using rule 99 (comp -> noncondexpression LT noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]
  ! FIND            [ shift and go to state 150 ]
  ! MATCH           [ shift and go to state 151 ]
  ! LSH             [ shift and go to state 152 ]
  ! RSH             [ shift and go to state 153 ]
  ! USH             [ shift and go to state 154 ]
  ! GT              [ shift and go to state 160 ]
  ! GTE             [ shift and go to state 161 ]
  ! LT              [ shift and go to state 162 ]
  ! LTE             [ shift and go to state 163 ]


state 268

    (100) comp -> noncondexpression LTE noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    MUL             reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    DIV             reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    REM             reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    ADD             reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    SUB             reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    FIND            reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    MATCH           reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    LSH             reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    RSH             reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    USH             reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    GT              reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    GTE             reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    LT              reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    LTE             reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    ASSIGN          reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    AADD            reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    ASUB            reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    AMUL            reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    ADIV            reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    AREM            reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    AAND            reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    AXOR            reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    AOR             reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    ALSH            reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    ARSH            reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    AUSH            reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    SEMICOLON       reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    RBRACE          reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    COMMA           reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    COLON           reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    RP              reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    RBRACK          reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .)
    BWAND           shift and go to state 155
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    EQ              shift and go to state 164
    EQR             shift and go to state 165
    NE              shift and go to state 166
    NER             shift and go to state 167
    INSTANCEOF      shift and go to state 168
    ELVIS           shift and go to state 169

  ! BWAND           [ reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .) ]
  ! XOR             [ reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .) ]
  ! BWOR            [ reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .) ]
  ! EQ              [ reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .) ]
  ! EQR             [ reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .) ]
  ! NE              [ reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .) ]
  ! NER             [ reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .) ]
  ! INSTANCEOF      [ reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .) ]
  ! ELVIS           [ reduce using rule 100 (comp -> noncondexpression LTE noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]
  ! FIND            [ shift and go to state 150 ]
  ! MATCH           [ shift and go to state 151 ]
  ! LSH             [ shift and go to state 152 ]
  ! RSH             [ shift and go to state 153 ]
  ! USH             [ shift and go to state 154 ]
  ! GT              [ shift and go to state 160 ]
  ! GTE             [ shift and go to state 161 ]
  ! LT              [ shift and go to state 162 ]
  ! LTE             [ shift and go to state 163 ]


state 269

    (101) comp -> noncondexpression EQ noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    MUL             reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    DIV             reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    REM             reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    ADD             reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    SUB             reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    FIND            reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    MATCH           reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    LSH             reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    RSH             reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    USH             reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    GT              reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    GTE             reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    LT              reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    LTE             reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    EQ              reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    EQR             reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    NE              reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    NER             reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    INSTANCEOF      reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    ASSIGN          reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    AADD            reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    ASUB            reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    AMUL            reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    ADIV            reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    AREM            reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    AAND            reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    AXOR            reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    AOR             reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    ALSH            reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    ARSH            reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    AUSH            reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    SEMICOLON       reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    RBRACE          reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    COMMA           reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    COLON           reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    RP              reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    RBRACK          reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .)
    BWAND           shift and go to state 155
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    ELVIS           shift and go to state 169

  ! BWAND           [ reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .) ]
  ! XOR             [ reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .) ]
  ! BWOR            [ reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .) ]
  ! ELVIS           [ reduce using rule 101 (comp -> noncondexpression EQ noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]
  ! FIND            [ shift and go to state 150 ]
  ! MATCH           [ shift and go to state 151 ]
  ! LSH             [ shift and go to state 152 ]
  ! RSH             [ shift and go to state 153 ]
  ! USH             [ shift and go to state 154 ]
  ! GT              [ shift and go to state 160 ]
  ! GTE             [ shift and go to state 161 ]
  ! LT              [ shift and go to state 162 ]
  ! LTE             [ shift and go to state 163 ]
  ! EQ              [ shift and go to state 164 ]
  ! EQR             [ shift and go to state 165 ]
  ! NE              [ shift and go to state 166 ]
  ! NER             [ shift and go to state 167 ]
  ! INSTANCEOF      [ shift and go to state 168 ]


state 270

    (102) comp -> noncondexpression EQR noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    MUL             reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    DIV             reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    REM             reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    ADD             reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    SUB             reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    FIND            reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    MATCH           reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    LSH             reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    RSH             reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    USH             reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    GT              reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    GTE             reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    LT              reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    LTE             reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    EQ              reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    EQR             reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    NE              reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    NER             reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    INSTANCEOF      reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    ASSIGN          reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    AADD            reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    ASUB            reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    AMUL            reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    ADIV            reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    AREM            reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    AAND            reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    AXOR            reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    AOR             reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    ALSH            reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    ARSH            reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    AUSH            reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    SEMICOLON       reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    RBRACE          reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    COMMA           reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    COLON           reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    RP              reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    RBRACK          reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .)
    BWAND           shift and go to state 155
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    ELVIS           shift and go to state 169

  ! BWAND           [ reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .) ]
  ! XOR             [ reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .) ]
  ! BWOR            [ reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .) ]
  ! ELVIS           [ reduce using rule 102 (comp -> noncondexpression EQR noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]
  ! FIND            [ shift and go to state 150 ]
  ! MATCH           [ shift and go to state 151 ]
  ! LSH             [ shift and go to state 152 ]
  ! RSH             [ shift and go to state 153 ]
  ! USH             [ shift and go to state 154 ]
  ! GT              [ shift and go to state 160 ]
  ! GTE             [ shift and go to state 161 ]
  ! LT              [ shift and go to state 162 ]
  ! LTE             [ shift and go to state 163 ]
  ! EQ              [ shift and go to state 164 ]
  ! EQR             [ shift and go to state 165 ]
  ! NE              [ shift and go to state 166 ]
  ! NER             [ shift and go to state 167 ]
  ! INSTANCEOF      [ shift and go to state 168 ]


state 271

    (103) comp -> noncondexpression NE noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    MUL             reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    DIV             reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    REM             reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    ADD             reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    SUB             reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    FIND            reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    MATCH           reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    LSH             reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    RSH             reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    USH             reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    GT              reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    GTE             reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    LT              reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    LTE             reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    EQ              reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    EQR             reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    NE              reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    NER             reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    INSTANCEOF      reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    ASSIGN          reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    AADD            reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    ASUB            reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    AMUL            reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    ADIV            reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    AREM            reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    AAND            reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    AXOR            reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    AOR             reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    ALSH            reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    ARSH            reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    AUSH            reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    SEMICOLON       reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    RBRACE          reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    COMMA           reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    COLON           reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    RP              reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    RBRACK          reduce using rule 103 (comp -> noncondexpression NE noncondexpression .)
    BWAND           shift and go to state 155
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    ELVIS           shift and go to state 169

  ! BWAND           [ reduce using rule 103 (comp -> noncondexpression NE noncondexpression .) ]
  ! XOR             [ reduce using rule 103 (comp -> noncondexpression NE noncondexpression .) ]
  ! BWOR            [ reduce using rule 103 (comp -> noncondexpression NE noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 103 (comp -> noncondexpression NE noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 103 (comp -> noncondexpression NE noncondexpression .) ]
  ! ELVIS           [ reduce using rule 103 (comp -> noncondexpression NE noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]
  ! FIND            [ shift and go to state 150 ]
  ! MATCH           [ shift and go to state 151 ]
  ! LSH             [ shift and go to state 152 ]
  ! RSH             [ shift and go to state 153 ]
  ! USH             [ shift and go to state 154 ]
  ! GT              [ shift and go to state 160 ]
  ! GTE             [ shift and go to state 161 ]
  ! LT              [ shift and go to state 162 ]
  ! LTE             [ shift and go to state 163 ]
  ! EQ              [ shift and go to state 164 ]
  ! EQR             [ shift and go to state 165 ]
  ! NE              [ shift and go to state 166 ]
  ! NER             [ shift and go to state 167 ]
  ! INSTANCEOF      [ shift and go to state 168 ]


state 272

    (104) comp -> noncondexpression NER noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    MUL             reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    DIV             reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    REM             reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    ADD             reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    SUB             reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    FIND            reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    MATCH           reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    LSH             reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    RSH             reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    USH             reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    GT              reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    GTE             reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    LT              reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    LTE             reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    EQ              reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    EQR             reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    NE              reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    NER             reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    INSTANCEOF      reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    ASSIGN          reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    AADD            reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    ASUB            reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    AMUL            reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    ADIV            reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    AREM            reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    AAND            reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    AXOR            reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    AOR             reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    ALSH            reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    ARSH            reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    AUSH            reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    SEMICOLON       reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    RBRACE          reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    COMMA           reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    COLON           reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    RP              reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    RBRACK          reduce using rule 104 (comp -> noncondexpression NER noncondexpression .)
    BWAND           shift and go to state 155
    XOR             shift and go to state 156
    BWOR            shift and go to state 157
    BOOLAND         shift and go to state 158
    BOOLOR          shift and go to state 159
    ELVIS           shift and go to state 169

  ! BWAND           [ reduce using rule 104 (comp -> noncondexpression NER noncondexpression .) ]
  ! XOR             [ reduce using rule 104 (comp -> noncondexpression NER noncondexpression .) ]
  ! BWOR            [ reduce using rule 104 (comp -> noncondexpression NER noncondexpression .) ]
  ! BOOLAND         [ reduce using rule 104 (comp -> noncondexpression NER noncondexpression .) ]
  ! BOOLOR          [ reduce using rule 104 (comp -> noncondexpression NER noncondexpression .) ]
  ! ELVIS           [ reduce using rule 104 (comp -> noncondexpression NER noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]
  ! FIND            [ shift and go to state 150 ]
  ! MATCH           [ shift and go to state 151 ]
  ! LSH             [ shift and go to state 152 ]
  ! RSH             [ shift and go to state 153 ]
  ! USH             [ shift and go to state 154 ]
  ! GT              [ shift and go to state 160 ]
  ! GTE             [ shift and go to state 161 ]
  ! LT              [ shift and go to state 162 ]
  ! LTE             [ shift and go to state 163 ]
  ! EQ              [ shift and go to state 164 ]
  ! EQR             [ shift and go to state 165 ]
  ! NE              [ shift and go to state 166 ]
  ! NER             [ shift and go to state 167 ]
  ! INSTANCEOF      [ shift and go to state 168 ]


state 273

    (105) instanceof -> noncondexpression INSTANCEOF decltype .

    COND            reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    MUL             reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    DIV             reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    REM             reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    ADD             reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    SUB             reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    FIND            reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    MATCH           reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    LSH             reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    RSH             reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    USH             reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    BWAND           reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    XOR             reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    BWOR            reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    BOOLAND         reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    BOOLOR          reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    GT              reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    GTE             reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    LT              reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    LTE             reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    EQ              reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    EQR             reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    NE              reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    NER             reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    INSTANCEOF      reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    ELVIS           reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    ASSIGN          reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    AADD            reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    ASUB            reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    AMUL            reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    ADIV            reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    AREM            reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    AAND            reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    AXOR            reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    AOR             reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    ALSH            reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    ARSH            reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    AUSH            reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    SEMICOLON       reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    RBRACE          reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    COMMA           reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    COLON           reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    RP              reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)
    RBRACK          reduce using rule 105 (instanceof -> noncondexpression INSTANCEOF decltype .)


state 274

    (60) decltype -> idaccess_lbrace . RBRACE closedbraces
    (61) decltype -> idaccess_lbrace . RBRACE

    RBRACE          shift and go to state 115


state 275

    (66) type -> idaccess .
    (193) idaccess_lbrace -> idaccess . LBRACE
    (191) idaccess -> idaccess . DOT ID

  ! shift/reduce conflict for LBRACE resolved as shift
    COND            reduce using rule 66 (type -> idaccess .)
    MUL             reduce using rule 66 (type -> idaccess .)
    DIV             reduce using rule 66 (type -> idaccess .)
    REM             reduce using rule 66 (type -> idaccess .)
    ADD             reduce using rule 66 (type -> idaccess .)
    SUB             reduce using rule 66 (type -> idaccess .)
    FIND            reduce using rule 66 (type -> idaccess .)
    MATCH           reduce using rule 66 (type -> idaccess .)
    LSH             reduce using rule 66 (type -> idaccess .)
    RSH             reduce using rule 66 (type -> idaccess .)
    USH             reduce using rule 66 (type -> idaccess .)
    BWAND           reduce using rule 66 (type -> idaccess .)
    XOR             reduce using rule 66 (type -> idaccess .)
    BWOR            reduce using rule 66 (type -> idaccess .)
    BOOLAND         reduce using rule 66 (type -> idaccess .)
    BOOLOR          reduce using rule 66 (type -> idaccess .)
    GT              reduce using rule 66 (type -> idaccess .)
    GTE             reduce using rule 66 (type -> idaccess .)
    LT              reduce using rule 66 (type -> idaccess .)
    LTE             reduce using rule 66 (type -> idaccess .)
    EQ              reduce using rule 66 (type -> idaccess .)
    EQR             reduce using rule 66 (type -> idaccess .)
    NE              reduce using rule 66 (type -> idaccess .)
    NER             reduce using rule 66 (type -> idaccess .)
    INSTANCEOF      reduce using rule 66 (type -> idaccess .)
    ELVIS           reduce using rule 66 (type -> idaccess .)
    ASSIGN          reduce using rule 66 (type -> idaccess .)
    AADD            reduce using rule 66 (type -> idaccess .)
    ASUB            reduce using rule 66 (type -> idaccess .)
    AMUL            reduce using rule 66 (type -> idaccess .)
    ADIV            reduce using rule 66 (type -> idaccess .)
    AREM            reduce using rule 66 (type -> idaccess .)
    AAND            reduce using rule 66 (type -> idaccess .)
    AXOR            reduce using rule 66 (type -> idaccess .)
    AOR             reduce using rule 66 (type -> idaccess .)
    ALSH            reduce using rule 66 (type -> idaccess .)
    ARSH            reduce using rule 66 (type -> idaccess .)
    AUSH            reduce using rule 66 (type -> idaccess .)
    SEMICOLON       reduce using rule 66 (type -> idaccess .)
    RBRACE          reduce using rule 66 (type -> idaccess .)
    COMMA           reduce using rule 66 (type -> idaccess .)
    COLON           reduce using rule 66 (type -> idaccess .)
    RP              reduce using rule 66 (type -> idaccess .)
    RBRACK          reduce using rule 66 (type -> idaccess .)
    ID              reduce using rule 66 (type -> idaccess .)
    LBRACE          shift and go to state 119
    DOT             shift and go to state 120

  ! LBRACE          [ reduce using rule 66 (type -> idaccess .) ]


state 276

    (106) elvis -> noncondexpression ELVIS noncondexpression .
    (82) binary -> noncondexpression . MUL noncondexpression
    (83) binary -> noncondexpression . DIV noncondexpression
    (84) binary -> noncondexpression . REM noncondexpression
    (85) binary -> noncondexpression . ADD noncondexpression
    (86) binary -> noncondexpression . SUB noncondexpression
    (87) binary -> noncondexpression . FIND noncondexpression
    (88) binary -> noncondexpression . MATCH noncondexpression
    (89) binary -> noncondexpression . LSH noncondexpression
    (90) binary -> noncondexpression . RSH noncondexpression
    (91) binary -> noncondexpression . USH noncondexpression
    (92) binary -> noncondexpression . BWAND noncondexpression
    (93) binary -> noncondexpression . XOR noncondexpression
    (94) binary -> noncondexpression . BWOR noncondexpression
    (95) bool -> noncondexpression . BOOLAND noncondexpression
    (96) bool -> noncondexpression . BOOLOR noncondexpression
    (97) comp -> noncondexpression . GT noncondexpression
    (98) comp -> noncondexpression . GTE noncondexpression
    (99) comp -> noncondexpression . LT noncondexpression
    (100) comp -> noncondexpression . LTE noncondexpression
    (101) comp -> noncondexpression . EQ noncondexpression
    (102) comp -> noncondexpression . EQR noncondexpression
    (103) comp -> noncondexpression . NE noncondexpression
    (104) comp -> noncondexpression . NER noncondexpression
    (105) instanceof -> noncondexpression . INSTANCEOF decltype
    (106) elvis -> noncondexpression . ELVIS noncondexpression

    COND            reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    MUL             reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    DIV             reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    REM             reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    ADD             reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    SUB             reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    FIND            reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    MATCH           reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    LSH             reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    RSH             reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    USH             reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    BWAND           reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    XOR             reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    BWOR            reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    BOOLAND         reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    BOOLOR          reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    GT              reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    GTE             reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    LT              reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    LTE             reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    EQ              reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    EQR             reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    NE              reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    NER             reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    INSTANCEOF      reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    ASSIGN          reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    AADD            reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    ASUB            reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    AMUL            reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    ADIV            reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    AREM            reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    AAND            reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    AXOR            reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    AOR             reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    ALSH            reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    ARSH            reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    AUSH            reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    SEMICOLON       reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    RBRACE          reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    COMMA           reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    COLON           reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    RP              reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    RBRACK          reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .)
    ELVIS           shift and go to state 169

  ! ELVIS           [ reduce using rule 106 (elvis -> noncondexpression ELVIS noncondexpression .) ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]
  ! REM             [ shift and go to state 147 ]
  ! ADD             [ shift and go to state 148 ]
  ! SUB             [ shift and go to state 149 ]
  ! FIND            [ shift and go to state 150 ]
  ! MATCH           [ shift and go to state 151 ]
  ! LSH             [ shift and go to state 152 ]
  ! RSH             [ shift and go to state 153 ]
  ! USH             [ shift and go to state 154 ]
  ! BWAND           [ shift and go to state 155 ]
  ! XOR             [ shift and go to state 156 ]
  ! BWOR            [ shift and go to state 157 ]
  ! BOOLAND         [ shift and go to state 158 ]
  ! BOOLOR          [ shift and go to state 159 ]
  ! GT              [ shift and go to state 160 ]
  ! GTE             [ shift and go to state 161 ]
  ! LT              [ shift and go to state 162 ]
  ! LTE             [ shift and go to state 163 ]
  ! EQ              [ shift and go to state 164 ]
  ! EQR             [ shift and go to state 165 ]
  ! NE              [ shift and go to state 166 ]
  ! NER             [ shift and go to state 167 ]
  ! INSTANCEOF      [ shift and go to state 168 ]


state 277

    (113) only_assignment -> noncondexpression ASSIGN expression .

    SEMICOLON       reduce using rule 113 (only_assignment -> noncondexpression ASSIGN expression .)
    RBRACE          reduce using rule 113 (only_assignment -> noncondexpression ASSIGN expression .)
    COMMA           reduce using rule 113 (only_assignment -> noncondexpression ASSIGN expression .)
    COLON           reduce using rule 113 (only_assignment -> noncondexpression ASSIGN expression .)
    RP              reduce using rule 113 (only_assignment -> noncondexpression ASSIGN expression .)
    RBRACK          reduce using rule 113 (only_assignment -> noncondexpression ASSIGN expression .)


state 278

    (114) compound_assignment -> noncondexpression AADD expression .

    SEMICOLON       reduce using rule 114 (compound_assignment -> noncondexpression AADD expression .)
    RBRACE          reduce using rule 114 (compound_assignment -> noncondexpression AADD expression .)
    COMMA           reduce using rule 114 (compound_assignment -> noncondexpression AADD expression .)
    COLON           reduce using rule 114 (compound_assignment -> noncondexpression AADD expression .)
    RP              reduce using rule 114 (compound_assignment -> noncondexpression AADD expression .)
    RBRACK          reduce using rule 114 (compound_assignment -> noncondexpression AADD expression .)


state 279

    (115) compound_assignment -> noncondexpression ASUB expression .

    SEMICOLON       reduce using rule 115 (compound_assignment -> noncondexpression ASUB expression .)
    RBRACE          reduce using rule 115 (compound_assignment -> noncondexpression ASUB expression .)
    COMMA           reduce using rule 115 (compound_assignment -> noncondexpression ASUB expression .)
    COLON           reduce using rule 115 (compound_assignment -> noncondexpression ASUB expression .)
    RP              reduce using rule 115 (compound_assignment -> noncondexpression ASUB expression .)
    RBRACK          reduce using rule 115 (compound_assignment -> noncondexpression ASUB expression .)


state 280

    (116) compound_assignment -> noncondexpression AMUL expression .

    SEMICOLON       reduce using rule 116 (compound_assignment -> noncondexpression AMUL expression .)
    RBRACE          reduce using rule 116 (compound_assignment -> noncondexpression AMUL expression .)
    COMMA           reduce using rule 116 (compound_assignment -> noncondexpression AMUL expression .)
    COLON           reduce using rule 116 (compound_assignment -> noncondexpression AMUL expression .)
    RP              reduce using rule 116 (compound_assignment -> noncondexpression AMUL expression .)
    RBRACK          reduce using rule 116 (compound_assignment -> noncondexpression AMUL expression .)


state 281

    (117) compound_assignment -> noncondexpression ADIV expression .

    SEMICOLON       reduce using rule 117 (compound_assignment -> noncondexpression ADIV expression .)
    RBRACE          reduce using rule 117 (compound_assignment -> noncondexpression ADIV expression .)
    COMMA           reduce using rule 117 (compound_assignment -> noncondexpression ADIV expression .)
    COLON           reduce using rule 117 (compound_assignment -> noncondexpression ADIV expression .)
    RP              reduce using rule 117 (compound_assignment -> noncondexpression ADIV expression .)
    RBRACK          reduce using rule 117 (compound_assignment -> noncondexpression ADIV expression .)


state 282

    (118) compound_assignment -> noncondexpression AREM expression .

    SEMICOLON       reduce using rule 118 (compound_assignment -> noncondexpression AREM expression .)
    RBRACE          reduce using rule 118 (compound_assignment -> noncondexpression AREM expression .)
    COMMA           reduce using rule 118 (compound_assignment -> noncondexpression AREM expression .)
    COLON           reduce using rule 118 (compound_assignment -> noncondexpression AREM expression .)
    RP              reduce using rule 118 (compound_assignment -> noncondexpression AREM expression .)
    RBRACK          reduce using rule 118 (compound_assignment -> noncondexpression AREM expression .)


state 283

    (119) compound_assignment -> noncondexpression AAND expression .

    SEMICOLON       reduce using rule 119 (compound_assignment -> noncondexpression AAND expression .)
    RBRACE          reduce using rule 119 (compound_assignment -> noncondexpression AAND expression .)
    COMMA           reduce using rule 119 (compound_assignment -> noncondexpression AAND expression .)
    COLON           reduce using rule 119 (compound_assignment -> noncondexpression AAND expression .)
    RP              reduce using rule 119 (compound_assignment -> noncondexpression AAND expression .)
    RBRACK          reduce using rule 119 (compound_assignment -> noncondexpression AAND expression .)


state 284

    (120) compound_assignment -> noncondexpression AXOR expression .

    SEMICOLON       reduce using rule 120 (compound_assignment -> noncondexpression AXOR expression .)
    RBRACE          reduce using rule 120 (compound_assignment -> noncondexpression AXOR expression .)
    COMMA           reduce using rule 120 (compound_assignment -> noncondexpression AXOR expression .)
    COLON           reduce using rule 120 (compound_assignment -> noncondexpression AXOR expression .)
    RP              reduce using rule 120 (compound_assignment -> noncondexpression AXOR expression .)
    RBRACK          reduce using rule 120 (compound_assignment -> noncondexpression AXOR expression .)


state 285

    (121) compound_assignment -> noncondexpression AOR expression .

    SEMICOLON       reduce using rule 121 (compound_assignment -> noncondexpression AOR expression .)
    RBRACE          reduce using rule 121 (compound_assignment -> noncondexpression AOR expression .)
    COMMA           reduce using rule 121 (compound_assignment -> noncondexpression AOR expression .)
    COLON           reduce using rule 121 (compound_assignment -> noncondexpression AOR expression .)
    RP              reduce using rule 121 (compound_assignment -> noncondexpression AOR expression .)
    RBRACK          reduce using rule 121 (compound_assignment -> noncondexpression AOR expression .)


state 286

    (122) compound_assignment -> noncondexpression ALSH expression .

    SEMICOLON       reduce using rule 122 (compound_assignment -> noncondexpression ALSH expression .)
    RBRACE          reduce using rule 122 (compound_assignment -> noncondexpression ALSH expression .)
    COMMA           reduce using rule 122 (compound_assignment -> noncondexpression ALSH expression .)
    COLON           reduce using rule 122 (compound_assignment -> noncondexpression ALSH expression .)
    RP              reduce using rule 122 (compound_assignment -> noncondexpression ALSH expression .)
    RBRACK          reduce using rule 122 (compound_assignment -> noncondexpression ALSH expression .)


state 287

    (123) compound_assignment -> noncondexpression ARSH expression .

    SEMICOLON       reduce using rule 123 (compound_assignment -> noncondexpression ARSH expression .)
    RBRACE          reduce using rule 123 (compound_assignment -> noncondexpression ARSH expression .)
    COMMA           reduce using rule 123 (compound_assignment -> noncondexpression ARSH expression .)
    COLON           reduce using rule 123 (compound_assignment -> noncondexpression ARSH expression .)
    RP              reduce using rule 123 (compound_assignment -> noncondexpression ARSH expression .)
    RBRACK          reduce using rule 123 (compound_assignment -> noncondexpression ARSH expression .)


state 288

    (124) compound_assignment -> noncondexpression AUSH expression .

    SEMICOLON       reduce using rule 124 (compound_assignment -> noncondexpression AUSH expression .)
    RBRACE          reduce using rule 124 (compound_assignment -> noncondexpression AUSH expression .)
    COMMA           reduce using rule 124 (compound_assignment -> noncondexpression AUSH expression .)
    COLON           reduce using rule 124 (compound_assignment -> noncondexpression AUSH expression .)
    RP              reduce using rule 124 (compound_assignment -> noncondexpression AUSH expression .)
    RBRACK          reduce using rule 124 (compound_assignment -> noncondexpression AUSH expression .)


state 289

    (165) braceaccess -> dynamic LBRACE expression . RBRACE

    RBRACE          shift and go to state 334


state 290

    (157) callinvoke_no_null_safe -> dynamic DOT ID . arguments
    (162) fieldaccess_no_null_safe -> dynamic DOT ID .
    (215) arguments -> . LP innerarguments RP
    (216) arguments -> . LP RP

    LBRACE          reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    DOT             reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    NSDOT           reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    INCR            reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    DECR            reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    COND            reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    MUL             reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    DIV             reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    REM             reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    ADD             reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    SUB             reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    FIND            reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    MATCH           reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    LSH             reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    RSH             reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    USH             reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    BWAND           reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    XOR             reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    BWOR            reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    BOOLAND         reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    BOOLOR          reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    GT              reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    GTE             reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    LT              reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    LTE             reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    EQ              reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    EQR             reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    NE              reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    NER             reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    INSTANCEOF      reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    ELVIS           reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    ASSIGN          reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    AADD            reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    ASUB            reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    AMUL            reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    ADIV            reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    AREM            reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    AAND            reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    AXOR            reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    AOR             reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    ALSH            reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    ARSH            reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    AUSH            reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    SEMICOLON       reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    RBRACE          reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    COMMA           reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    COLON           reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    RP              reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    RBRACK          reduce using rule 162 (fieldaccess_no_null_safe -> dynamic DOT ID .)
    LP              shift and go to state 110

    arguments                      shift and go to state 335

state 291

    (159) callinvoke_null_safe -> dynamic NSDOT ID . arguments
    (164) fieldaccess_null_safe -> dynamic NSDOT ID .
    (215) arguments -> . LP innerarguments RP
    (216) arguments -> . LP RP

    LBRACE          reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    DOT             reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    NSDOT           reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    INCR            reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    DECR            reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    COND            reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    MUL             reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    DIV             reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    REM             reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    ADD             reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    SUB             reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    FIND            reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    MATCH           reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    LSH             reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    RSH             reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    USH             reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    BWAND           reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    XOR             reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    BWOR            reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    BOOLAND         reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    BOOLOR          reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    GT              reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    GTE             reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    LT              reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    LTE             reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    EQ              reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    EQR             reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    NE              reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    NER             reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    INSTANCEOF      reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    ELVIS           reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    ASSIGN          reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    AADD            reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    ASUB            reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    AMUL            reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    ADIV            reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    AREM            reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    AAND            reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    AXOR            reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    AOR             reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    ALSH            reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    ARSH            reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    AUSH            reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    SEMICOLON       reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    RBRACE          reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    COMMA           reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    COLON           reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    RP              reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    RBRACK          reduce using rule 164 (fieldaccess_null_safe -> dynamic NSDOT ID .)
    LP              shift and go to state 110

    arguments                      shift and go to state 336

state 292

    (199) newstandardarray -> NEW type dims .
    (201) dims -> dims . dim
    (203) dim -> . LBRACE expression RBRACE

    INCR            reduce using rule 199 (newstandardarray -> NEW type dims .)
    DECR            reduce using rule 199 (newstandardarray -> NEW type dims .)
    COND            reduce using rule 199 (newstandardarray -> NEW type dims .)
    MUL             reduce using rule 199 (newstandardarray -> NEW type dims .)
    DIV             reduce using rule 199 (newstandardarray -> NEW type dims .)
    REM             reduce using rule 199 (newstandardarray -> NEW type dims .)
    ADD             reduce using rule 199 (newstandardarray -> NEW type dims .)
    SUB             reduce using rule 199 (newstandardarray -> NEW type dims .)
    FIND            reduce using rule 199 (newstandardarray -> NEW type dims .)
    MATCH           reduce using rule 199 (newstandardarray -> NEW type dims .)
    LSH             reduce using rule 199 (newstandardarray -> NEW type dims .)
    RSH             reduce using rule 199 (newstandardarray -> NEW type dims .)
    USH             reduce using rule 199 (newstandardarray -> NEW type dims .)
    BWAND           reduce using rule 199 (newstandardarray -> NEW type dims .)
    XOR             reduce using rule 199 (newstandardarray -> NEW type dims .)
    BWOR            reduce using rule 199 (newstandardarray -> NEW type dims .)
    BOOLAND         reduce using rule 199 (newstandardarray -> NEW type dims .)
    BOOLOR          reduce using rule 199 (newstandardarray -> NEW type dims .)
    GT              reduce using rule 199 (newstandardarray -> NEW type dims .)
    GTE             reduce using rule 199 (newstandardarray -> NEW type dims .)
    LT              reduce using rule 199 (newstandardarray -> NEW type dims .)
    LTE             reduce using rule 199 (newstandardarray -> NEW type dims .)
    EQ              reduce using rule 199 (newstandardarray -> NEW type dims .)
    EQR             reduce using rule 199 (newstandardarray -> NEW type dims .)
    NE              reduce using rule 199 (newstandardarray -> NEW type dims .)
    NER             reduce using rule 199 (newstandardarray -> NEW type dims .)
    INSTANCEOF      reduce using rule 199 (newstandardarray -> NEW type dims .)
    ELVIS           reduce using rule 199 (newstandardarray -> NEW type dims .)
    ASSIGN          reduce using rule 199 (newstandardarray -> NEW type dims .)
    AADD            reduce using rule 199 (newstandardarray -> NEW type dims .)
    ASUB            reduce using rule 199 (newstandardarray -> NEW type dims .)
    AMUL            reduce using rule 199 (newstandardarray -> NEW type dims .)
    ADIV            reduce using rule 199 (newstandardarray -> NEW type dims .)
    AREM            reduce using rule 199 (newstandardarray -> NEW type dims .)
    AAND            reduce using rule 199 (newstandardarray -> NEW type dims .)
    AXOR            reduce using rule 199 (newstandardarray -> NEW type dims .)
    AOR             reduce using rule 199 (newstandardarray -> NEW type dims .)
    ALSH            reduce using rule 199 (newstandardarray -> NEW type dims .)
    ARSH            reduce using rule 199 (newstandardarray -> NEW type dims .)
    AUSH            reduce using rule 199 (newstandardarray -> NEW type dims .)
    SEMICOLON       reduce using rule 199 (newstandardarray -> NEW type dims .)
    RBRACE          reduce using rule 199 (newstandardarray -> NEW type dims .)
    COMMA           reduce using rule 199 (newstandardarray -> NEW type dims .)
    COLON           reduce using rule 199 (newstandardarray -> NEW type dims .)
    RP              reduce using rule 199 (newstandardarray -> NEW type dims .)
    RBRACK          reduce using rule 199 (newstandardarray -> NEW type dims .)
    LBRACE          shift and go to state 338

    dim                            shift and go to state 337

state 293

    (200) newinitializedarray -> NEW type LBRACE . RBRACE LBRACK arguments RBRACK
    (203) dim -> LBRACE . expression RBRACE
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    RBRACE          shift and go to state 339
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    expression                     shift and go to state 340
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 294

    (196) newobject -> NEW type arguments .

    LBRACE          reduce using rule 196 (newobject -> NEW type arguments .)
    DOT             reduce using rule 196 (newobject -> NEW type arguments .)
    NSDOT           reduce using rule 196 (newobject -> NEW type arguments .)
    INCR            reduce using rule 196 (newobject -> NEW type arguments .)
    DECR            reduce using rule 196 (newobject -> NEW type arguments .)
    COND            reduce using rule 196 (newobject -> NEW type arguments .)
    MUL             reduce using rule 196 (newobject -> NEW type arguments .)
    DIV             reduce using rule 196 (newobject -> NEW type arguments .)
    REM             reduce using rule 196 (newobject -> NEW type arguments .)
    ADD             reduce using rule 196 (newobject -> NEW type arguments .)
    SUB             reduce using rule 196 (newobject -> NEW type arguments .)
    FIND            reduce using rule 196 (newobject -> NEW type arguments .)
    MATCH           reduce using rule 196 (newobject -> NEW type arguments .)
    LSH             reduce using rule 196 (newobject -> NEW type arguments .)
    RSH             reduce using rule 196 (newobject -> NEW type arguments .)
    USH             reduce using rule 196 (newobject -> NEW type arguments .)
    BWAND           reduce using rule 196 (newobject -> NEW type arguments .)
    XOR             reduce using rule 196 (newobject -> NEW type arguments .)
    BWOR            reduce using rule 196 (newobject -> NEW type arguments .)
    BOOLAND         reduce using rule 196 (newobject -> NEW type arguments .)
    BOOLOR          reduce using rule 196 (newobject -> NEW type arguments .)
    GT              reduce using rule 196 (newobject -> NEW type arguments .)
    GTE             reduce using rule 196 (newobject -> NEW type arguments .)
    LT              reduce using rule 196 (newobject -> NEW type arguments .)
    LTE             reduce using rule 196 (newobject -> NEW type arguments .)
    EQ              reduce using rule 196 (newobject -> NEW type arguments .)
    EQR             reduce using rule 196 (newobject -> NEW type arguments .)
    NE              reduce using rule 196 (newobject -> NEW type arguments .)
    NER             reduce using rule 196 (newobject -> NEW type arguments .)
    INSTANCEOF      reduce using rule 196 (newobject -> NEW type arguments .)
    ELVIS           reduce using rule 196 (newobject -> NEW type arguments .)
    ASSIGN          reduce using rule 196 (newobject -> NEW type arguments .)
    AADD            reduce using rule 196 (newobject -> NEW type arguments .)
    ASUB            reduce using rule 196 (newobject -> NEW type arguments .)
    AMUL            reduce using rule 196 (newobject -> NEW type arguments .)
    ADIV            reduce using rule 196 (newobject -> NEW type arguments .)
    AREM            reduce using rule 196 (newobject -> NEW type arguments .)
    AAND            reduce using rule 196 (newobject -> NEW type arguments .)
    AXOR            reduce using rule 196 (newobject -> NEW type arguments .)
    AOR             reduce using rule 196 (newobject -> NEW type arguments .)
    ALSH            reduce using rule 196 (newobject -> NEW type arguments .)
    ARSH            reduce using rule 196 (newobject -> NEW type arguments .)
    AUSH            reduce using rule 196 (newobject -> NEW type arguments .)
    SEMICOLON       reduce using rule 196 (newobject -> NEW type arguments .)
    RBRACE          reduce using rule 196 (newobject -> NEW type arguments .)
    COMMA           reduce using rule 196 (newobject -> NEW type arguments .)
    COLON           reduce using rule 196 (newobject -> NEW type arguments .)
    RP              reduce using rule 196 (newobject -> NEW type arguments .)
    RBRACK          reduce using rule 196 (newobject -> NEW type arguments .)


state 295

    (202) dims -> dim .

    LBRACE          reduce using rule 202 (dims -> dim .)
    INCR            reduce using rule 202 (dims -> dim .)
    DECR            reduce using rule 202 (dims -> dim .)
    COND            reduce using rule 202 (dims -> dim .)
    MUL             reduce using rule 202 (dims -> dim .)
    DIV             reduce using rule 202 (dims -> dim .)
    REM             reduce using rule 202 (dims -> dim .)
    ADD             reduce using rule 202 (dims -> dim .)
    SUB             reduce using rule 202 (dims -> dim .)
    FIND            reduce using rule 202 (dims -> dim .)
    MATCH           reduce using rule 202 (dims -> dim .)
    LSH             reduce using rule 202 (dims -> dim .)
    RSH             reduce using rule 202 (dims -> dim .)
    USH             reduce using rule 202 (dims -> dim .)
    BWAND           reduce using rule 202 (dims -> dim .)
    XOR             reduce using rule 202 (dims -> dim .)
    BWOR            reduce using rule 202 (dims -> dim .)
    BOOLAND         reduce using rule 202 (dims -> dim .)
    BOOLOR          reduce using rule 202 (dims -> dim .)
    GT              reduce using rule 202 (dims -> dim .)
    GTE             reduce using rule 202 (dims -> dim .)
    LT              reduce using rule 202 (dims -> dim .)
    LTE             reduce using rule 202 (dims -> dim .)
    EQ              reduce using rule 202 (dims -> dim .)
    EQR             reduce using rule 202 (dims -> dim .)
    NE              reduce using rule 202 (dims -> dim .)
    NER             reduce using rule 202 (dims -> dim .)
    INSTANCEOF      reduce using rule 202 (dims -> dim .)
    ELVIS           reduce using rule 202 (dims -> dim .)
    ASSIGN          reduce using rule 202 (dims -> dim .)
    AADD            reduce using rule 202 (dims -> dim .)
    ASUB            reduce using rule 202 (dims -> dim .)
    AMUL            reduce using rule 202 (dims -> dim .)
    ADIV            reduce using rule 202 (dims -> dim .)
    AREM            reduce using rule 202 (dims -> dim .)
    AAND            reduce using rule 202 (dims -> dim .)
    AXOR            reduce using rule 202 (dims -> dim .)
    AOR             reduce using rule 202 (dims -> dim .)
    ALSH            reduce using rule 202 (dims -> dim .)
    ARSH            reduce using rule 202 (dims -> dim .)
    AUSH            reduce using rule 202 (dims -> dim .)
    SEMICOLON       reduce using rule 202 (dims -> dim .)
    RBRACE          reduce using rule 202 (dims -> dim .)
    COMMA           reduce using rule 202 (dims -> dim .)
    COLON           reduce using rule 202 (dims -> dim .)
    RP              reduce using rule 202 (dims -> dim .)
    RBRACK          reduce using rule 202 (dims -> dim .)


state 296

    (7) function -> decltype ID parameters block .

    DEF             reduce using rule 7 (function -> decltype ID parameters block .)
    PRIMITIVE       reduce using rule 7 (function -> decltype ID parameters block .)
    IF              reduce using rule 7 (function -> decltype ID parameters block .)
    WHILE           reduce using rule 7 (function -> decltype ID parameters block .)
    FOR             reduce using rule 7 (function -> decltype ID parameters block .)
    TRY             reduce using rule 7 (function -> decltype ID parameters block .)
    DO              reduce using rule 7 (function -> decltype ID parameters block .)
    CONTINUE        reduce using rule 7 (function -> decltype ID parameters block .)
    BREAK           reduce using rule 7 (function -> decltype ID parameters block .)
    RETURN          reduce using rule 7 (function -> decltype ID parameters block .)
    THROW           reduce using rule 7 (function -> decltype ID parameters block .)
    ID              reduce using rule 7 (function -> decltype ID parameters block .)
    INCR            reduce using rule 7 (function -> decltype ID parameters block .)
    DECR            reduce using rule 7 (function -> decltype ID parameters block .)
    ADD             reduce using rule 7 (function -> decltype ID parameters block .)
    SUB             reduce using rule 7 (function -> decltype ID parameters block .)
    BOOLNOT         reduce using rule 7 (function -> decltype ID parameters block .)
    BWNOT           reduce using rule 7 (function -> decltype ID parameters block .)
    LP              reduce using rule 7 (function -> decltype ID parameters block .)
    NEW             reduce using rule 7 (function -> decltype ID parameters block .)
    TRUE            reduce using rule 7 (function -> decltype ID parameters block .)
    FALSE           reduce using rule 7 (function -> decltype ID parameters block .)
    NULL            reduce using rule 7 (function -> decltype ID parameters block .)
    STRING          reduce using rule 7 (function -> decltype ID parameters block .)
    REGEX           reduce using rule 7 (function -> decltype ID parameters block .)
    LBRACE          reduce using rule 7 (function -> decltype ID parameters block .)
    DOLLAR          reduce using rule 7 (function -> decltype ID parameters block .)
    OCTAL           reduce using rule 7 (function -> decltype ID parameters block .)
    HEX             reduce using rule 7 (function -> decltype ID parameters block .)
    INTEGER         reduce using rule 7 (function -> decltype ID parameters block .)
    DECIMAL         reduce using rule 7 (function -> decltype ID parameters block .)
    $end            reduce using rule 7 (function -> decltype ID parameters block .)


state 297

    (69) declvar -> ID ASSIGN expression .

    COMMA           reduce using rule 69 (declvar -> ID ASSIGN expression .)
    SEMICOLON       reduce using rule 69 (declvar -> ID ASSIGN expression .)
    RBRACK          reduce using rule 69 (declvar -> ID ASSIGN expression .)


state 298

    (8) parameters -> LP innerparameters . RP
    (10) innerparameters -> innerparameters . COMMA declparam

    RP              shift and go to state 341
    COMMA           shift and go to state 342


state 299

    (9) parameters -> LP RP .

    LBRACK          reduce using rule 9 (parameters -> LP RP .)


state 300

    (11) innerparameters -> declparam .

    RP              reduce using rule 11 (innerparameters -> declparam .)
    COMMA           reduce using rule 11 (innerparameters -> declparam .)


state 301

    (12) declparam -> decltype . ID

    ID              shift and go to state 343


state 302

    (67) declvars -> declvars COMMA declvar .

    COMMA           reduce using rule 67 (declvars -> declvars COMMA declvar .)
    SEMICOLON       reduce using rule 67 (declvars -> declvars COMMA declvar .)
    RBRACK          reduce using rule 67 (declvars -> declvars COMMA declvar .)


state 303

    (224) lamtypes -> LP innerlamtypes . RP
    (226) innerlamtypes -> innerlamtypes . COMMA lamtype

    RP              shift and go to state 344
    COMMA           shift and go to state 345


state 304

    (227) innerlamtypes -> lamtype .

    RP              reduce using rule 227 (innerlamtypes -> lamtype .)
    COMMA           reduce using rule 227 (innerlamtypes -> lamtype .)


state 305

    (143) primordefcasttype -> DEF .
    (145) refcasttype -> DEF . closedbraces
    (64) type -> DEF .
    (62) closedbraces -> . closedbraces LBRACE RBRACE
    (63) closedbraces -> . LBRACE RBRACE

  ! shift/reduce conflict for LBRACE resolved as shift
    RP              reduce using rule 143 (primordefcasttype -> DEF .)
    ID              reduce using rule 64 (type -> DEF .)
    LBRACE          shift and go to state 113

  ! LBRACE          [ reduce using rule 64 (type -> DEF .) ]

    closedbraces                   shift and go to state 232

state 306

    (144) primordefcasttype -> PRIMITIVE .
    (146) refcasttype -> PRIMITIVE . closedbraces
    (65) type -> PRIMITIVE .
    (62) closedbraces -> . closedbraces LBRACE RBRACE
    (63) closedbraces -> . LBRACE RBRACE

  ! shift/reduce conflict for LBRACE resolved as shift
    RP              reduce using rule 144 (primordefcasttype -> PRIMITIVE .)
    ID              reduce using rule 65 (type -> PRIMITIVE .)
    LBRACE          shift and go to state 113

  ! LBRACE          [ reduce using rule 65 (type -> PRIMITIVE .) ]

    closedbraces                   shift and go to state 233

state 307

    (147) refcasttype -> idaccess . closedbraces
    (148) refcasttype -> idaccess .
    (191) idaccess -> idaccess . DOT ID
    (66) type -> idaccess .
    (193) idaccess_lbrace -> idaccess . LBRACE
    (158) callinvoke_no_null_safe -> idaccess . arguments
    (163) fieldaccess_no_null_safe -> idaccess .
    (62) closedbraces -> . closedbraces LBRACE RBRACE
    (63) closedbraces -> . LBRACE RBRACE
    (215) arguments -> . LP innerarguments RP
    (216) arguments -> . LP RP

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! reduce/reduce conflict for RP resolved using rule 148 (refcasttype -> idaccess .)
    RP              reduce using rule 148 (refcasttype -> idaccess .)
    DOT             shift and go to state 120
    ID              reduce using rule 66 (type -> idaccess .)
    LBRACE          shift and go to state 235
    NSDOT           reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    INCR            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    DECR            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    COND            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    MUL             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    DIV             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    REM             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ADD             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    SUB             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    FIND            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    MATCH           reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    LSH             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    RSH             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    USH             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    BWAND           reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    XOR             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    BWOR            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    BOOLAND         reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    BOOLOR          reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    GT              reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    GTE             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    LT              reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    LTE             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    EQ              reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    EQR             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    NE              reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    NER             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    INSTANCEOF      reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ELVIS           reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ASSIGN          reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AADD            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ASUB            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AMUL            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ADIV            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AREM            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AAND            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AXOR            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AOR             reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ALSH            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    ARSH            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    AUSH            reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .)
    LP              shift and go to state 110

  ! LBRACE          [ reduce using rule 66 (type -> idaccess .) ]
  ! LBRACE          [ reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .) ]
  ! DOT             [ reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .) ]
  ! RP              [ reduce using rule 163 (fieldaccess_no_null_safe -> idaccess .) ]

    closedbraces                   shift and go to state 234
    arguments                      shift and go to state 121

state 308

    (228) lamtype -> decltype . ID

    ID              shift and go to state 313


state 309

    (215) arguments -> LP innerarguments RP .

    LBRACE          reduce using rule 215 (arguments -> LP innerarguments RP .)
    DOT             reduce using rule 215 (arguments -> LP innerarguments RP .)
    NSDOT           reduce using rule 215 (arguments -> LP innerarguments RP .)
    INCR            reduce using rule 215 (arguments -> LP innerarguments RP .)
    DECR            reduce using rule 215 (arguments -> LP innerarguments RP .)
    COND            reduce using rule 215 (arguments -> LP innerarguments RP .)
    MUL             reduce using rule 215 (arguments -> LP innerarguments RP .)
    DIV             reduce using rule 215 (arguments -> LP innerarguments RP .)
    REM             reduce using rule 215 (arguments -> LP innerarguments RP .)
    ADD             reduce using rule 215 (arguments -> LP innerarguments RP .)
    SUB             reduce using rule 215 (arguments -> LP innerarguments RP .)
    FIND            reduce using rule 215 (arguments -> LP innerarguments RP .)
    MATCH           reduce using rule 215 (arguments -> LP innerarguments RP .)
    LSH             reduce using rule 215 (arguments -> LP innerarguments RP .)
    RSH             reduce using rule 215 (arguments -> LP innerarguments RP .)
    USH             reduce using rule 215 (arguments -> LP innerarguments RP .)
    BWAND           reduce using rule 215 (arguments -> LP innerarguments RP .)
    XOR             reduce using rule 215 (arguments -> LP innerarguments RP .)
    BWOR            reduce using rule 215 (arguments -> LP innerarguments RP .)
    BOOLAND         reduce using rule 215 (arguments -> LP innerarguments RP .)
    BOOLOR          reduce using rule 215 (arguments -> LP innerarguments RP .)
    GT              reduce using rule 215 (arguments -> LP innerarguments RP .)
    GTE             reduce using rule 215 (arguments -> LP innerarguments RP .)
    LT              reduce using rule 215 (arguments -> LP innerarguments RP .)
    LTE             reduce using rule 215 (arguments -> LP innerarguments RP .)
    EQ              reduce using rule 215 (arguments -> LP innerarguments RP .)
    EQR             reduce using rule 215 (arguments -> LP innerarguments RP .)
    NE              reduce using rule 215 (arguments -> LP innerarguments RP .)
    NER             reduce using rule 215 (arguments -> LP innerarguments RP .)
    INSTANCEOF      reduce using rule 215 (arguments -> LP innerarguments RP .)
    ELVIS           reduce using rule 215 (arguments -> LP innerarguments RP .)
    ASSIGN          reduce using rule 215 (arguments -> LP innerarguments RP .)
    AADD            reduce using rule 215 (arguments -> LP innerarguments RP .)
    ASUB            reduce using rule 215 (arguments -> LP innerarguments RP .)
    AMUL            reduce using rule 215 (arguments -> LP innerarguments RP .)
    ADIV            reduce using rule 215 (arguments -> LP innerarguments RP .)
    AREM            reduce using rule 215 (arguments -> LP innerarguments RP .)
    AAND            reduce using rule 215 (arguments -> LP innerarguments RP .)
    AXOR            reduce using rule 215 (arguments -> LP innerarguments RP .)
    AOR             reduce using rule 215 (arguments -> LP innerarguments RP .)
    ALSH            reduce using rule 215 (arguments -> LP innerarguments RP .)
    ARSH            reduce using rule 215 (arguments -> LP innerarguments RP .)
    AUSH            reduce using rule 215 (arguments -> LP innerarguments RP .)
    SEMICOLON       reduce using rule 215 (arguments -> LP innerarguments RP .)
    RP              reduce using rule 215 (arguments -> LP innerarguments RP .)
    RBRACK          reduce using rule 215 (arguments -> LP innerarguments RP .)
    COMMA           reduce using rule 215 (arguments -> LP innerarguments RP .)
    RBRACE          reduce using rule 215 (arguments -> LP innerarguments RP .)
    COLON           reduce using rule 215 (arguments -> LP innerarguments RP .)


state 310

    (217) innerarguments -> innerarguments COMMA . argument
    (219) argument -> . expression
    (220) argument -> . lambda
    (221) argument -> . funcref
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (222) lambda -> . lamtypes ARROW block
    (223) lambda -> . lamtypes ARROW expression
    (230) funcref -> . classfuncref
    (231) funcref -> . constructorfuncref
    (232) funcref -> . localfuncref
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (224) lamtypes -> . LP innerlamtypes RP
    (225) lamtypes -> . lamtype
    (233) classfuncref -> . decltype REF ID
    (234) constructorfuncref -> . decltype REF NEW
    (235) localfuncref -> . THIS REF ID
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (228) lamtype -> . decltype ID
    (229) lamtype -> . ID
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    LP              shift and go to state 203
    THIS            shift and go to state 217
    ID              shift and go to state 216
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    argument                       shift and go to state 346
    expression                     shift and go to state 207
    lambda                         shift and go to state 208
    funcref                        shift and go to state 209
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    lamtypes                       shift and go to state 210
    classfuncref                   shift and go to state 211
    constructorfuncref             shift and go to state 212
    localfuncref                   shift and go to state 213
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    lamtype                        shift and go to state 214
    decltype                       shift and go to state 215
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 11
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    idaccess                       shift and go to state 28
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 311

    (222) lambda -> lamtypes ARROW . block
    (223) lambda -> lamtypes ARROW . expression
    (47) block -> . LBRACK statements RBRACK
    (48) block -> . LBRACK dstatement RBRACK
    (49) block -> . LBRACK statements dstatement RBRACK
    (50) block -> . LBRACK RBRACK
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    LBRACK          shift and go to state 139
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    block                          shift and go to state 347
    expression                     shift and go to state 348
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 312

    (233) classfuncref -> decltype REF . ID
    (234) constructorfuncref -> decltype REF . NEW

    ID              shift and go to state 349
    NEW             shift and go to state 350


state 313

    (228) lamtype -> decltype ID .

    ARROW           reduce using rule 228 (lamtype -> decltype ID .)
    RP              reduce using rule 228 (lamtype -> decltype ID .)
    COMMA           reduce using rule 228 (lamtype -> decltype ID .)


state 314

    (235) localfuncref -> THIS REF . ID

    ID              shift and go to state 351


state 315

    (62) closedbraces -> closedbraces LBRACE RBRACE .

    LBRACE          reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    ID              reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    REF             reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    COND            reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    MUL             reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    DIV             reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    REM             reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    ADD             reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    SUB             reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    FIND            reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    MATCH           reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    LSH             reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    RSH             reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    USH             reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    BWAND           reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    XOR             reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    BWOR            reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    BOOLAND         reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    BOOLOR          reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    GT              reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    GTE             reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    LT              reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    LTE             reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    EQ              reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    EQR             reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    NE              reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    NER             reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    INSTANCEOF      reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    ELVIS           reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    ASSIGN          reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    AADD            reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    ASUB            reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    AMUL            reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    ADIV            reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    AREM            reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    AAND            reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    AXOR            reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    AOR             reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    ALSH            reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    ARSH            reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    AUSH            reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    SEMICOLON       reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    RBRACE          reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    COMMA           reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    COLON           reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    RP              reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)
    RBRACK          reduce using rule 62 (closedbraces -> closedbraces LBRACE RBRACE .)


state 316

    (212) maptokens -> maptokens COMMA maptoken .

    COMMA           reduce using rule 212 (maptokens -> maptokens COMMA maptoken .)
    RBRACE          reduce using rule 212 (maptokens -> maptokens COMMA maptoken .)


state 317

    (214) maptoken -> expression . COLON expression

    COLON           shift and go to state 227


state 318

    (207) expressions -> expression COMMA expression .

    RBRACE          reduce using rule 207 (expressions -> expression COMMA expression .)


state 319

    (214) maptoken -> expression COLON expression .

    COMMA           reduce using rule 214 (maptoken -> expression COLON expression .)
    RBRACE          reduce using rule 214 (maptoken -> expression COLON expression .)


state 320

    (25) if_else -> IF LP expression RP . trailer ELSE trailer
    (24) if -> IF LP expression RP . trailer
    (45) trailer -> . block
    (46) trailer -> . statement
    (47) block -> . LBRACK statements RBRACK
    (48) block -> . LBRACK dstatement RBRACK
    (49) block -> . LBRACK statements dstatement RBRACK
    (50) block -> . LBRACK RBRACK
    (15) statement -> . rstatement
    (16) statement -> . dstatement SEMICOLON
    (17) rstatement -> . if_else
    (18) rstatement -> . if
    (19) rstatement -> . while
    (20) rstatement -> . for
    (21) rstatement -> . each
    (22) rstatement -> . ineach
    (23) rstatement -> . try
    (31) dstatement -> . do
    (32) dstatement -> . declaration
    (33) dstatement -> . continue
    (34) dstatement -> . break
    (35) dstatement -> . return
    (36) dstatement -> . throw
    (37) dstatement -> . expression
    (25) if_else -> . IF LP expression RP trailer ELSE trailer
    (24) if -> . IF LP expression RP trailer
    (26) while -> . WHILE LP expression RP trailer_or_empty
    (27) for -> . FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty
    (28) each -> . FOR LP decltype ID COLON expression RP trailer
    (29) ineach -> . FOR LP ID IN expression RP trailer
    (30) try -> . TRY block traps
    (38) do -> . DO block WHILE LP expression RP
    (57) declaration -> . decltype declvars
    (39) continue -> . CONTINUE
    (40) break -> . BREAK
    (41) return -> . RETURN optional_expression
    (42) throw -> . THROW expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    LBRACK          shift and go to state 139
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    TRY             shift and go to state 34
    DO              shift and go to state 35
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 37
    RETURN          shift and go to state 38
    THROW           shift and go to state 39
    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    ID              shift and go to state 7
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    expression                     shift and go to state 25
    trailer                        shift and go to state 352
    block                          shift and go to state 353
    statement                      shift and go to state 354
    dstatement                     shift and go to state 9
    rstatement                     shift and go to state 8
    if_else                        shift and go to state 12
    if                             shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    each                           shift and go to state 16
    ineach                         shift and go to state 17
    try                            shift and go to state 18
    do                             shift and go to state 19
    declaration                    shift and go to state 20
    continue                       shift and go to state 21
    break                          shift and go to state 22
    return                         shift and go to state 23
    throw                          shift and go to state 24
    decltype                       shift and go to state 105
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 11
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    idaccess                       shift and go to state 28
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 321

    (141) primordefcast -> LP primordefcasttype RP unary .

    COND            reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    MUL             reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    DIV             reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    REM             reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    ADD             reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    SUB             reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    FIND            reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    MATCH           reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    LSH             reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    RSH             reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    USH             reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    BWAND           reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    XOR             reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    BWOR            reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    BOOLAND         reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    BOOLOR          reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    GT              reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    GTE             reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    LT              reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    LTE             reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    EQ              reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    EQR             reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    NE              reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    NER             reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    INSTANCEOF      reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    ELVIS           reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    ASSIGN          reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    AADD            reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    ASUB            reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    AMUL            reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    ADIV            reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    AREM            reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    AAND            reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    AXOR            reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    AOR             reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    ALSH            reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    ARSH            reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    AUSH            reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    SEMICOLON       reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    RBRACE          reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    COMMA           reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    COLON           reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    RP              reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)
    RBRACK          reduce using rule 141 (primordefcast -> LP primordefcasttype RP unary .)


state 322

    (142) refcast -> LP refcasttype RP unarynotaddsub .

    COND            reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    MUL             reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    DIV             reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    REM             reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    ADD             reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    SUB             reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    FIND            reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    MATCH           reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    LSH             reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    RSH             reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    USH             reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    BWAND           reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    XOR             reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    BWOR            reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    BOOLAND         reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    BOOLOR          reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    GT              reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    GTE             reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    LT              reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    LTE             reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    EQ              reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    EQR             reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    NE              reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    NER             reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    INSTANCEOF      reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    ELVIS           reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    ASSIGN          reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    AADD            reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    ASUB            reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    AMUL            reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    ADIV            reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    AREM            reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    AAND            reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    AXOR            reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    AOR             reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    ALSH            reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    ARSH            reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    AUSH            reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    SEMICOLON       reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    RBRACE          reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    COMMA           reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    COLON           reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    RP              reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)
    RBRACK          reduce using rule 142 (refcast -> LP refcasttype RP unarynotaddsub .)


state 323

    (26) while -> WHILE LP expression RP . trailer_or_empty
    (43) trailer_or_empty -> . trailer
    (44) trailer_or_empty -> . empty
    (45) trailer -> . block
    (46) trailer -> . statement
    (51) empty -> . SEMICOLON
    (47) block -> . LBRACK statements RBRACK
    (48) block -> . LBRACK dstatement RBRACK
    (49) block -> . LBRACK statements dstatement RBRACK
    (50) block -> . LBRACK RBRACK
    (15) statement -> . rstatement
    (16) statement -> . dstatement SEMICOLON
    (17) rstatement -> . if_else
    (18) rstatement -> . if
    (19) rstatement -> . while
    (20) rstatement -> . for
    (21) rstatement -> . each
    (22) rstatement -> . ineach
    (23) rstatement -> . try
    (31) dstatement -> . do
    (32) dstatement -> . declaration
    (33) dstatement -> . continue
    (34) dstatement -> . break
    (35) dstatement -> . return
    (36) dstatement -> . throw
    (37) dstatement -> . expression
    (25) if_else -> . IF LP expression RP trailer ELSE trailer
    (24) if -> . IF LP expression RP trailer
    (26) while -> . WHILE LP expression RP trailer_or_empty
    (27) for -> . FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty
    (28) each -> . FOR LP decltype ID COLON expression RP trailer
    (29) ineach -> . FOR LP ID IN expression RP trailer
    (30) try -> . TRY block traps
    (38) do -> . DO block WHILE LP expression RP
    (57) declaration -> . decltype declvars
    (39) continue -> . CONTINUE
    (40) break -> . BREAK
    (41) return -> . RETURN optional_expression
    (42) throw -> . THROW expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    SEMICOLON       shift and go to state 358
    LBRACK          shift and go to state 139
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    TRY             shift and go to state 34
    DO              shift and go to state 35
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 37
    RETURN          shift and go to state 38
    THROW           shift and go to state 39
    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    ID              shift and go to state 7
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    expression                     shift and go to state 25
    trailer_or_empty               shift and go to state 355
    trailer                        shift and go to state 356
    empty                          shift and go to state 357
    block                          shift and go to state 353
    statement                      shift and go to state 354
    dstatement                     shift and go to state 9
    rstatement                     shift and go to state 8
    if_else                        shift and go to state 12
    if                             shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    each                           shift and go to state 16
    ineach                         shift and go to state 17
    try                            shift and go to state 18
    do                             shift and go to state 19
    declaration                    shift and go to state 20
    continue                       shift and go to state 21
    break                          shift and go to state 22
    return                         shift and go to state 23
    throw                          shift and go to state 24
    decltype                       shift and go to state 105
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 11
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    idaccess                       shift and go to state 28
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 324

    (27) for -> FOR LP initializer SEMICOLON . optional_expression SEMICOLON afterthought RP trailer_or_empty
    (74) optional_expression -> . expression
    (75) optional_expression -> .
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    SEMICOLON       reduce using rule 75 (optional_expression -> .)
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    optional_expression            shift and go to state 359
    expression                     shift and go to state 142
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 325

    (28) each -> FOR LP decltype ID . COLON expression RP trailer
    (69) declvar -> ID . ASSIGN expression
    (70) declvar -> ID .

    COLON           shift and go to state 360
    ASSIGN          shift and go to state 200
    COMMA           reduce using rule 70 (declvar -> ID .)
    SEMICOLON       reduce using rule 70 (declvar -> ID .)


state 326

    (29) ineach -> FOR LP ID IN . expression RP trailer
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    expression                     shift and go to state 361
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 327

    (71) traps -> traps trap .

    CATCH           reduce using rule 71 (traps -> traps trap .)
    IF              reduce using rule 71 (traps -> traps trap .)
    WHILE           reduce using rule 71 (traps -> traps trap .)
    FOR             reduce using rule 71 (traps -> traps trap .)
    TRY             reduce using rule 71 (traps -> traps trap .)
    DO              reduce using rule 71 (traps -> traps trap .)
    CONTINUE        reduce using rule 71 (traps -> traps trap .)
    BREAK           reduce using rule 71 (traps -> traps trap .)
    RETURN          reduce using rule 71 (traps -> traps trap .)
    THROW           reduce using rule 71 (traps -> traps trap .)
    DEF             reduce using rule 71 (traps -> traps trap .)
    PRIMITIVE       reduce using rule 71 (traps -> traps trap .)
    ID              reduce using rule 71 (traps -> traps trap .)
    INCR            reduce using rule 71 (traps -> traps trap .)
    DECR            reduce using rule 71 (traps -> traps trap .)
    ADD             reduce using rule 71 (traps -> traps trap .)
    SUB             reduce using rule 71 (traps -> traps trap .)
    BOOLNOT         reduce using rule 71 (traps -> traps trap .)
    BWNOT           reduce using rule 71 (traps -> traps trap .)
    LP              reduce using rule 71 (traps -> traps trap .)
    NEW             reduce using rule 71 (traps -> traps trap .)
    TRUE            reduce using rule 71 (traps -> traps trap .)
    FALSE           reduce using rule 71 (traps -> traps trap .)
    NULL            reduce using rule 71 (traps -> traps trap .)
    STRING          reduce using rule 71 (traps -> traps trap .)
    REGEX           reduce using rule 71 (traps -> traps trap .)
    LBRACE          reduce using rule 71 (traps -> traps trap .)
    DOLLAR          reduce using rule 71 (traps -> traps trap .)
    OCTAL           reduce using rule 71 (traps -> traps trap .)
    HEX             reduce using rule 71 (traps -> traps trap .)
    INTEGER         reduce using rule 71 (traps -> traps trap .)
    DECIMAL         reduce using rule 71 (traps -> traps trap .)
    $end            reduce using rule 71 (traps -> traps trap .)
    RBRACK          reduce using rule 71 (traps -> traps trap .)
    ELSE            reduce using rule 71 (traps -> traps trap .)


state 328

    (73) trap -> CATCH LP . type ID RP block
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID

    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    ID              shift and go to state 196

    type                           shift and go to state 362
    idaccess                       shift and go to state 195

state 329

    (47) block -> LBRACK statements RBRACK .

    CATCH           reduce using rule 47 (block -> LBRACK statements RBRACK .)
    WHILE           reduce using rule 47 (block -> LBRACK statements RBRACK .)
    DEF             reduce using rule 47 (block -> LBRACK statements RBRACK .)
    PRIMITIVE       reduce using rule 47 (block -> LBRACK statements RBRACK .)
    IF              reduce using rule 47 (block -> LBRACK statements RBRACK .)
    FOR             reduce using rule 47 (block -> LBRACK statements RBRACK .)
    TRY             reduce using rule 47 (block -> LBRACK statements RBRACK .)
    DO              reduce using rule 47 (block -> LBRACK statements RBRACK .)
    CONTINUE        reduce using rule 47 (block -> LBRACK statements RBRACK .)
    BREAK           reduce using rule 47 (block -> LBRACK statements RBRACK .)
    RETURN          reduce using rule 47 (block -> LBRACK statements RBRACK .)
    THROW           reduce using rule 47 (block -> LBRACK statements RBRACK .)
    ID              reduce using rule 47 (block -> LBRACK statements RBRACK .)
    INCR            reduce using rule 47 (block -> LBRACK statements RBRACK .)
    DECR            reduce using rule 47 (block -> LBRACK statements RBRACK .)
    ADD             reduce using rule 47 (block -> LBRACK statements RBRACK .)
    SUB             reduce using rule 47 (block -> LBRACK statements RBRACK .)
    BOOLNOT         reduce using rule 47 (block -> LBRACK statements RBRACK .)
    BWNOT           reduce using rule 47 (block -> LBRACK statements RBRACK .)
    LP              reduce using rule 47 (block -> LBRACK statements RBRACK .)
    NEW             reduce using rule 47 (block -> LBRACK statements RBRACK .)
    TRUE            reduce using rule 47 (block -> LBRACK statements RBRACK .)
    FALSE           reduce using rule 47 (block -> LBRACK statements RBRACK .)
    NULL            reduce using rule 47 (block -> LBRACK statements RBRACK .)
    STRING          reduce using rule 47 (block -> LBRACK statements RBRACK .)
    REGEX           reduce using rule 47 (block -> LBRACK statements RBRACK .)
    LBRACE          reduce using rule 47 (block -> LBRACK statements RBRACK .)
    DOLLAR          reduce using rule 47 (block -> LBRACK statements RBRACK .)
    OCTAL           reduce using rule 47 (block -> LBRACK statements RBRACK .)
    HEX             reduce using rule 47 (block -> LBRACK statements RBRACK .)
    INTEGER         reduce using rule 47 (block -> LBRACK statements RBRACK .)
    DECIMAL         reduce using rule 47 (block -> LBRACK statements RBRACK .)
    $end            reduce using rule 47 (block -> LBRACK statements RBRACK .)
    RP              reduce using rule 47 (block -> LBRACK statements RBRACK .)
    COMMA           reduce using rule 47 (block -> LBRACK statements RBRACK .)
    ELSE            reduce using rule 47 (block -> LBRACK statements RBRACK .)
    RBRACK          reduce using rule 47 (block -> LBRACK statements RBRACK .)


state 330

    (49) block -> LBRACK statements dstatement . RBRACK
    (16) statement -> dstatement . SEMICOLON

    RBRACK          shift and go to state 363
    SEMICOLON       shift and go to state 111


state 331

    (48) block -> LBRACK dstatement RBRACK .

    CATCH           reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    WHILE           reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    DEF             reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    PRIMITIVE       reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    IF              reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    FOR             reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    TRY             reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    DO              reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    CONTINUE        reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    BREAK           reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    RETURN          reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    THROW           reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    ID              reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    INCR            reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    DECR            reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    ADD             reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    SUB             reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    BOOLNOT         reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    BWNOT           reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    LP              reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    NEW             reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    TRUE            reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    FALSE           reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    NULL            reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    STRING          reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    REGEX           reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    LBRACE          reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    DOLLAR          reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    OCTAL           reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    HEX             reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    INTEGER         reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    DECIMAL         reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    $end            reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    RP              reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    COMMA           reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    ELSE            reduce using rule 48 (block -> LBRACK dstatement RBRACK .)
    RBRACK          reduce using rule 48 (block -> LBRACK dstatement RBRACK .)


state 332

    (38) do -> DO block WHILE LP . expression RP
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    expression                     shift and go to state 364
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 333

    (110) conditional -> noncondexpression COND expression COLON . expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    noncondexpression              shift and go to state 40
    expression                     shift and go to state 365
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 334

    (165) braceaccess -> dynamic LBRACE expression RBRACE .

    LBRACE          reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    DOT             reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    NSDOT           reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    INCR            reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    DECR            reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    COND            reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    MUL             reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    DIV             reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    REM             reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    ADD             reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    SUB             reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    FIND            reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    MATCH           reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    LSH             reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    RSH             reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    USH             reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    BWAND           reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    XOR             reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    BWOR            reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    BOOLAND         reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    BOOLOR          reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    GT              reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    GTE             reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    LT              reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    LTE             reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    EQ              reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    EQR             reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    NE              reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    NER             reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    INSTANCEOF      reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    ELVIS           reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    ASSIGN          reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    AADD            reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    ASUB            reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    AMUL            reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    ADIV            reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    AREM            reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    AAND            reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    AXOR            reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    AOR             reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    ALSH            reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    ARSH            reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    AUSH            reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    SEMICOLON       reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    RBRACE          reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    COMMA           reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    COLON           reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    RP              reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)
    RBRACK          reduce using rule 165 (braceaccess -> dynamic LBRACE expression RBRACE .)


state 335

    (157) callinvoke_no_null_safe -> dynamic DOT ID arguments .

    LBRACE          reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    DOT             reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    NSDOT           reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    INCR            reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    DECR            reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    COND            reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    MUL             reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    DIV             reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    REM             reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    ADD             reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    SUB             reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    FIND            reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    MATCH           reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    LSH             reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    RSH             reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    USH             reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    BWAND           reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    XOR             reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    BWOR            reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    BOOLAND         reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    BOOLOR          reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    GT              reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    GTE             reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    LT              reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    LTE             reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    EQ              reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    EQR             reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    NE              reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    NER             reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    INSTANCEOF      reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    ELVIS           reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    ASSIGN          reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    AADD            reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    ASUB            reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    AMUL            reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    ADIV            reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    AREM            reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    AAND            reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    AXOR            reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    AOR             reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    ALSH            reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    ARSH            reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    AUSH            reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    SEMICOLON       reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    RBRACE          reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    COMMA           reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    COLON           reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    RP              reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)
    RBRACK          reduce using rule 157 (callinvoke_no_null_safe -> dynamic DOT ID arguments .)


state 336

    (159) callinvoke_null_safe -> dynamic NSDOT ID arguments .

    LBRACE          reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    DOT             reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    NSDOT           reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    INCR            reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    DECR            reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    COND            reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    MUL             reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    DIV             reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    REM             reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    ADD             reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    SUB             reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    FIND            reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    MATCH           reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    LSH             reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    RSH             reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    USH             reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    BWAND           reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    XOR             reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    BWOR            reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    BOOLAND         reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    BOOLOR          reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    GT              reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    GTE             reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    LT              reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    LTE             reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    EQ              reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    EQR             reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    NE              reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    NER             reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    INSTANCEOF      reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    ELVIS           reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    ASSIGN          reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    AADD            reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    ASUB            reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    AMUL            reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    ADIV            reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    AREM            reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    AAND            reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    AXOR            reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    AOR             reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    ALSH            reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    ARSH            reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    AUSH            reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    SEMICOLON       reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    RBRACE          reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    COMMA           reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    COLON           reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    RP              reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)
    RBRACK          reduce using rule 159 (callinvoke_null_safe -> dynamic NSDOT ID arguments .)


state 337

    (201) dims -> dims dim .

    LBRACE          reduce using rule 201 (dims -> dims dim .)
    INCR            reduce using rule 201 (dims -> dims dim .)
    DECR            reduce using rule 201 (dims -> dims dim .)
    COND            reduce using rule 201 (dims -> dims dim .)
    MUL             reduce using rule 201 (dims -> dims dim .)
    DIV             reduce using rule 201 (dims -> dims dim .)
    REM             reduce using rule 201 (dims -> dims dim .)
    ADD             reduce using rule 201 (dims -> dims dim .)
    SUB             reduce using rule 201 (dims -> dims dim .)
    FIND            reduce using rule 201 (dims -> dims dim .)
    MATCH           reduce using rule 201 (dims -> dims dim .)
    LSH             reduce using rule 201 (dims -> dims dim .)
    RSH             reduce using rule 201 (dims -> dims dim .)
    USH             reduce using rule 201 (dims -> dims dim .)
    BWAND           reduce using rule 201 (dims -> dims dim .)
    XOR             reduce using rule 201 (dims -> dims dim .)
    BWOR            reduce using rule 201 (dims -> dims dim .)
    BOOLAND         reduce using rule 201 (dims -> dims dim .)
    BOOLOR          reduce using rule 201 (dims -> dims dim .)
    GT              reduce using rule 201 (dims -> dims dim .)
    GTE             reduce using rule 201 (dims -> dims dim .)
    LT              reduce using rule 201 (dims -> dims dim .)
    LTE             reduce using rule 201 (dims -> dims dim .)
    EQ              reduce using rule 201 (dims -> dims dim .)
    EQR             reduce using rule 201 (dims -> dims dim .)
    NE              reduce using rule 201 (dims -> dims dim .)
    NER             reduce using rule 201 (dims -> dims dim .)
    INSTANCEOF      reduce using rule 201 (dims -> dims dim .)
    ELVIS           reduce using rule 201 (dims -> dims dim .)
    ASSIGN          reduce using rule 201 (dims -> dims dim .)
    AADD            reduce using rule 201 (dims -> dims dim .)
    ASUB            reduce using rule 201 (dims -> dims dim .)
    AMUL            reduce using rule 201 (dims -> dims dim .)
    ADIV            reduce using rule 201 (dims -> dims dim .)
    AREM            reduce using rule 201 (dims -> dims dim .)
    AAND            reduce using rule 201 (dims -> dims dim .)
    AXOR            reduce using rule 201 (dims -> dims dim .)
    AOR             reduce using rule 201 (dims -> dims dim .)
    ALSH            reduce using rule 201 (dims -> dims dim .)
    ARSH            reduce using rule 201 (dims -> dims dim .)
    AUSH            reduce using rule 201 (dims -> dims dim .)
    SEMICOLON       reduce using rule 201 (dims -> dims dim .)
    RBRACE          reduce using rule 201 (dims -> dims dim .)
    COMMA           reduce using rule 201 (dims -> dims dim .)
    COLON           reduce using rule 201 (dims -> dims dim .)
    RP              reduce using rule 201 (dims -> dims dim .)
    RBRACK          reduce using rule 201 (dims -> dims dim .)


state 338

    (203) dim -> LBRACE . expression RBRACE
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    expression                     shift and go to state 340
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 339

    (200) newinitializedarray -> NEW type LBRACE RBRACE . LBRACK arguments RBRACK

    LBRACK          shift and go to state 366


state 340

    (203) dim -> LBRACE expression . RBRACE

    RBRACE          shift and go to state 367


state 341

    (8) parameters -> LP innerparameters RP .

    LBRACK          reduce using rule 8 (parameters -> LP innerparameters RP .)


state 342

    (10) innerparameters -> innerparameters COMMA . declparam
    (12) declparam -> . decltype ID
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID

    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    ID              shift and go to state 196

    declparam                      shift and go to state 368
    decltype                       shift and go to state 301
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 274
    idaccess                       shift and go to state 275

state 343

    (12) declparam -> decltype ID .

    RP              reduce using rule 12 (declparam -> decltype ID .)
    COMMA           reduce using rule 12 (declparam -> decltype ID .)


state 344

    (224) lamtypes -> LP innerlamtypes RP .

    ARROW           reduce using rule 224 (lamtypes -> LP innerlamtypes RP .)


state 345

    (226) innerlamtypes -> innerlamtypes COMMA . lamtype
    (228) lamtype -> . decltype ID
    (229) lamtype -> . ID
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID

    ID              shift and go to state 370
    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27

    lamtype                        shift and go to state 369
    decltype                       shift and go to state 308
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 274
    idaccess                       shift and go to state 275

state 346

    (217) innerarguments -> innerarguments COMMA argument .

    RP              reduce using rule 217 (innerarguments -> innerarguments COMMA argument .)
    COMMA           reduce using rule 217 (innerarguments -> innerarguments COMMA argument .)


state 347

    (222) lambda -> lamtypes ARROW block .

    RP              reduce using rule 222 (lambda -> lamtypes ARROW block .)
    COMMA           reduce using rule 222 (lambda -> lamtypes ARROW block .)


state 348

    (223) lambda -> lamtypes ARROW expression .

    RP              reduce using rule 223 (lambda -> lamtypes ARROW expression .)
    COMMA           reduce using rule 223 (lambda -> lamtypes ARROW expression .)


state 349

    (233) classfuncref -> decltype REF ID .

    RP              reduce using rule 233 (classfuncref -> decltype REF ID .)
    COMMA           reduce using rule 233 (classfuncref -> decltype REF ID .)


state 350

    (234) constructorfuncref -> decltype REF NEW .

    RP              reduce using rule 234 (constructorfuncref -> decltype REF NEW .)
    COMMA           reduce using rule 234 (constructorfuncref -> decltype REF NEW .)


state 351

    (235) localfuncref -> THIS REF ID .

    RP              reduce using rule 235 (localfuncref -> THIS REF ID .)
    COMMA           reduce using rule 235 (localfuncref -> THIS REF ID .)


state 352

    (25) if_else -> IF LP expression RP trailer . ELSE trailer
    (24) if -> IF LP expression RP trailer .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 371
    IF              reduce using rule 24 (if -> IF LP expression RP trailer .)
    WHILE           reduce using rule 24 (if -> IF LP expression RP trailer .)
    FOR             reduce using rule 24 (if -> IF LP expression RP trailer .)
    TRY             reduce using rule 24 (if -> IF LP expression RP trailer .)
    DO              reduce using rule 24 (if -> IF LP expression RP trailer .)
    CONTINUE        reduce using rule 24 (if -> IF LP expression RP trailer .)
    BREAK           reduce using rule 24 (if -> IF LP expression RP trailer .)
    RETURN          reduce using rule 24 (if -> IF LP expression RP trailer .)
    THROW           reduce using rule 24 (if -> IF LP expression RP trailer .)
    DEF             reduce using rule 24 (if -> IF LP expression RP trailer .)
    PRIMITIVE       reduce using rule 24 (if -> IF LP expression RP trailer .)
    ID              reduce using rule 24 (if -> IF LP expression RP trailer .)
    INCR            reduce using rule 24 (if -> IF LP expression RP trailer .)
    DECR            reduce using rule 24 (if -> IF LP expression RP trailer .)
    ADD             reduce using rule 24 (if -> IF LP expression RP trailer .)
    SUB             reduce using rule 24 (if -> IF LP expression RP trailer .)
    BOOLNOT         reduce using rule 24 (if -> IF LP expression RP trailer .)
    BWNOT           reduce using rule 24 (if -> IF LP expression RP trailer .)
    LP              reduce using rule 24 (if -> IF LP expression RP trailer .)
    NEW             reduce using rule 24 (if -> IF LP expression RP trailer .)
    TRUE            reduce using rule 24 (if -> IF LP expression RP trailer .)
    FALSE           reduce using rule 24 (if -> IF LP expression RP trailer .)
    NULL            reduce using rule 24 (if -> IF LP expression RP trailer .)
    STRING          reduce using rule 24 (if -> IF LP expression RP trailer .)
    REGEX           reduce using rule 24 (if -> IF LP expression RP trailer .)
    LBRACE          reduce using rule 24 (if -> IF LP expression RP trailer .)
    DOLLAR          reduce using rule 24 (if -> IF LP expression RP trailer .)
    OCTAL           reduce using rule 24 (if -> IF LP expression RP trailer .)
    HEX             reduce using rule 24 (if -> IF LP expression RP trailer .)
    INTEGER         reduce using rule 24 (if -> IF LP expression RP trailer .)
    DECIMAL         reduce using rule 24 (if -> IF LP expression RP trailer .)
    $end            reduce using rule 24 (if -> IF LP expression RP trailer .)
    RBRACK          reduce using rule 24 (if -> IF LP expression RP trailer .)

  ! ELSE            [ reduce using rule 24 (if -> IF LP expression RP trailer .) ]


state 353

    (45) trailer -> block .

    ELSE            reduce using rule 45 (trailer -> block .)
    IF              reduce using rule 45 (trailer -> block .)
    WHILE           reduce using rule 45 (trailer -> block .)
    FOR             reduce using rule 45 (trailer -> block .)
    TRY             reduce using rule 45 (trailer -> block .)
    DO              reduce using rule 45 (trailer -> block .)
    CONTINUE        reduce using rule 45 (trailer -> block .)
    BREAK           reduce using rule 45 (trailer -> block .)
    RETURN          reduce using rule 45 (trailer -> block .)
    THROW           reduce using rule 45 (trailer -> block .)
    DEF             reduce using rule 45 (trailer -> block .)
    PRIMITIVE       reduce using rule 45 (trailer -> block .)
    ID              reduce using rule 45 (trailer -> block .)
    INCR            reduce using rule 45 (trailer -> block .)
    DECR            reduce using rule 45 (trailer -> block .)
    ADD             reduce using rule 45 (trailer -> block .)
    SUB             reduce using rule 45 (trailer -> block .)
    BOOLNOT         reduce using rule 45 (trailer -> block .)
    BWNOT           reduce using rule 45 (trailer -> block .)
    LP              reduce using rule 45 (trailer -> block .)
    NEW             reduce using rule 45 (trailer -> block .)
    TRUE            reduce using rule 45 (trailer -> block .)
    FALSE           reduce using rule 45 (trailer -> block .)
    NULL            reduce using rule 45 (trailer -> block .)
    STRING          reduce using rule 45 (trailer -> block .)
    REGEX           reduce using rule 45 (trailer -> block .)
    LBRACE          reduce using rule 45 (trailer -> block .)
    DOLLAR          reduce using rule 45 (trailer -> block .)
    OCTAL           reduce using rule 45 (trailer -> block .)
    HEX             reduce using rule 45 (trailer -> block .)
    INTEGER         reduce using rule 45 (trailer -> block .)
    DECIMAL         reduce using rule 45 (trailer -> block .)
    $end            reduce using rule 45 (trailer -> block .)
    RBRACK          reduce using rule 45 (trailer -> block .)


state 354

    (46) trailer -> statement .

    ELSE            reduce using rule 46 (trailer -> statement .)
    IF              reduce using rule 46 (trailer -> statement .)
    WHILE           reduce using rule 46 (trailer -> statement .)
    FOR             reduce using rule 46 (trailer -> statement .)
    TRY             reduce using rule 46 (trailer -> statement .)
    DO              reduce using rule 46 (trailer -> statement .)
    CONTINUE        reduce using rule 46 (trailer -> statement .)
    BREAK           reduce using rule 46 (trailer -> statement .)
    RETURN          reduce using rule 46 (trailer -> statement .)
    THROW           reduce using rule 46 (trailer -> statement .)
    DEF             reduce using rule 46 (trailer -> statement .)
    PRIMITIVE       reduce using rule 46 (trailer -> statement .)
    ID              reduce using rule 46 (trailer -> statement .)
    INCR            reduce using rule 46 (trailer -> statement .)
    DECR            reduce using rule 46 (trailer -> statement .)
    ADD             reduce using rule 46 (trailer -> statement .)
    SUB             reduce using rule 46 (trailer -> statement .)
    BOOLNOT         reduce using rule 46 (trailer -> statement .)
    BWNOT           reduce using rule 46 (trailer -> statement .)
    LP              reduce using rule 46 (trailer -> statement .)
    NEW             reduce using rule 46 (trailer -> statement .)
    TRUE            reduce using rule 46 (trailer -> statement .)
    FALSE           reduce using rule 46 (trailer -> statement .)
    NULL            reduce using rule 46 (trailer -> statement .)
    STRING          reduce using rule 46 (trailer -> statement .)
    REGEX           reduce using rule 46 (trailer -> statement .)
    LBRACE          reduce using rule 46 (trailer -> statement .)
    DOLLAR          reduce using rule 46 (trailer -> statement .)
    OCTAL           reduce using rule 46 (trailer -> statement .)
    HEX             reduce using rule 46 (trailer -> statement .)
    INTEGER         reduce using rule 46 (trailer -> statement .)
    DECIMAL         reduce using rule 46 (trailer -> statement .)
    $end            reduce using rule 46 (trailer -> statement .)
    RBRACK          reduce using rule 46 (trailer -> statement .)


state 355

    (26) while -> WHILE LP expression RP trailer_or_empty .

    IF              reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    WHILE           reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    FOR             reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    TRY             reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    DO              reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    CONTINUE        reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    BREAK           reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    RETURN          reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    THROW           reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    DEF             reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    PRIMITIVE       reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    ID              reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    INCR            reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    DECR            reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    ADD             reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    SUB             reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    BOOLNOT         reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    BWNOT           reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    LP              reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    NEW             reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    TRUE            reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    FALSE           reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    NULL            reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    STRING          reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    REGEX           reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    LBRACE          reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    DOLLAR          reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    OCTAL           reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    HEX             reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    INTEGER         reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    DECIMAL         reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    $end            reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    RBRACK          reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)
    ELSE            reduce using rule 26 (while -> WHILE LP expression RP trailer_or_empty .)


state 356

    (43) trailer_or_empty -> trailer .

    ELSE            reduce using rule 43 (trailer_or_empty -> trailer .)
    IF              reduce using rule 43 (trailer_or_empty -> trailer .)
    WHILE           reduce using rule 43 (trailer_or_empty -> trailer .)
    FOR             reduce using rule 43 (trailer_or_empty -> trailer .)
    TRY             reduce using rule 43 (trailer_or_empty -> trailer .)
    DO              reduce using rule 43 (trailer_or_empty -> trailer .)
    CONTINUE        reduce using rule 43 (trailer_or_empty -> trailer .)
    BREAK           reduce using rule 43 (trailer_or_empty -> trailer .)
    RETURN          reduce using rule 43 (trailer_or_empty -> trailer .)
    THROW           reduce using rule 43 (trailer_or_empty -> trailer .)
    DEF             reduce using rule 43 (trailer_or_empty -> trailer .)
    PRIMITIVE       reduce using rule 43 (trailer_or_empty -> trailer .)
    ID              reduce using rule 43 (trailer_or_empty -> trailer .)
    INCR            reduce using rule 43 (trailer_or_empty -> trailer .)
    DECR            reduce using rule 43 (trailer_or_empty -> trailer .)
    ADD             reduce using rule 43 (trailer_or_empty -> trailer .)
    SUB             reduce using rule 43 (trailer_or_empty -> trailer .)
    BOOLNOT         reduce using rule 43 (trailer_or_empty -> trailer .)
    BWNOT           reduce using rule 43 (trailer_or_empty -> trailer .)
    LP              reduce using rule 43 (trailer_or_empty -> trailer .)
    NEW             reduce using rule 43 (trailer_or_empty -> trailer .)
    TRUE            reduce using rule 43 (trailer_or_empty -> trailer .)
    FALSE           reduce using rule 43 (trailer_or_empty -> trailer .)
    NULL            reduce using rule 43 (trailer_or_empty -> trailer .)
    STRING          reduce using rule 43 (trailer_or_empty -> trailer .)
    REGEX           reduce using rule 43 (trailer_or_empty -> trailer .)
    LBRACE          reduce using rule 43 (trailer_or_empty -> trailer .)
    DOLLAR          reduce using rule 43 (trailer_or_empty -> trailer .)
    OCTAL           reduce using rule 43 (trailer_or_empty -> trailer .)
    HEX             reduce using rule 43 (trailer_or_empty -> trailer .)
    INTEGER         reduce using rule 43 (trailer_or_empty -> trailer .)
    DECIMAL         reduce using rule 43 (trailer_or_empty -> trailer .)
    $end            reduce using rule 43 (trailer_or_empty -> trailer .)
    RBRACK          reduce using rule 43 (trailer_or_empty -> trailer .)


state 357

    (44) trailer_or_empty -> empty .

    ELSE            reduce using rule 44 (trailer_or_empty -> empty .)
    IF              reduce using rule 44 (trailer_or_empty -> empty .)
    WHILE           reduce using rule 44 (trailer_or_empty -> empty .)
    FOR             reduce using rule 44 (trailer_or_empty -> empty .)
    TRY             reduce using rule 44 (trailer_or_empty -> empty .)
    DO              reduce using rule 44 (trailer_or_empty -> empty .)
    CONTINUE        reduce using rule 44 (trailer_or_empty -> empty .)
    BREAK           reduce using rule 44 (trailer_or_empty -> empty .)
    RETURN          reduce using rule 44 (trailer_or_empty -> empty .)
    THROW           reduce using rule 44 (trailer_or_empty -> empty .)
    DEF             reduce using rule 44 (trailer_or_empty -> empty .)
    PRIMITIVE       reduce using rule 44 (trailer_or_empty -> empty .)
    ID              reduce using rule 44 (trailer_or_empty -> empty .)
    INCR            reduce using rule 44 (trailer_or_empty -> empty .)
    DECR            reduce using rule 44 (trailer_or_empty -> empty .)
    ADD             reduce using rule 44 (trailer_or_empty -> empty .)
    SUB             reduce using rule 44 (trailer_or_empty -> empty .)
    BOOLNOT         reduce using rule 44 (trailer_or_empty -> empty .)
    BWNOT           reduce using rule 44 (trailer_or_empty -> empty .)
    LP              reduce using rule 44 (trailer_or_empty -> empty .)
    NEW             reduce using rule 44 (trailer_or_empty -> empty .)
    TRUE            reduce using rule 44 (trailer_or_empty -> empty .)
    FALSE           reduce using rule 44 (trailer_or_empty -> empty .)
    NULL            reduce using rule 44 (trailer_or_empty -> empty .)
    STRING          reduce using rule 44 (trailer_or_empty -> empty .)
    REGEX           reduce using rule 44 (trailer_or_empty -> empty .)
    LBRACE          reduce using rule 44 (trailer_or_empty -> empty .)
    DOLLAR          reduce using rule 44 (trailer_or_empty -> empty .)
    OCTAL           reduce using rule 44 (trailer_or_empty -> empty .)
    HEX             reduce using rule 44 (trailer_or_empty -> empty .)
    INTEGER         reduce using rule 44 (trailer_or_empty -> empty .)
    DECIMAL         reduce using rule 44 (trailer_or_empty -> empty .)
    $end            reduce using rule 44 (trailer_or_empty -> empty .)
    RBRACK          reduce using rule 44 (trailer_or_empty -> empty .)


state 358

    (51) empty -> SEMICOLON .

    ELSE            reduce using rule 51 (empty -> SEMICOLON .)
    IF              reduce using rule 51 (empty -> SEMICOLON .)
    WHILE           reduce using rule 51 (empty -> SEMICOLON .)
    FOR             reduce using rule 51 (empty -> SEMICOLON .)
    TRY             reduce using rule 51 (empty -> SEMICOLON .)
    DO              reduce using rule 51 (empty -> SEMICOLON .)
    CONTINUE        reduce using rule 51 (empty -> SEMICOLON .)
    BREAK           reduce using rule 51 (empty -> SEMICOLON .)
    RETURN          reduce using rule 51 (empty -> SEMICOLON .)
    THROW           reduce using rule 51 (empty -> SEMICOLON .)
    DEF             reduce using rule 51 (empty -> SEMICOLON .)
    PRIMITIVE       reduce using rule 51 (empty -> SEMICOLON .)
    ID              reduce using rule 51 (empty -> SEMICOLON .)
    INCR            reduce using rule 51 (empty -> SEMICOLON .)
    DECR            reduce using rule 51 (empty -> SEMICOLON .)
    ADD             reduce using rule 51 (empty -> SEMICOLON .)
    SUB             reduce using rule 51 (empty -> SEMICOLON .)
    BOOLNOT         reduce using rule 51 (empty -> SEMICOLON .)
    BWNOT           reduce using rule 51 (empty -> SEMICOLON .)
    LP              reduce using rule 51 (empty -> SEMICOLON .)
    NEW             reduce using rule 51 (empty -> SEMICOLON .)
    TRUE            reduce using rule 51 (empty -> SEMICOLON .)
    FALSE           reduce using rule 51 (empty -> SEMICOLON .)
    NULL            reduce using rule 51 (empty -> SEMICOLON .)
    STRING          reduce using rule 51 (empty -> SEMICOLON .)
    REGEX           reduce using rule 51 (empty -> SEMICOLON .)
    LBRACE          reduce using rule 51 (empty -> SEMICOLON .)
    DOLLAR          reduce using rule 51 (empty -> SEMICOLON .)
    OCTAL           reduce using rule 51 (empty -> SEMICOLON .)
    HEX             reduce using rule 51 (empty -> SEMICOLON .)
    INTEGER         reduce using rule 51 (empty -> SEMICOLON .)
    DECIMAL         reduce using rule 51 (empty -> SEMICOLON .)
    $end            reduce using rule 51 (empty -> SEMICOLON .)
    RBRACK          reduce using rule 51 (empty -> SEMICOLON .)


state 359

    (27) for -> FOR LP initializer SEMICOLON optional_expression . SEMICOLON afterthought RP trailer_or_empty

    SEMICOLON       shift and go to state 372


state 360

    (28) each -> FOR LP decltype ID COLON . expression RP trailer
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    expression                     shift and go to state 373
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 361

    (29) ineach -> FOR LP ID IN expression . RP trailer

    RP              shift and go to state 374


state 362

    (73) trap -> CATCH LP type . ID RP block

    ID              shift and go to state 375


state 363

    (49) block -> LBRACK statements dstatement RBRACK .

    CATCH           reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    WHILE           reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    DEF             reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    PRIMITIVE       reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    IF              reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    FOR             reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    TRY             reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    DO              reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    CONTINUE        reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    BREAK           reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    RETURN          reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    THROW           reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    ID              reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    INCR            reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    DECR            reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    ADD             reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    SUB             reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    BOOLNOT         reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    BWNOT           reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    LP              reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    NEW             reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    TRUE            reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    FALSE           reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    NULL            reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    STRING          reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    REGEX           reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    LBRACE          reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    DOLLAR          reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    OCTAL           reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    HEX             reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    INTEGER         reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    DECIMAL         reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    $end            reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    RP              reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    COMMA           reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    ELSE            reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)
    RBRACK          reduce using rule 49 (block -> LBRACK statements dstatement RBRACK .)


state 364

    (38) do -> DO block WHILE LP expression . RP

    RP              shift and go to state 376


state 365

    (110) conditional -> noncondexpression COND expression COLON expression .

    SEMICOLON       reduce using rule 110 (conditional -> noncondexpression COND expression COLON expression .)
    RBRACE          reduce using rule 110 (conditional -> noncondexpression COND expression COLON expression .)
    COMMA           reduce using rule 110 (conditional -> noncondexpression COND expression COLON expression .)
    COLON           reduce using rule 110 (conditional -> noncondexpression COND expression COLON expression .)
    RP              reduce using rule 110 (conditional -> noncondexpression COND expression COLON expression .)
    RBRACK          reduce using rule 110 (conditional -> noncondexpression COND expression COLON expression .)


state 366

    (200) newinitializedarray -> NEW type LBRACE RBRACE LBRACK . arguments RBRACK
    (215) arguments -> . LP innerarguments RP
    (216) arguments -> . LP RP

    LP              shift and go to state 110

    arguments                      shift and go to state 377

state 367

    (203) dim -> LBRACE expression RBRACE .

    LBRACE          reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    INCR            reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    DECR            reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    COND            reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    MUL             reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    DIV             reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    REM             reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    ADD             reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    SUB             reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    FIND            reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    MATCH           reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    LSH             reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    RSH             reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    USH             reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    BWAND           reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    XOR             reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    BWOR            reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    BOOLAND         reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    BOOLOR          reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    GT              reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    GTE             reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    LT              reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    LTE             reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    EQ              reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    EQR             reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    NE              reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    NER             reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    INSTANCEOF      reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    ELVIS           reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    ASSIGN          reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    AADD            reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    ASUB            reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    AMUL            reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    ADIV            reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    AREM            reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    AAND            reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    AXOR            reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    AOR             reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    ALSH            reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    ARSH            reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    AUSH            reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    SEMICOLON       reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    RBRACE          reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    COMMA           reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    COLON           reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    RP              reduce using rule 203 (dim -> LBRACE expression RBRACE .)
    RBRACK          reduce using rule 203 (dim -> LBRACE expression RBRACE .)


state 368

    (10) innerparameters -> innerparameters COMMA declparam .

    RP              reduce using rule 10 (innerparameters -> innerparameters COMMA declparam .)
    COMMA           reduce using rule 10 (innerparameters -> innerparameters COMMA declparam .)


state 369

    (226) innerlamtypes -> innerlamtypes COMMA lamtype .

    RP              reduce using rule 226 (innerlamtypes -> innerlamtypes COMMA lamtype .)
    COMMA           reduce using rule 226 (innerlamtypes -> innerlamtypes COMMA lamtype .)


state 370

    (229) lamtype -> ID .
    (192) idaccess -> ID .

    RP              reduce using rule 229 (lamtype -> ID .)
    COMMA           reduce using rule 229 (lamtype -> ID .)
    LBRACE          reduce using rule 192 (idaccess -> ID .)
    DOT             reduce using rule 192 (idaccess -> ID .)
    ID              reduce using rule 192 (idaccess -> ID .)


state 371

    (25) if_else -> IF LP expression RP trailer ELSE . trailer
    (45) trailer -> . block
    (46) trailer -> . statement
    (47) block -> . LBRACK statements RBRACK
    (48) block -> . LBRACK dstatement RBRACK
    (49) block -> . LBRACK statements dstatement RBRACK
    (50) block -> . LBRACK RBRACK
    (15) statement -> . rstatement
    (16) statement -> . dstatement SEMICOLON
    (17) rstatement -> . if_else
    (18) rstatement -> . if
    (19) rstatement -> . while
    (20) rstatement -> . for
    (21) rstatement -> . each
    (22) rstatement -> . ineach
    (23) rstatement -> . try
    (31) dstatement -> . do
    (32) dstatement -> . declaration
    (33) dstatement -> . continue
    (34) dstatement -> . break
    (35) dstatement -> . return
    (36) dstatement -> . throw
    (37) dstatement -> . expression
    (25) if_else -> . IF LP expression RP trailer ELSE trailer
    (24) if -> . IF LP expression RP trailer
    (26) while -> . WHILE LP expression RP trailer_or_empty
    (27) for -> . FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty
    (28) each -> . FOR LP decltype ID COLON expression RP trailer
    (29) ineach -> . FOR LP ID IN expression RP trailer
    (30) try -> . TRY block traps
    (38) do -> . DO block WHILE LP expression RP
    (57) declaration -> . decltype declvars
    (39) continue -> . CONTINUE
    (40) break -> . BREAK
    (41) return -> . RETURN optional_expression
    (42) throw -> . THROW expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    LBRACK          shift and go to state 139
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    TRY             shift and go to state 34
    DO              shift and go to state 35
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 37
    RETURN          shift and go to state 38
    THROW           shift and go to state 39
    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    ID              shift and go to state 7
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    expression                     shift and go to state 25
    trailer                        shift and go to state 378
    block                          shift and go to state 353
    statement                      shift and go to state 354
    dstatement                     shift and go to state 9
    rstatement                     shift and go to state 8
    if_else                        shift and go to state 12
    if                             shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    each                           shift and go to state 16
    ineach                         shift and go to state 17
    try                            shift and go to state 18
    do                             shift and go to state 19
    declaration                    shift and go to state 20
    continue                       shift and go to state 21
    break                          shift and go to state 22
    return                         shift and go to state 23
    throw                          shift and go to state 24
    decltype                       shift and go to state 105
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 11
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    idaccess                       shift and go to state 28
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 372

    (27) for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON . afterthought RP trailer_or_empty
    (55) afterthought -> . expression
    (56) afterthought -> .
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (193) idaccess_lbrace -> . idaccess LBRACE
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    RP              reduce using rule 56 (afterthought -> .)
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    ID              shift and go to state 117
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    afterthought                   shift and go to state 379
    expression                     shift and go to state 380
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    idaccess_lbrace                shift and go to state 114
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    idaccess                       shift and go to state 118
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 373

    (28) each -> FOR LP decltype ID COLON expression . RP trailer

    RP              shift and go to state 381


state 374

    (29) ineach -> FOR LP ID IN expression RP . trailer
    (45) trailer -> . block
    (46) trailer -> . statement
    (47) block -> . LBRACK statements RBRACK
    (48) block -> . LBRACK dstatement RBRACK
    (49) block -> . LBRACK statements dstatement RBRACK
    (50) block -> . LBRACK RBRACK
    (15) statement -> . rstatement
    (16) statement -> . dstatement SEMICOLON
    (17) rstatement -> . if_else
    (18) rstatement -> . if
    (19) rstatement -> . while
    (20) rstatement -> . for
    (21) rstatement -> . each
    (22) rstatement -> . ineach
    (23) rstatement -> . try
    (31) dstatement -> . do
    (32) dstatement -> . declaration
    (33) dstatement -> . continue
    (34) dstatement -> . break
    (35) dstatement -> . return
    (36) dstatement -> . throw
    (37) dstatement -> . expression
    (25) if_else -> . IF LP expression RP trailer ELSE trailer
    (24) if -> . IF LP expression RP trailer
    (26) while -> . WHILE LP expression RP trailer_or_empty
    (27) for -> . FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty
    (28) each -> . FOR LP decltype ID COLON expression RP trailer
    (29) ineach -> . FOR LP ID IN expression RP trailer
    (30) try -> . TRY block traps
    (38) do -> . DO block WHILE LP expression RP
    (57) declaration -> . decltype declvars
    (39) continue -> . CONTINUE
    (40) break -> . BREAK
    (41) return -> . RETURN optional_expression
    (42) throw -> . THROW expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    LBRACK          shift and go to state 139
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    TRY             shift and go to state 34
    DO              shift and go to state 35
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 37
    RETURN          shift and go to state 38
    THROW           shift and go to state 39
    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    ID              shift and go to state 7
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    expression                     shift and go to state 25
    trailer                        shift and go to state 382
    block                          shift and go to state 353
    statement                      shift and go to state 354
    dstatement                     shift and go to state 9
    rstatement                     shift and go to state 8
    if_else                        shift and go to state 12
    if                             shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    each                           shift and go to state 16
    ineach                         shift and go to state 17
    try                            shift and go to state 18
    do                             shift and go to state 19
    declaration                    shift and go to state 20
    continue                       shift and go to state 21
    break                          shift and go to state 22
    return                         shift and go to state 23
    throw                          shift and go to state 24
    decltype                       shift and go to state 105
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 11
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    idaccess                       shift and go to state 28
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 375

    (73) trap -> CATCH LP type ID . RP block

    RP              shift and go to state 383


state 376

    (38) do -> DO block WHILE LP expression RP .

    SEMICOLON       reduce using rule 38 (do -> DO block WHILE LP expression RP .)
    RBRACK          reduce using rule 38 (do -> DO block WHILE LP expression RP .)


state 377

    (200) newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments . RBRACK

    RBRACK          shift and go to state 384


state 378

    (25) if_else -> IF LP expression RP trailer ELSE trailer .

    IF              reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    WHILE           reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    FOR             reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    TRY             reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    DO              reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    CONTINUE        reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    BREAK           reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    RETURN          reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    THROW           reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    DEF             reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    PRIMITIVE       reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    ID              reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    INCR            reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    DECR            reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    ADD             reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    SUB             reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    BOOLNOT         reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    BWNOT           reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    LP              reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    NEW             reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    TRUE            reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    FALSE           reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    NULL            reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    STRING          reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    REGEX           reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    LBRACE          reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    DOLLAR          reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    OCTAL           reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    HEX             reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    INTEGER         reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    DECIMAL         reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    $end            reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    RBRACK          reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)
    ELSE            reduce using rule 25 (if_else -> IF LP expression RP trailer ELSE trailer .)


state 379

    (27) for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought . RP trailer_or_empty

    RP              shift and go to state 385


state 380

    (55) afterthought -> expression .

    RP              reduce using rule 55 (afterthought -> expression .)


state 381

    (28) each -> FOR LP decltype ID COLON expression RP . trailer
    (45) trailer -> . block
    (46) trailer -> . statement
    (47) block -> . LBRACK statements RBRACK
    (48) block -> . LBRACK dstatement RBRACK
    (49) block -> . LBRACK statements dstatement RBRACK
    (50) block -> . LBRACK RBRACK
    (15) statement -> . rstatement
    (16) statement -> . dstatement SEMICOLON
    (17) rstatement -> . if_else
    (18) rstatement -> . if
    (19) rstatement -> . while
    (20) rstatement -> . for
    (21) rstatement -> . each
    (22) rstatement -> . ineach
    (23) rstatement -> . try
    (31) dstatement -> . do
    (32) dstatement -> . declaration
    (33) dstatement -> . continue
    (34) dstatement -> . break
    (35) dstatement -> . return
    (36) dstatement -> . throw
    (37) dstatement -> . expression
    (25) if_else -> . IF LP expression RP trailer ELSE trailer
    (24) if -> . IF LP expression RP trailer
    (26) while -> . WHILE LP expression RP trailer_or_empty
    (27) for -> . FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty
    (28) each -> . FOR LP decltype ID COLON expression RP trailer
    (29) ineach -> . FOR LP ID IN expression RP trailer
    (30) try -> . TRY block traps
    (38) do -> . DO block WHILE LP expression RP
    (57) declaration -> . decltype declvars
    (39) continue -> . CONTINUE
    (40) break -> . BREAK
    (41) return -> . RETURN optional_expression
    (42) throw -> . THROW expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    LBRACK          shift and go to state 139
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    TRY             shift and go to state 34
    DO              shift and go to state 35
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 37
    RETURN          shift and go to state 38
    THROW           shift and go to state 39
    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    ID              shift and go to state 7
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    decltype                       shift and go to state 105
    expression                     shift and go to state 25
    trailer                        shift and go to state 386
    block                          shift and go to state 353
    statement                      shift and go to state 354
    dstatement                     shift and go to state 9
    rstatement                     shift and go to state 8
    if_else                        shift and go to state 12
    if                             shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    each                           shift and go to state 16
    ineach                         shift and go to state 17
    try                            shift and go to state 18
    do                             shift and go to state 19
    declaration                    shift and go to state 20
    continue                       shift and go to state 21
    break                          shift and go to state 22
    return                         shift and go to state 23
    throw                          shift and go to state 24
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 11
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    idaccess                       shift and go to state 28
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 382

    (29) ineach -> FOR LP ID IN expression RP trailer .

    IF              reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    WHILE           reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    FOR             reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    TRY             reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    DO              reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    CONTINUE        reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    BREAK           reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    RETURN          reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    THROW           reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    DEF             reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    PRIMITIVE       reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    ID              reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    INCR            reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    DECR            reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    ADD             reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    SUB             reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    BOOLNOT         reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    BWNOT           reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    LP              reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    NEW             reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    TRUE            reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    FALSE           reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    NULL            reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    STRING          reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    REGEX           reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    LBRACE          reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    DOLLAR          reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    OCTAL           reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    HEX             reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    INTEGER         reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    DECIMAL         reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    $end            reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    RBRACK          reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)
    ELSE            reduce using rule 29 (ineach -> FOR LP ID IN expression RP trailer .)


state 383

    (73) trap -> CATCH LP type ID RP . block
    (47) block -> . LBRACK statements RBRACK
    (48) block -> . LBRACK dstatement RBRACK
    (49) block -> . LBRACK statements dstatement RBRACK
    (50) block -> . LBRACK RBRACK

    LBRACK          shift and go to state 139

    block                          shift and go to state 387

state 384

    (200) newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .

    INCR            reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    DECR            reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    COND            reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    MUL             reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    DIV             reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    REM             reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    ADD             reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    SUB             reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    FIND            reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    MATCH           reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    LSH             reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    RSH             reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    USH             reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    BWAND           reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    XOR             reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    BWOR            reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    BOOLAND         reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    BOOLOR          reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    GT              reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    GTE             reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    LT              reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    LTE             reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    EQ              reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    EQR             reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    NE              reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    NER             reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    INSTANCEOF      reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    ELVIS           reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    ASSIGN          reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    AADD            reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    ASUB            reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    AMUL            reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    ADIV            reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    AREM            reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    AAND            reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    AXOR            reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    AOR             reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    ALSH            reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    ARSH            reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    AUSH            reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    SEMICOLON       reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    RBRACE          reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    COMMA           reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    COLON           reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    RP              reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)
    RBRACK          reduce using rule 200 (newinitializedarray -> NEW type LBRACE RBRACE LBRACK arguments RBRACK .)


state 385

    (27) for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP . trailer_or_empty
    (43) trailer_or_empty -> . trailer
    (44) trailer_or_empty -> . empty
    (45) trailer -> . block
    (46) trailer -> . statement
    (51) empty -> . SEMICOLON
    (47) block -> . LBRACK statements RBRACK
    (48) block -> . LBRACK dstatement RBRACK
    (49) block -> . LBRACK statements dstatement RBRACK
    (50) block -> . LBRACK RBRACK
    (15) statement -> . rstatement
    (16) statement -> . dstatement SEMICOLON
    (17) rstatement -> . if_else
    (18) rstatement -> . if
    (19) rstatement -> . while
    (20) rstatement -> . for
    (21) rstatement -> . each
    (22) rstatement -> . ineach
    (23) rstatement -> . try
    (31) dstatement -> . do
    (32) dstatement -> . declaration
    (33) dstatement -> . continue
    (34) dstatement -> . break
    (35) dstatement -> . return
    (36) dstatement -> . throw
    (37) dstatement -> . expression
    (25) if_else -> . IF LP expression RP trailer ELSE trailer
    (24) if -> . IF LP expression RP trailer
    (26) while -> . WHILE LP expression RP trailer_or_empty
    (27) for -> . FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty
    (28) each -> . FOR LP decltype ID COLON expression RP trailer
    (29) ineach -> . FOR LP ID IN expression RP trailer
    (30) try -> . TRY block traps
    (38) do -> . DO block WHILE LP expression RP
    (57) declaration -> . decltype declvars
    (39) continue -> . CONTINUE
    (40) break -> . BREAK
    (41) return -> . RETURN optional_expression
    (42) throw -> . THROW expression
    (107) expression -> . noncondexpression
    (108) expression -> . conditional
    (109) expression -> . assignment
    (58) decltype -> . type closedbraces
    (59) decltype -> . type
    (60) decltype -> . idaccess_lbrace RBRACE closedbraces
    (61) decltype -> . idaccess_lbrace RBRACE
    (76) noncondexpression -> . unary
    (77) noncondexpression -> . binary
    (78) noncondexpression -> . bool
    (79) noncondexpression -> . comp
    (80) noncondexpression -> . instanceof
    (81) noncondexpression -> . elvis
    (110) conditional -> . noncondexpression COND expression COLON expression
    (111) assignment -> . only_assignment
    (112) assignment -> . compound_assignment
    (64) type -> . DEF
    (65) type -> . PRIMITIVE
    (66) type -> . idaccess
    (193) idaccess_lbrace -> . idaccess LBRACE
    (125) unary -> . pre
    (126) unary -> . unarynotaddsub
    (82) binary -> . noncondexpression MUL noncondexpression
    (83) binary -> . noncondexpression DIV noncondexpression
    (84) binary -> . noncondexpression REM noncondexpression
    (85) binary -> . noncondexpression ADD noncondexpression
    (86) binary -> . noncondexpression SUB noncondexpression
    (87) binary -> . noncondexpression FIND noncondexpression
    (88) binary -> . noncondexpression MATCH noncondexpression
    (89) binary -> . noncondexpression LSH noncondexpression
    (90) binary -> . noncondexpression RSH noncondexpression
    (91) binary -> . noncondexpression USH noncondexpression
    (92) binary -> . noncondexpression BWAND noncondexpression
    (93) binary -> . noncondexpression XOR noncondexpression
    (94) binary -> . noncondexpression BWOR noncondexpression
    (95) bool -> . noncondexpression BOOLAND noncondexpression
    (96) bool -> . noncondexpression BOOLOR noncondexpression
    (97) comp -> . noncondexpression GT noncondexpression
    (98) comp -> . noncondexpression GTE noncondexpression
    (99) comp -> . noncondexpression LT noncondexpression
    (100) comp -> . noncondexpression LTE noncondexpression
    (101) comp -> . noncondexpression EQ noncondexpression
    (102) comp -> . noncondexpression EQR noncondexpression
    (103) comp -> . noncondexpression NE noncondexpression
    (104) comp -> . noncondexpression NER noncondexpression
    (105) instanceof -> . noncondexpression INSTANCEOF decltype
    (106) elvis -> . noncondexpression ELVIS noncondexpression
    (113) only_assignment -> . noncondexpression ASSIGN expression
    (114) compound_assignment -> . noncondexpression AADD expression
    (115) compound_assignment -> . noncondexpression ASUB expression
    (116) compound_assignment -> . noncondexpression AMUL expression
    (117) compound_assignment -> . noncondexpression ADIV expression
    (118) compound_assignment -> . noncondexpression AREM expression
    (119) compound_assignment -> . noncondexpression AAND expression
    (120) compound_assignment -> . noncondexpression AXOR expression
    (121) compound_assignment -> . noncondexpression AOR expression
    (122) compound_assignment -> . noncondexpression ALSH expression
    (123) compound_assignment -> . noncondexpression ARSH expression
    (124) compound_assignment -> . noncondexpression AUSH expression
    (191) idaccess -> . idaccess DOT ID
    (192) idaccess -> . ID
    (127) pre -> . INCR chain
    (128) pre -> . DECR chain
    (129) pre -> . ADD unary
    (130) pre -> . SUB unary
    (131) unarynotaddsub -> . chain
    (132) unarynotaddsub -> . post
    (133) unarynotaddsub -> . not
    (134) unarynotaddsub -> . castexpression
    (149) chain -> . arrayinitializer
    (150) chain -> . dynamic
    (135) post -> . chain INCR
    (136) post -> . chain DECR
    (137) not -> . BOOLNOT unary
    (138) not -> . BWNOT unary
    (139) castexpression -> . primordefcast
    (140) castexpression -> . refcast
    (197) arrayinitializer -> . newstandardarray
    (198) arrayinitializer -> . newinitializedarray
    (151) dynamic -> . callinvoke
    (152) dynamic -> . fieldaccess
    (153) dynamic -> . braceaccess
    (154) dynamic -> . primary
    (141) primordefcast -> . LP primordefcasttype RP unary
    (142) refcast -> . LP refcasttype RP unarynotaddsub
    (199) newstandardarray -> . NEW type dims
    (200) newinitializedarray -> . NEW type LBRACE RBRACE LBRACK arguments RBRACK
    (155) callinvoke -> . callinvoke_no_null_safe
    (156) callinvoke -> . callinvoke_null_safe
    (160) fieldaccess -> . fieldaccess_no_null_safe
    (161) fieldaccess -> . fieldaccess_null_safe
    (165) braceaccess -> . dynamic LBRACE expression RBRACE
    (166) braceaccess -> . idaccess_lbrace expression RBRACE
    (167) primary -> . precedence
    (168) primary -> . numeric
    (169) primary -> . boolean
    (170) primary -> . null
    (171) primary -> . string
    (172) primary -> . regex
    (173) primary -> . listinitializer
    (174) primary -> . mapinitializer
    (175) primary -> . calllocal
    (176) primary -> . newobject
    (157) callinvoke_no_null_safe -> . dynamic DOT ID arguments
    (158) callinvoke_no_null_safe -> . idaccess arguments
    (159) callinvoke_null_safe -> . dynamic NSDOT ID arguments
    (162) fieldaccess_no_null_safe -> . dynamic DOT ID
    (163) fieldaccess_no_null_safe -> . idaccess
    (164) fieldaccess_null_safe -> . dynamic NSDOT ID
    (177) precedence -> . LP expression RP
    (178) numeric -> . octal
    (179) numeric -> . hex
    (180) numeric -> . integer
    (181) numeric -> . decimal
    (186) boolean -> . TRUE
    (187) boolean -> . FALSE
    (188) null -> . NULL
    (189) string -> . STRING
    (190) regex -> . REGEX
    (204) listinitializer -> . LBRACE optional_expressions RBRACE
    (209) mapinitializer -> . LBRACE optional_maptokens RBRACE
    (194) calllocal -> . ID arguments
    (195) calllocal -> . DOLLAR arguments
    (196) newobject -> . NEW type arguments
    (182) octal -> . OCTAL
    (183) hex -> . HEX
    (184) integer -> . INTEGER
    (185) decimal -> . DECIMAL

    SEMICOLON       shift and go to state 358
    LBRACK          shift and go to state 139
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    TRY             shift and go to state 34
    DO              shift and go to state 35
    CONTINUE        shift and go to state 36
    BREAK           shift and go to state 37
    RETURN          shift and go to state 38
    THROW           shift and go to state 39
    DEF             shift and go to state 26
    PRIMITIVE       shift and go to state 27
    ID              shift and go to state 7
    INCR            shift and go to state 55
    DECR            shift and go to state 57
    ADD             shift and go to state 53
    SUB             shift and go to state 54
    BOOLNOT         shift and go to state 63
    BWNOT           shift and go to state 64
    LP              shift and go to state 31
    NEW             shift and go to state 73
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    NULL            shift and go to state 94
    STRING          shift and go to state 95
    REGEX           shift and go to state 96
    LBRACE          shift and go to state 29
    DOLLAR          shift and go to state 97
    OCTAL           shift and go to state 98
    HEX             shift and go to state 99
    INTEGER         shift and go to state 100
    DECIMAL         shift and go to state 101

    trailer_or_empty               shift and go to state 388
    trailer                        shift and go to state 356
    empty                          shift and go to state 357
    block                          shift and go to state 353
    statement                      shift and go to state 354
    dstatement                     shift and go to state 9
    rstatement                     shift and go to state 8
    if_else                        shift and go to state 12
    if                             shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    each                           shift and go to state 16
    ineach                         shift and go to state 17
    try                            shift and go to state 18
    do                             shift and go to state 19
    declaration                    shift and go to state 20
    continue                       shift and go to state 21
    break                          shift and go to state 22
    return                         shift and go to state 23
    throw                          shift and go to state 24
    expression                     shift and go to state 25
    decltype                       shift and go to state 105
    noncondexpression              shift and go to state 40
    conditional                    shift and go to state 41
    assignment                     shift and go to state 42
    type                           shift and go to state 10
    idaccess_lbrace                shift and go to state 11
    unary                          shift and go to state 43
    binary                         shift and go to state 44
    bool                           shift and go to state 45
    comp                           shift and go to state 46
    instanceof                     shift and go to state 47
    elvis                          shift and go to state 48
    only_assignment                shift and go to state 49
    compound_assignment            shift and go to state 50
    idaccess                       shift and go to state 28
    pre                            shift and go to state 51
    unarynotaddsub                 shift and go to state 52
    chain                          shift and go to state 56
    post                           shift and go to state 58
    not                            shift and go to state 59
    castexpression                 shift and go to state 60
    arrayinitializer               shift and go to state 61
    dynamic                        shift and go to state 62
    primordefcast                  shift and go to state 65
    refcast                        shift and go to state 66
    newstandardarray               shift and go to state 67
    newinitializedarray            shift and go to state 68
    callinvoke                     shift and go to state 69
    fieldaccess                    shift and go to state 70
    braceaccess                    shift and go to state 71
    primary                        shift and go to state 72
    callinvoke_no_null_safe        shift and go to state 74
    callinvoke_null_safe           shift and go to state 75
    fieldaccess_no_null_safe       shift and go to state 76
    fieldaccess_null_safe          shift and go to state 77
    precedence                     shift and go to state 78
    numeric                        shift and go to state 79
    boolean                        shift and go to state 80
    null                           shift and go to state 81
    string                         shift and go to state 82
    regex                          shift and go to state 83
    listinitializer                shift and go to state 84
    mapinitializer                 shift and go to state 85
    calllocal                      shift and go to state 86
    newobject                      shift and go to state 87
    octal                          shift and go to state 88
    hex                            shift and go to state 89
    integer                        shift and go to state 90
    decimal                        shift and go to state 91

state 386

    (28) each -> FOR LP decltype ID COLON expression RP trailer .

    IF              reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    WHILE           reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    FOR             reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    TRY             reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    DO              reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    CONTINUE        reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    BREAK           reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    RETURN          reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    THROW           reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    DEF             reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    PRIMITIVE       reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    ID              reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    INCR            reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    DECR            reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    ADD             reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    SUB             reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    BOOLNOT         reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    BWNOT           reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    LP              reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    NEW             reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    TRUE            reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    FALSE           reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    NULL            reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    STRING          reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    REGEX           reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    LBRACE          reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    DOLLAR          reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    OCTAL           reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    HEX             reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    INTEGER         reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    DECIMAL         reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    $end            reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    RBRACK          reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)
    ELSE            reduce using rule 28 (each -> FOR LP decltype ID COLON expression RP trailer .)


state 387

    (73) trap -> CATCH LP type ID RP block .

    CATCH           reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    IF              reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    WHILE           reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    FOR             reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    TRY             reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    DO              reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    CONTINUE        reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    BREAK           reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    RETURN          reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    THROW           reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    DEF             reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    PRIMITIVE       reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    ID              reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    INCR            reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    DECR            reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    ADD             reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    SUB             reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    BOOLNOT         reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    BWNOT           reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    LP              reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    NEW             reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    TRUE            reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    FALSE           reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    NULL            reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    STRING          reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    REGEX           reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    LBRACE          reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    DOLLAR          reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    OCTAL           reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    HEX             reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    INTEGER         reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    DECIMAL         reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    $end            reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    RBRACK          reduce using rule 73 (trap -> CATCH LP type ID RP block .)
    ELSE            reduce using rule 73 (trap -> CATCH LP type ID RP block .)


state 388

    (27) for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .

    IF              reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    WHILE           reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    FOR             reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    TRY             reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    DO              reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    CONTINUE        reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    BREAK           reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    RETURN          reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    THROW           reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    DEF             reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    PRIMITIVE       reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    ID              reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    INCR            reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    DECR            reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    ADD             reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    SUB             reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    BOOLNOT         reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    BWNOT           reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    LP              reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    NEW             reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    TRUE            reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    FALSE           reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    NULL            reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    STRING          reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    REGEX           reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    LBRACE          reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    DOLLAR          reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    OCTAL           reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    HEX             reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    INTEGER         reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    DECIMAL         reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    $end            reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    RBRACK          reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)
    ELSE            reduce using rule 27 (for -> FOR LP initializer SEMICOLON optional_expression SEMICOLON afterthought RP trailer_or_empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LP in state 7 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 28 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 28 resolved as shift
WARNING: shift/reduce conflict for DOT in state 28 resolved as shift
WARNING: shift/reduce conflict for LP in state 117 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 118 resolved as shift
WARNING: shift/reduce conflict for DOT in state 118 resolved as shift
WARNING: shift/reduce conflict for DOT in state 135 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 135 resolved as shift
WARNING: shift/reduce conflict for LP in state 216 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 235 resolved as shift
WARNING: shift/reduce conflict for LP in state 239 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 275 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 305 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 306 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 307 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 307 resolved as shift
WARNING: shift/reduce conflict for DOT in state 307 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 352 resolved as shift
WARNING: reduce/reduce conflict in state 135 resolved using rule (refcasttype -> idaccess)
WARNING: rejected rule (fieldaccess_no_null_safe -> idaccess) in state 135
WARNING: reduce/reduce conflict in state 216 resolved using rule (idaccess -> ID)
WARNING: rejected rule (lamtype -> ID) in state 216
WARNING: reduce/reduce conflict in state 307 resolved using rule (refcasttype -> idaccess)
WARNING: rejected rule (fieldaccess_no_null_safe -> idaccess) in state 307
